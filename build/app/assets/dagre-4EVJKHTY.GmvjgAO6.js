import{_ as e,av as n,aw as t,ax as r,ay as a,l as i,d as o,az as s,aA as d,ah as c,am as g,ai as l,ag as f,aB as h,aC as p,aD as u}from"./mermaid.core.tHGlKmnM.js";import{G as w}from"./graph.A9lZ3owi.js";import{l as m}from"./layout.9OyZaRTR.js";import{i as v}from"./_baseUniq.jbqE6i7x.js";import{c as y}from"./clone.2kJP-XDj.js";import{m as X}from"./_basePickBy.pxmUilPg.js";import"./index.mlCxaiYE.js";function write(e){var n={options:{directed:e.isDirected(),multigraph:e.isMultigraph(),compound:e.isCompound()},nodes:writeNodes(e),edges:writeEdges(e)};return v(e.graph())||(n.value=y(e.graph())),n}function writeNodes(e){return X(e.nodes(),(function(n){var t=e.node(n),r=e.parent(n),a={v:n};return v(t)||(a.value=t),v(r)||(a.parent=r),a}))}function writeEdges(e){return X(e.edges(),(function(n){var t=e.edge(n),r={v:n.v,w:n.w};return v(n.name)||(r.name=n.name),v(t)||(r.value=t),r}))}var E=new Map,N=new Map,b=new Map,C=e((()=>{N.clear(),b.clear(),E.clear()}),"clear"),x=e(((e,n)=>{const t=N.get(n)||[];return i.trace("In isDescendant",n," ",e," = ",t.includes(e)),t.includes(e)}),"isDescendant"),S=e(((e,n)=>{const t=N.get(n)||[];return i.info("Descendants of ",n," is ",t),i.info("Edge is ",e),e.v!==n&&e.w!==n&&(t?t.includes(e.v)||x(e.v,n)||x(e.w,n)||t.includes(e.w):(i.debug("Tilt, ",n,",not in descendants"),!1))}),"edgeInCluster"),I=e(((e,n,t,r)=>{i.warn("Copying children of ",e,"root",r,"data",n.node(e),r);const a=n.children(e)||[];e!==r&&a.push(e),i.warn("Copying (nodes) clusterId",e,"nodes",a),a.forEach((a=>{if(n.children(a).length>0)I(a,n,t,r);else{const o=n.node(a);i.info("cp ",a," to ",r," with parent ",e),t.setNode(a,o),r!==n.parent(a)&&(i.warn("Setting parent",a,n.parent(a)),t.setParent(a,n.parent(a))),e!==r&&a!==e?(i.debug("Setting parent",a,e),t.setParent(a,e)):(i.info("In copy ",e,"root",r,"data",n.node(e),r),i.debug("Not Setting parent for node=",a,"cluster!==rootId",e!==r,"node!==clusterId",a!==e));const s=n.edges(a);i.debug("Copying Edges",s),s.forEach((a=>{i.info("Edge",a);const o=n.edge(a.v,a.w,a.name);i.info("Edge data",o,r);try{S(a,r)?(i.info("Copying as ",a.v,a.w,o,a.name),t.setEdge(a.v,a.w,o,a.name),i.info("newGraph edges ",t.edges(),t.edge(t.edges()[0]))):i.info("Skipping copy of edge ",a.v,"--\x3e",a.w," rootId: ",r," clusterId:",e)}catch(s){i.error(s)}}))}i.debug("Removing node",a),n.removeNode(a)}))}),"copy"),D=e(((e,n)=>{const t=n.children(e);let r=[...t];for(const a of t)b.set(a,e),r=[...r,...D(a,n)];return r}),"extractDescendants"),O=e(((e,n,t)=>{const r=e.edges().filter((e=>e.v===n||e.w===n)),a=e.edges().filter((e=>e.v===t||e.w===t)),i=r.map((e=>({v:e.v===n?t:e.v,w:e.w===n?n:e.w}))),o=a.map((e=>({v:e.v,w:e.w})));return i.filter((e=>o.some((n=>e.v===n.v&&e.w===n.w))))}),"findCommonEdges"),k=e(((e,n,t)=>{const r=n.children(e);if(i.trace("Searching children of id ",e,r),r.length<1)return e;let a;for(const i of r){const e=k(i,n,t),r=O(n,t,e);if(e){if(!(r.length>0))return e;a=e}}return a}),"findNonClusterChild"),G=e((e=>E.has(e)&&E.get(e).externalConnections&&E.has(e)?E.get(e).id:e),"getAnchorId"),B=e(((e,n)=>{if(!e||n>10)i.debug("Opting out, no graph ");else{i.debug("Opting in, graph "),e.nodes().forEach((function(n){e.children(n).length>0&&(i.warn("Cluster identified",n," Replacement id in edges: ",k(n,e,n)),N.set(n,D(n,e)),E.set(n,{id:k(n,e,n),clusterData:e.node(n)}))})),e.nodes().forEach((function(n){const t=e.children(n),r=e.edges();t.length>0?(i.debug("Cluster identified",n,N),r.forEach((e=>{x(e.v,n)^x(e.w,n)&&(i.warn("Edge: ",e," leaves cluster ",n),i.warn("Descendants of XXX ",n,": ",N.get(n)),E.get(n).externalConnections=!0)}))):i.debug("Not a cluster ",n,N)}));for(let n of E.keys()){const t=E.get(n).id,r=e.parent(t);r!==n&&E.has(r)&&!E.get(r).externalConnections&&(E.get(n).id=r)}e.edges().forEach((function(n){const t=e.edge(n);i.warn("Edge "+n.v+" -> "+n.w+": "+JSON.stringify(n)),i.warn("Edge "+n.v+" -> "+n.w+": "+JSON.stringify(e.edge(n)));let r=n.v,a=n.w;if(i.warn("Fix XXX",E,"ids:",n.v,n.w,"Translating: ",E.get(n.v)," --- ",E.get(n.w)),E.get(n.v)||E.get(n.w)){if(i.warn("Fixing and trying - removing XXX",n.v,n.w,n.name),r=G(n.v),a=G(n.w),e.removeEdge(n.v,n.w,n.name),r!==n.v){const a=e.parent(r);E.get(a).externalConnections=!0,t.fromCluster=n.v}if(a!==n.w){const r=e.parent(a);E.get(r).externalConnections=!0,t.toCluster=n.w}i.warn("Fix Replacing with XXX",r,a,n.name),e.setEdge(r,a,t,n.name)}})),i.warn("Adjusted Graph",write(e)),P(e,0),i.trace(E)}}),"adjustClustersAndEdges"),P=e(((e,n)=>{if(i.warn("extractor - ",n,write(e),e.children("D")),n>10)return void i.error("Bailing out");let t=e.nodes(),r=!1;for(const a of t){const n=e.children(a);r=r||n.length>0}if(r){i.debug("Nodes = ",t,n);for(const r of t)if(i.debug("Extracting node",r,E,E.has(r)&&!E.get(r).externalConnections,!e.parent(r),e.node(r),e.children("D")," Depth ",n),E.has(r))if(!E.get(r).externalConnections&&e.children(r)&&e.children(r).length>0){i.warn("Cluster without external connections, without a parent and with children",r,n);let t="TB"===e.graph().rankdir?"LR":"TB";E.get(r)?.clusterData?.dir&&(t=E.get(r).clusterData.dir,i.warn("Fixing dir",E.get(r).clusterData.dir,t));const a=new w({multigraph:!0,compound:!0}).setGraph({rankdir:t,nodesep:50,ranksep:50,marginx:8,marginy:8}).setDefaultEdgeLabel((function(){return{}}));i.warn("Old graph before copy",write(e)),I(r,e,a,r),e.setNode(r,{clusterNode:!0,id:r,clusterData:E.get(r).clusterData,label:E.get(r).label,graph:a}),i.warn("New graph after copy node: (",r,")",write(a)),i.debug("Old graph after copy",write(e))}else i.warn("Cluster ** ",r," **not meeting the criteria !externalConnections:",!E.get(r).externalConnections," no parent: ",!e.parent(r)," children ",e.children(r)&&e.children(r).length>0,e.children("D"),n),i.debug(E);else i.debug("Not a cluster",r,n);t=e.nodes(),i.warn("New list of nodes",t);for(const r of t){const t=e.node(r);i.warn(" Now next level",r,t),t?.clusterNode&&P(t.graph,n+1)}}else i.debug("Done, no node has children",e.nodes())}),"extractor"),A=e(((e,n)=>{if(0===n.length)return[];let t=Object.assign([],n);return n.forEach((n=>{const r=e.children(n),a=A(e,r);t=[...t,...a]})),t}),"sorter"),J=e((e=>A(e,e.children())),"sortNodesByHierarchy"),j=e((async(n,t,r,a,o,w)=>{i.warn("Graph in recursive render:XAX",write(t),o);const v=t.graph().rankdir;i.trace("Dir in recursive render - dir:",v);const y=n.insert("g").attr("class","root");t.nodes()?i.info("Recursive render XXX",t.nodes()):i.info("No nodes found for",t),t.edges().length>0&&i.info("Recursive edges",t.edge(t.edges()[0]));const X=y.insert("g").attr("class","clusters"),N=y.insert("g").attr("class","edgePaths"),b=y.insert("g").attr("class","edgeLabels"),C=y.insert("g").attr("class","nodes");await Promise.all(t.nodes().map((async function(e){const n=t.node(e);if(void 0!==o){const n=JSON.parse(JSON.stringify(o.clusterData));i.trace("Setting data for parent cluster XXX\n Node.id = ",e,"\n data=",n.height,"\nParent cluster",o.height),t.setNode(o.id,n),t.parent(e)||(i.trace("Setting parent",e,o.id),t.setParent(e,o.id,n))}if(i.info("(Insert) Node XXX"+e+": "+JSON.stringify(t.node(e))),n?.clusterNode){i.info("Cluster identified XBX",e,n.width,t.node(e));const{ranksep:o,nodesep:c}=t.graph();n.graph.setGraph({...n.graph.graph(),ranksep:o+25,nodesep:c});const g=await j(C,n.graph,r,a,t.node(e),w),l=g.elem;s(n,l),n.diff=g.diff||0,i.info("New compound node after recursive render XAX",e,"width",n.width,"height",n.height),d(l,n)}else t.children(e).length>0?(i.trace("Cluster - the non recursive path XBX",e,n.id,n,n.width,"Graph:",t),i.trace(k(n.id,t)),E.set(n.id,{id:k(n.id,t),node:n})):(i.trace("Node - the non recursive path XAX",e,C,t.node(e),v),await c(C,t.node(e),{config:w,dir:v}))})));const x=e((async()=>{const e=t.edges().map((async function(e){const n=t.edge(e.v,e.w,e.name);i.info("Edge "+e.v+" -> "+e.w+": "+JSON.stringify(e)),i.info("Edge "+e.v+" -> "+e.w+": ",e," ",JSON.stringify(t.edge(e))),i.info("Fix",E,"ids:",e.v,e.w,"Translating: ",E.get(e.v),E.get(e.w)),await u(b,n)}));await Promise.all(e)}),"processEdges");await x(),i.info("Graph before layout:",JSON.stringify(write(t))),i.info("############################################# XXX"),i.info("###                Layout                 ### XXX"),i.info("############################################# XXX"),m(t),i.info("Graph after layout:",JSON.stringify(write(t)));let S=0,{subGraphTitleTotalMargin:I}=g(w);return await Promise.all(J(t).map((async function(e){const n=t.node(e);if(i.info("Position XBX => "+e+": ("+n.x,","+n.y,") width: ",n.width," height: ",n.height),n?.clusterNode)n.y+=I,i.info("A tainted cluster node XBX1",e,n.id,n.width,n.height,n.x,n.y,t.parent(e)),E.get(n.id).node=n,l(n);else if(t.children(e).length>0){i.info("A pure cluster node XBX1",e,n.id,n.x,n.y,n.width,n.height,t.parent(e)),n.height+=I,t.node(n.parentId);const r=n?.padding/2||0,a=n?.labelBBox?.height||0,o=a-r||0;i.debug("OffsetY",o,"labelHeight",a,"halfPadding",r),await f(X,n),E.get(n.id).node=n}else{const e=t.node(n.parentId);n.y+=I/2,i.info("A regular node XBX1 - using the padding",n.id,"parent",n.parentId,n.width,n.height,n.x,n.y,"offsetY",n.offsetY,"parent",e,e?.offsetY,n),l(n)}}))),t.edges().forEach((function(e){const n=t.edge(e);i.info("Edge "+e.v+" -> "+e.w+": "+JSON.stringify(n),n),n.points.forEach((e=>e.y+=I/2));const o=t.node(e.v);var s=t.node(e.w);const d=h(N,n,E,r,o,s,a);p(n,d)})),t.nodes().forEach((function(e){const n=t.node(e);i.info(e,n.type,n.diff),n.isGroup&&(S=n.diff)})),i.warn("Returning from recursive render XAX",y,S),{elem:y,diff:S}}),"recursiveRender"),R=e((async(e,s)=>{const d=new w({multigraph:!0,compound:!0}).setGraph({rankdir:e.direction,nodesep:e.config?.nodeSpacing||e.config?.flowchart?.nodeSpacing||e.nodeSpacing,ranksep:e.config?.rankSpacing||e.config?.flowchart?.rankSpacing||e.rankSpacing,marginx:8,marginy:8}).setDefaultEdgeLabel((function(){return{}})),c=s.select("g");n(c,e.markers,e.type,e.diagramId),t(),r(),a(),C(),e.nodes.forEach((e=>{d.setNode(e.id,{...e}),e.parentId&&d.setParent(e.id,e.parentId)})),i.debug("Edges:",e.edges),e.edges.forEach((e=>{if(e.start===e.end){const n=e.start,t=n+"---"+n+"---1",r=n+"---"+n+"---2",a=d.node(n);d.setNode(t,{domId:t,id:t,parentId:a.parentId,labelStyle:"",label:"",padding:0,shape:"labelRect",style:"",width:10,height:10}),d.setParent(t,a.parentId),d.setNode(r,{domId:r,id:r,parentId:a.parentId,labelStyle:"",padding:0,shape:"labelRect",label:"",style:"",width:10,height:10}),d.setParent(r,a.parentId);const i=structuredClone(e),o=structuredClone(e),s=structuredClone(e);i.label="",i.arrowTypeEnd="none",i.id=n+"-cyclic-special-1",o.arrowTypeEnd="none",o.id=n+"-cyclic-special-mid",s.label="",a.isGroup&&(i.fromCluster=n,s.toCluster=n),s.id=n+"-cyclic-special-2",d.setEdge(n,t,i,n+"-cyclic-special-0"),d.setEdge(t,r,o,n+"-cyclic-special-1"),d.setEdge(r,n,s,n+"-cyc<lic-special-2")}else d.setEdge(e.start,e.end,{...e},e.id)})),i.warn("Graph at first:",JSON.stringify(write(d))),B(d),i.warn("Graph after XAX:",JSON.stringify(write(d)));const g=o();await j(c,d,e.type,e.diagramId,void 0,g)}),"render");export{R as render};
