{"version":3,"file":"motion.-xvjku24.js","sources":["../../../node_modules/framer-motion/dist/es/gestures/use-hover-gesture.js","../../../node_modules/framer-motion/dist/es/gestures/utils/is-node-or-child.js","../../../node_modules/framer-motion/dist/es/motion/utils/make-renderless-component.js","../../../node_modules/framer-motion/dist/es/motion/features/gestures.js","../../../node_modules/framer-motion/dist/es/gestures/use-tap-gesture.js","../../../node_modules/framer-motion/dist/es/gestures/use-focus-gesture.js","../../../node_modules/framer-motion/dist/es/utils/shallow-compare.js","../../../node_modules/framer-motion/dist/es/utils/is-numerical-string.js","../../../node_modules/framer-motion/dist/es/render/dom/value-types/test.js","../../../node_modules/framer-motion/dist/es/render/dom/value-types/dimensions.js","../../../node_modules/framer-motion/dist/es/render/dom/value-types/type-auto.js","../../../node_modules/framer-motion/dist/es/render/dom/value-types/find.js","../../../node_modules/framer-motion/dist/es/render/utils/setters.js","../../../node_modules/framer-motion/dist/es/render/utils/animation.js","../../../node_modules/framer-motion/dist/es/render/utils/animation-state.js","../../../node_modules/framer-motion/dist/es/motion/features/animations.js","../../../node_modules/framer-motion/dist/es/motion/features/drag.js","../../../node_modules/framer-motion/dist/es/gestures/use-pan-gesture.js","../../../node_modules/framer-motion/dist/es/gestures/drag/use-drag.js","../../../node_modules/framer-motion/dist/es/render/dom/utils/css-variables-conversion.js","../../../node_modules/framer-motion/dist/es/render/dom/projection/default-scale-correctors.js","../../../node_modules/framer-motion/dist/es/motion/features/layout/Animate.js","../../../node_modules/framer-motion/dist/es/motion/features/layout/Measure.js","../../../node_modules/framer-motion/dist/es/motion/features/layout/index.js","../../../node_modules/framer-motion/dist/es/render/utils/state.js","../../../node_modules/framer-motion/dist/es/render/html/utils/build-projection-transform.js","../../../node_modules/framer-motion/dist/es/render/utils/lifecycles.js","../../../node_modules/framer-motion/dist/es/render/utils/flat-tree.js","../../../node_modules/framer-motion/dist/es/render/index.js","../../../node_modules/framer-motion/dist/es/render/utils/motion-values.js","../../../node_modules/framer-motion/dist/es/render/dom/projection/relative-set.js","../../../node_modules/framer-motion/dist/es/render/utils/projection.js","../../../node_modules/framer-motion/dist/es/render/dom/utils/unit-conversion.js","../../../node_modules/framer-motion/dist/es/render/dom/utils/parse-dom-variant.js","../../../node_modules/framer-motion/dist/es/render/html/visual-element.js","../../../node_modules/framer-motion/dist/es/render/svg/visual-element.js","../../../node_modules/framer-motion/dist/es/render/dom/features-animation.js","../../../node_modules/framer-motion/dist/es/render/dom/create-visual-element.js","../../../node_modules/framer-motion/dist/es/render/dom/features-max.js"],"sourcesContent":["import { isMouseEvent } from './utils/event-type.js';\nimport { AnimationType } from '../render/utils/types.js';\nimport { usePointerEvent } from '../events/use-pointer-event.js';\nimport { isDragActive } from './drag/utils/lock.js';\n\nfunction createHoverEvent(visualElement, isActive, callback) {\n    return function (event, info) {\n        var _a;\n        if (!isMouseEvent(event) || isDragActive())\n            return;\n        callback === null || callback === void 0 ? void 0 : callback(event, info);\n        (_a = visualElement.animationState) === null || _a === void 0 ? void 0 : _a.setActive(AnimationType.Hover, isActive);\n    };\n}\nfunction useHoverGesture(_a) {\n    var onHoverStart = _a.onHoverStart, onHoverEnd = _a.onHoverEnd, whileHover = _a.whileHover, visualElement = _a.visualElement;\n    usePointerEvent(visualElement, \"pointerenter\", onHoverStart || whileHover\n        ? createHoverEvent(visualElement, true, onHoverStart)\n        : undefined);\n    usePointerEvent(visualElement, \"pointerleave\", onHoverEnd || whileHover\n        ? createHoverEvent(visualElement, false, onHoverEnd)\n        : undefined);\n}\n\nexport { useHoverGesture };\n","/**\n * Recursively traverse up the tree to check whether the provided child node\n * is the parent or a descendant of it.\n *\n * @param parent - Element to find\n * @param child - Element to test against parent\n */\nvar isNodeOrChild = function (parent, child) {\n    if (!child) {\n        return false;\n    }\n    else if (parent === child) {\n        return true;\n    }\n    else {\n        return isNodeOrChild(parent, child.parentElement);\n    }\n};\n\nexport { isNodeOrChild };\n","var makeRenderlessComponent = function (hook) { return function (props) {\n    hook(props);\n    return null;\n}; };\n\nexport { makeRenderlessComponent };\n","import { useFocusGesture } from '../../gestures/use-focus-gesture.js';\nimport { useHoverGesture } from '../../gestures/use-hover-gesture.js';\nimport { useTapGesture } from '../../gestures/use-tap-gesture.js';\nimport { makeRenderlessComponent } from '../utils/make-renderless-component.js';\n\nvar gestureAnimations = {\n    tap: makeRenderlessComponent(useTapGesture),\n    focus: makeRenderlessComponent(useFocusGesture),\n    hover: makeRenderlessComponent(useHoverGesture),\n};\n\nexport { gestureAnimations };\n","import { useRef } from 'react';\nimport { isNodeOrChild } from './utils/is-node-or-child.js';\nimport { usePointerEvent, addPointerEvent } from '../events/use-pointer-event.js';\nimport { useUnmountEffect } from '../utils/use-unmount-effect.js';\nimport { pipe } from 'popmotion';\nimport { AnimationType } from '../render/utils/types.js';\nimport { isDragActive } from './drag/utils/lock.js';\n\n/**\n * @param handlers -\n * @internal\n */\nfunction useTapGesture(_a) {\n    var onTap = _a.onTap, onTapStart = _a.onTapStart, onTapCancel = _a.onTapCancel, whileTap = _a.whileTap, visualElement = _a.visualElement;\n    var hasPressListeners = onTap || onTapStart || onTapCancel || whileTap;\n    var isPressing = useRef(false);\n    var cancelPointerEndListeners = useRef(null);\n    function removePointerEndListener() {\n        var _a;\n        (_a = cancelPointerEndListeners.current) === null || _a === void 0 ? void 0 : _a.call(cancelPointerEndListeners);\n        cancelPointerEndListeners.current = null;\n    }\n    function checkPointerEnd() {\n        var _a;\n        removePointerEndListener();\n        isPressing.current = false;\n        (_a = visualElement.animationState) === null || _a === void 0 ? void 0 : _a.setActive(AnimationType.Tap, false);\n        return !isDragActive();\n    }\n    function onPointerUp(event, info) {\n        if (!checkPointerEnd())\n            return;\n        /**\n         * We only count this as a tap gesture if the event.target is the same\n         * as, or a child of, this component's element\n         */\n        !isNodeOrChild(visualElement.getInstance(), event.target)\n            ? onTapCancel === null || onTapCancel === void 0 ? void 0 : onTapCancel(event, info)\n            : onTap === null || onTap === void 0 ? void 0 : onTap(event, info);\n    }\n    function onPointerCancel(event, info) {\n        if (!checkPointerEnd())\n            return;\n        onTapCancel === null || onTapCancel === void 0 ? void 0 : onTapCancel(event, info);\n    }\n    function onPointerDown(event, info) {\n        var _a;\n        removePointerEndListener();\n        if (isPressing.current)\n            return;\n        isPressing.current = true;\n        cancelPointerEndListeners.current = pipe(addPointerEvent(window, \"pointerup\", onPointerUp), addPointerEvent(window, \"pointercancel\", onPointerCancel));\n        onTapStart === null || onTapStart === void 0 ? void 0 : onTapStart(event, info);\n        (_a = visualElement.animationState) === null || _a === void 0 ? void 0 : _a.setActive(AnimationType.Tap, true);\n    }\n    usePointerEvent(visualElement, \"pointerdown\", hasPressListeners ? onPointerDown : undefined);\n    useUnmountEffect(removePointerEndListener);\n}\n\nexport { useTapGesture };\n","import { AnimationType } from '../render/utils/types.js';\nimport { useDomEvent } from '../events/use-dom-event.js';\n\n/**\n *\n * @param props\n * @param ref\n * @internal\n */\nfunction useFocusGesture(_a) {\n    var whileFocus = _a.whileFocus, visualElement = _a.visualElement;\n    var onFocus = function () {\n        var _a;\n        (_a = visualElement.animationState) === null || _a === void 0 ? void 0 : _a.setActive(AnimationType.Focus, true);\n    };\n    var onBlur = function () {\n        var _a;\n        (_a = visualElement.animationState) === null || _a === void 0 ? void 0 : _a.setActive(AnimationType.Focus, false);\n    };\n    useDomEvent(visualElement, \"focus\", whileFocus ? onFocus : undefined);\n    useDomEvent(visualElement, \"blur\", whileFocus ? onBlur : undefined);\n}\n\nexport { useFocusGesture };\n","function shallowCompare(next, prev) {\n    if (!Array.isArray(prev))\n        return false;\n    var prevLength = prev.length;\n    if (prevLength !== next.length)\n        return false;\n    for (var i = 0; i < prevLength; i++) {\n        if (prev[i] !== next[i])\n            return false;\n    }\n    return true;\n}\n\nexport { shallowCompare };\n","/**\n * Check if value is a numerical string, ie a string that is purely a number eg \"100\" or \"-100.1\"\n */\nvar isNumericalString = function (v) { return /^\\-?\\d*\\.?\\d+$/.test(v); };\n\nexport { isNumericalString };\n","/**\n * Tests a provided value against a ValueType\n */\nvar testValueType = function (v) { return function (type) { return type.test(v); }; };\n\nexport { testValueType };\n","import { number, px, percent, degrees, vw, vh } from 'style-value-types';\nimport { testValueType } from './test.js';\nimport { auto } from './type-auto.js';\n\n/**\n * A list of value types commonly used for dimensions\n */\nvar dimensionValueTypes = [number, px, percent, degrees, vw, vh, auto];\n/**\n * Tests a dimensional value against the list of dimension ValueTypes\n */\nvar findDimensionValueType = function (v) {\n    return dimensionValueTypes.find(testValueType(v));\n};\n\nexport { dimensionValueTypes, findDimensionValueType };\n","/**\n * ValueType for \"auto\"\n */\nvar auto = {\n    test: function (v) { return v === \"auto\"; },\n    parse: function (v) { return v; },\n};\n\nexport { auto };\n","import { __spreadArray, __read } from 'tslib';\nimport { color, complex } from 'style-value-types';\nimport { dimensionValueTypes } from './dimensions.js';\nimport { testValueType } from './test.js';\n\n/**\n * A list of all ValueTypes\n */\nvar valueTypes = __spreadArray(__spreadArray([], __read(dimensionValueTypes)), [color, complex]);\n/**\n * Tests a value against the list of ValueTypes\n */\nvar findValueType = function (v) { return valueTypes.find(testValueType(v)); };\n\nexport { findValueType };\n","import { __rest, __assign, __spreadArray, __read } from 'tslib';\nimport { complex } from 'style-value-types';\nimport { isNumericalString } from '../../utils/is-numerical-string.js';\nimport { resolveFinalValueInKeyframes } from '../../utils/resolve-value.js';\nimport { motionValue } from '../../value/index.js';\nimport { getAnimatableNone } from '../dom/value-types/animatable-none.js';\nimport { findValueType } from '../dom/value-types/find.js';\nimport { resolveVariant } from './variants.js';\n\n/**\n * Set VisualElement's MotionValue, creating a new MotionValue for it if\n * it doesn't exist.\n */\nfunction setMotionValue(visualElement, key, value) {\n    if (visualElement.hasValue(key)) {\n        visualElement.getValue(key).set(value);\n    }\n    else {\n        visualElement.addValue(key, motionValue(value));\n    }\n}\nfunction setTarget(visualElement, definition) {\n    var resolved = resolveVariant(visualElement, definition);\n    var _a = resolved\n        ? visualElement.makeTargetAnimatable(resolved, false)\n        : {}, _b = _a.transitionEnd, transitionEnd = _b === void 0 ? {} : _b; _a.transition; var target = __rest(_a, [\"transitionEnd\", \"transition\"]);\n    target = __assign(__assign({}, target), transitionEnd);\n    for (var key in target) {\n        var value = resolveFinalValueInKeyframes(target[key]);\n        setMotionValue(visualElement, key, value);\n    }\n}\nfunction setVariants(visualElement, variantLabels) {\n    var reversedLabels = __spreadArray([], __read(variantLabels)).reverse();\n    reversedLabels.forEach(function (key) {\n        var _a;\n        var variant = visualElement.getVariant(key);\n        variant && setTarget(visualElement, variant);\n        (_a = visualElement.variantChildren) === null || _a === void 0 ? void 0 : _a.forEach(function (child) {\n            setVariants(child, variantLabels);\n        });\n    });\n}\nfunction setValues(visualElement, definition) {\n    if (Array.isArray(definition)) {\n        return setVariants(visualElement, definition);\n    }\n    else if (typeof definition === \"string\") {\n        return setVariants(visualElement, [definition]);\n    }\n    else {\n        setTarget(visualElement, definition);\n    }\n}\nfunction checkTargetForNewValues(visualElement, target, origin) {\n    var _a, _b, _c;\n    var _d;\n    var newValueKeys = Object.keys(target).filter(function (key) { return !visualElement.hasValue(key); });\n    var numNewValues = newValueKeys.length;\n    if (!numNewValues)\n        return;\n    for (var i = 0; i < numNewValues; i++) {\n        var key = newValueKeys[i];\n        var targetValue = target[key];\n        var value = null;\n        /**\n         * If the target is a series of keyframes, we can use the first value\n         * in the array. If this first value is null, we'll still need to read from the DOM.\n         */\n        if (Array.isArray(targetValue)) {\n            value = targetValue[0];\n        }\n        /**\n         * If the target isn't keyframes, or the first keyframe was null, we need to\n         * first check if an origin value was explicitly defined in the transition as \"from\",\n         * if not read the value from the DOM. As an absolute fallback, take the defined target value.\n         */\n        if (value === null) {\n            value = (_b = (_a = origin[key]) !== null && _a !== void 0 ? _a : visualElement.readValue(key)) !== null && _b !== void 0 ? _b : target[key];\n        }\n        /**\n         * If value is still undefined or null, ignore it. Preferably this would throw,\n         * but this was causing issues in Framer.\n         */\n        if (value === undefined || value === null)\n            continue;\n        if (typeof value === \"string\" && isNumericalString(value)) {\n            // If this is a number read as a string, ie \"0\" or \"200\", convert it to a number\n            value = parseFloat(value);\n        }\n        else if (!findValueType(value) && complex.test(targetValue)) {\n            value = getAnimatableNone(key, targetValue);\n        }\n        visualElement.addValue(key, motionValue(value));\n        (_c = (_d = origin)[key]) !== null && _c !== void 0 ? _c : (_d[key] = value);\n        visualElement.setBaseTarget(key, value);\n    }\n}\nfunction getOriginFromTransition(key, transition) {\n    if (!transition)\n        return;\n    var valueTransition = transition[key] || transition[\"default\"] || transition;\n    return valueTransition.from;\n}\nfunction getOrigin(target, transition, visualElement) {\n    var _a, _b;\n    var origin = {};\n    for (var key in target) {\n        origin[key] =\n            (_a = getOriginFromTransition(key, transition)) !== null && _a !== void 0 ? _a : (_b = visualElement.getValue(key)) === null || _b === void 0 ? void 0 : _b.get();\n    }\n    return origin;\n}\n\nexport { checkTargetForNewValues, getOrigin, getOriginFromTransition, setTarget, setValues };\n","import { __read, __rest, __assign } from 'tslib';\nimport { startAnimation } from '../../animation/utils/transitions.js';\nimport { setTarget } from './setters.js';\nimport { resolveVariant } from './variants.js';\n\n/**\n * @internal\n */\nfunction animateVisualElement(visualElement, definition, options) {\n    if (options === void 0) { options = {}; }\n    visualElement.notifyAnimationStart();\n    var animation;\n    if (Array.isArray(definition)) {\n        var animations = definition.map(function (variant) {\n            return animateVariant(visualElement, variant, options);\n        });\n        animation = Promise.all(animations);\n    }\n    else if (typeof definition === \"string\") {\n        animation = animateVariant(visualElement, definition, options);\n    }\n    else {\n        var resolvedDefinition = typeof definition === \"function\"\n            ? resolveVariant(visualElement, definition, options.custom)\n            : definition;\n        animation = animateTarget(visualElement, resolvedDefinition, options);\n    }\n    return animation.then(function () {\n        return visualElement.notifyAnimationComplete(definition);\n    });\n}\nfunction animateVariant(visualElement, variant, options) {\n    var _a;\n    if (options === void 0) { options = {}; }\n    var resolved = resolveVariant(visualElement, variant, options.custom);\n    var _b = (resolved || {}).transition, transition = _b === void 0 ? visualElement.getDefaultTransition() || {} : _b;\n    if (options.transitionOverride) {\n        transition = options.transitionOverride;\n    }\n    /**\n     * If we have a variant, create a callback that runs it as an animation.\n     * Otherwise, we resolve a Promise immediately for a composable no-op.\n     */\n    var getAnimation = resolved\n        ? function () { return animateTarget(visualElement, resolved, options); }\n        : function () { return Promise.resolve(); };\n    /**\n     * If we have children, create a callback that runs all their animations.\n     * Otherwise, we resolve a Promise immediately for a composable no-op.\n     */\n    var getChildAnimations = ((_a = visualElement.variantChildren) === null || _a === void 0 ? void 0 : _a.size)\n        ? function (forwardDelay) {\n            if (forwardDelay === void 0) { forwardDelay = 0; }\n            var _a = transition.delayChildren, delayChildren = _a === void 0 ? 0 : _a, staggerChildren = transition.staggerChildren, staggerDirection = transition.staggerDirection;\n            return animateChildren(visualElement, variant, delayChildren + forwardDelay, staggerChildren, staggerDirection, options);\n        }\n        : function () { return Promise.resolve(); };\n    /**\n     * If the transition explicitly defines a \"when\" option, we need to resolve either\n     * this animation or all children animations before playing the other.\n     */\n    var when = transition.when;\n    if (when) {\n        var _c = __read(when === \"beforeChildren\"\n            ? [getAnimation, getChildAnimations]\n            : [getChildAnimations, getAnimation], 2), first = _c[0], last = _c[1];\n        return first().then(last);\n    }\n    else {\n        return Promise.all([getAnimation(), getChildAnimations(options.delay)]);\n    }\n}\n/**\n * @internal\n */\nfunction animateTarget(visualElement, definition, _a) {\n    var _b;\n    var _c = _a === void 0 ? {} : _a, _d = _c.delay, delay = _d === void 0 ? 0 : _d, transitionOverride = _c.transitionOverride, type = _c.type;\n    var _e = visualElement.makeTargetAnimatable(definition), _f = _e.transition, transition = _f === void 0 ? visualElement.getDefaultTransition() : _f, transitionEnd = _e.transitionEnd, target = __rest(_e, [\"transition\", \"transitionEnd\"]);\n    if (transitionOverride)\n        transition = transitionOverride;\n    var animations = [];\n    var animationTypeState = type && ((_b = visualElement.animationState) === null || _b === void 0 ? void 0 : _b.getState()[type]);\n    for (var key in target) {\n        var value = visualElement.getValue(key);\n        var valueTarget = target[key];\n        if (!value ||\n            valueTarget === undefined ||\n            (animationTypeState &&\n                shouldBlockAnimation(animationTypeState, key))) {\n            continue;\n        }\n        var animation = startAnimation(key, value, valueTarget, __assign({ delay: delay }, transition));\n        animations.push(animation);\n    }\n    return Promise.all(animations).then(function () {\n        transitionEnd && setTarget(visualElement, transitionEnd);\n    });\n}\nfunction animateChildren(visualElement, variant, delayChildren, staggerChildren, staggerDirection, options) {\n    if (delayChildren === void 0) { delayChildren = 0; }\n    if (staggerChildren === void 0) { staggerChildren = 0; }\n    if (staggerDirection === void 0) { staggerDirection = 1; }\n    var animations = [];\n    var maxStaggerDuration = (visualElement.variantChildren.size - 1) * staggerChildren;\n    var generateStaggerDuration = staggerDirection === 1\n        ? function (i) {\n            if (i === void 0) { i = 0; }\n            return i * staggerChildren;\n        }\n        : function (i) {\n            if (i === void 0) { i = 0; }\n            return maxStaggerDuration - i * staggerChildren;\n        };\n    Array.from(visualElement.variantChildren)\n        .sort(sortByTreeOrder)\n        .forEach(function (child, i) {\n        animations.push(animateVariant(child, variant, __assign(__assign({}, options), { delay: delayChildren + generateStaggerDuration(i) })).then(function () { return child.notifyAnimationComplete(variant); }));\n    });\n    return Promise.all(animations);\n}\nfunction stopAnimation(visualElement) {\n    visualElement.forEachValue(function (value) { return value.stop(); });\n}\nfunction sortByTreeOrder(a, b) {\n    return a.sortNodePosition(b);\n}\n/**\n * Decide whether we should block this animation. Previously, we achieved this\n * just by checking whether the key was listed in protectedKeys, but this\n * posed problems if an animation was triggered by afterChildren and protectedKeys\n * had been set to true in the meantime.\n */\nfunction shouldBlockAnimation(_a, key) {\n    var protectedKeys = _a.protectedKeys, needsAnimating = _a.needsAnimating;\n    var shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;\n    needsAnimating[key] = false;\n    return shouldBlock;\n}\n\nexport { animateVisualElement, sortByTreeOrder, stopAnimation };\n","import { __spreadArray, __read, __assign, __rest } from 'tslib';\nimport { isAnimationControls } from '../../animation/utils/is-animation-controls.js';\nimport { isKeyframesTarget } from '../../animation/utils/is-keyframes-target.js';\nimport { shallowCompare } from '../../utils/shallow-compare.js';\nimport { animateVisualElement } from './animation.js';\nimport { AnimationType } from './types.js';\nimport { isVariantLabels, resolveVariant, isVariantLabel } from './variants.js';\n\nvar variantPriorityOrder = [\n    AnimationType.Animate,\n    AnimationType.Hover,\n    AnimationType.Tap,\n    AnimationType.Drag,\n    AnimationType.Focus,\n    AnimationType.Exit,\n];\nvar reversePriorityOrder = __spreadArray([], __read(variantPriorityOrder)).reverse();\nvar numAnimationTypes = variantPriorityOrder.length;\nfunction animateList(visualElement) {\n    return function (animations) {\n        return Promise.all(animations.map(function (_a) {\n            var animation = _a.animation, options = _a.options;\n            return animateVisualElement(visualElement, animation, options);\n        }));\n    };\n}\nfunction createAnimationState(visualElement) {\n    var animate = animateList(visualElement);\n    var state = createState();\n    var allAnimatedKeys = {};\n    var isInitialRender = true;\n    /**\n     * This function will be used to reduce the animation definitions for\n     * each active animation type into an object of resolved values for it.\n     */\n    var buildResolvedTypeValues = function (acc, definition) {\n        var resolved = resolveVariant(visualElement, definition);\n        if (resolved) {\n            resolved.transition; var transitionEnd = resolved.transitionEnd, target = __rest(resolved, [\"transition\", \"transitionEnd\"]);\n            acc = __assign(__assign(__assign({}, acc), target), transitionEnd);\n        }\n        return acc;\n    };\n    function isAnimated(key) {\n        return allAnimatedKeys[key] !== undefined;\n    }\n    /**\n     * This just allows us to inject mocked animation functions\n     * @internal\n     */\n    function setAnimateFunction(makeAnimator) {\n        animate = makeAnimator(visualElement);\n    }\n    /**\n     * When we receive new props, we need to:\n     * 1. Create a list of protected keys for each type. This is a directory of\n     *    value keys that are currently being \"handled\" by types of a higher priority\n     *    so that whenever an animation is played of a given type, these values are\n     *    protected from being animated.\n     * 2. Determine if an animation type needs animating.\n     * 3. Determine if any values have been removed from a type and figure out\n     *    what to animate those to.\n     */\n    function animateChanges(options, changedActiveType) {\n        var _a;\n        var props = visualElement.getProps();\n        var context = visualElement.getVariantContext(true) || {};\n        /**\n         * A list of animations that we'll build into as we iterate through the animation\n         * types. This will get executed at the end of the function.\n         */\n        var animations = [];\n        /**\n         * Keep track of which values have been removed. Then, as we hit lower priority\n         * animation types, we can check if they contain removed values and animate to that.\n         */\n        var removedKeys = new Set();\n        /**\n         * A dictionary of all encountered keys. This is an object to let us build into and\n         * copy it without iteration. Each time we hit an animation type we set its protected\n         * keys - the keys its not allowed to animate - to the latest version of this object.\n         */\n        var encounteredKeys = {};\n        /**\n         * If a variant has been removed at a given index, and this component is controlling\n         * variant animations, we want to ensure lower-priority variants are forced to animate.\n         */\n        var removedVariantIndex = Infinity;\n        var _loop_1 = function (i) {\n            var type = reversePriorityOrder[i];\n            var typeState = state[type];\n            var prop = (_a = props[type]) !== null && _a !== void 0 ? _a : context[type];\n            var propIsVariant = isVariantLabel(prop);\n            /**\n             * If this type has *just* changed isActive status, set activeDelta\n             * to that status. Otherwise set to null.\n             */\n            var activeDelta = type === changedActiveType ? typeState.isActive : null;\n            if (activeDelta === false)\n                removedVariantIndex = i;\n            /**\n             * If this prop is an inherited variant, rather than been set directly on the\n             * component itself, we want to make sure we allow the parent to trigger animations.\n             *\n             * TODO: Can probably change this to a !isControllingVariants check\n             */\n            var isInherited = prop === context[type] && prop !== props[type] && propIsVariant;\n            /**\n             *\n             */\n            if (isInherited &&\n                isInitialRender &&\n                visualElement.manuallyAnimateOnMount) {\n                isInherited = false;\n            }\n            /**\n             * Set all encountered keys so far as the protected keys for this type. This will\n             * be any key that has been animated or otherwise handled by active, higher-priortiy types.\n             */\n            typeState.protectedKeys = __assign({}, encounteredKeys);\n            // Check if we can skip analysing this prop early\n            if (\n            // If it isn't active and hasn't *just* been set as inactive\n            (!typeState.isActive && activeDelta === null) ||\n                // If we didn't and don't have any defined prop for this animation type\n                (!prop && !typeState.prevProp) ||\n                // Or if the prop doesn't define an animation\n                isAnimationControls(prop) ||\n                typeof prop === \"boolean\") {\n                return \"continue\";\n            }\n            /**\n             * As we go look through the values defined on this type, if we detect\n             * a changed value or a value that was removed in a higher priority, we set\n             * this to true and add this prop to the animation list.\n             */\n            var shouldAnimateType = variantsHaveChanged(typeState.prevProp, prop) ||\n                // If we're making this variant active, we want to always make it active\n                (type === changedActiveType &&\n                    typeState.isActive &&\n                    !isInherited &&\n                    propIsVariant) ||\n                // If we removed a higher-priority variant (i is in reverse order)\n                (i > removedVariantIndex && propIsVariant);\n            /**\n             * As animations can be set as variant lists, variants or target objects, we\n             * coerce everything to an array if it isn't one already\n             */\n            var definitionList = Array.isArray(prop) ? prop : [prop];\n            /**\n             * Build an object of all the resolved values. We'll use this in the subsequent\n             * animateChanges calls to determine whether a value has changed.\n             */\n            var resolvedValues = definitionList.reduce(buildResolvedTypeValues, {});\n            if (activeDelta === false)\n                resolvedValues = {};\n            /**\n             * Now we need to loop through all the keys in the prev prop and this prop,\n             * and decide:\n             * 1. If the value has changed, and needs animating\n             * 2. If it has been removed, and needs adding to the removedKeys set\n             * 3. If it has been removed in a higher priority type and needs animating\n             * 4. If it hasn't been removed in a higher priority but hasn't changed, and\n             *    needs adding to the type's protectedKeys list.\n             */\n            var _b = typeState.prevResolvedValues, prevResolvedValues = _b === void 0 ? {} : _b;\n            var allKeys = __assign(__assign({}, prevResolvedValues), resolvedValues);\n            var markToAnimate = function (key) {\n                shouldAnimateType = true;\n                removedKeys.delete(key);\n                typeState.needsAnimating[key] = true;\n            };\n            for (var key in allKeys) {\n                var next = resolvedValues[key];\n                var prev = prevResolvedValues[key];\n                // If we've already handled this we can just skip ahead\n                if (encounteredKeys.hasOwnProperty(key))\n                    continue;\n                /**\n                 * If the value has changed, we probably want to animate it.\n                 */\n                if (next !== prev) {\n                    /**\n                     * If both values are keyframes, we need to shallow compare them to\n                     * detect whether any value has changed. If it has, we animate it.\n                     */\n                    if (isKeyframesTarget(next) && isKeyframesTarget(prev)) {\n                        if (!shallowCompare(next, prev)) {\n                            markToAnimate(key);\n                        }\n                        else {\n                            /**\n                             * If it hasn't changed, we want to ensure it doesn't animate by\n                             * adding it to the list of protected keys.\n                             */\n                            typeState.protectedKeys[key] = true;\n                        }\n                    }\n                    else if (next !== undefined) {\n                        // If next is defined and doesn't equal prev, it needs animating\n                        markToAnimate(key);\n                    }\n                    else {\n                        // If it's undefined, it's been removed.\n                        removedKeys.add(key);\n                    }\n                }\n                else if (next !== undefined && removedKeys.has(key)) {\n                    /**\n                     * If next hasn't changed and it isn't undefined, we want to check if it's\n                     * been removed by a higher priority\n                     */\n                    markToAnimate(key);\n                }\n                else {\n                    /**\n                     * If it hasn't changed, we add it to the list of protected values\n                     * to ensure it doesn't get animated.\n                     */\n                    typeState.protectedKeys[key] = true;\n                }\n            }\n            /**\n             * Update the typeState so next time animateChanges is called we can compare the\n             * latest prop and resolvedValues to these.\n             */\n            typeState.prevProp = prop;\n            typeState.prevResolvedValues = resolvedValues;\n            /**\n             *\n             */\n            if (typeState.isActive) {\n                encounteredKeys = __assign(__assign({}, encounteredKeys), resolvedValues);\n            }\n            if (isInitialRender && visualElement.blockInitialAnimation) {\n                shouldAnimateType = false;\n            }\n            /**\n             * If this is an inherited prop we want to hard-block animations\n             * TODO: Test as this should probably still handle animations triggered\n             * by removed values?\n             */\n            if (shouldAnimateType && !isInherited) {\n                animations.push.apply(animations, __spreadArray([], __read(definitionList.map(function (animation) { return ({\n                    animation: animation,\n                    options: __assign({ type: type }, options),\n                }); }))));\n            }\n        };\n        /**\n         * Iterate through all animation types in reverse priority order. For each, we want to\n         * detect which values it's handling and whether or not they've changed (and therefore\n         * need to be animated). If any values have been removed, we want to detect those in\n         * lower priority props and flag for animation.\n         */\n        for (var i = 0; i < numAnimationTypes; i++) {\n            _loop_1(i);\n        }\n        allAnimatedKeys = __assign({}, encounteredKeys);\n        /**\n         * If there are some removed value that haven't been dealt with,\n         * we need to create a new animation that falls back either to the value\n         * defined in the style prop, or the last read value.\n         */\n        if (removedKeys.size) {\n            var fallbackAnimation_1 = {};\n            removedKeys.forEach(function (key) {\n                var fallbackTarget = visualElement.getBaseTarget(key);\n                if (fallbackTarget !== undefined) {\n                    fallbackAnimation_1[key] = fallbackTarget;\n                }\n            });\n            animations.push({ animation: fallbackAnimation_1 });\n        }\n        var shouldAnimate = Boolean(animations.length);\n        if (isInitialRender &&\n            props.initial === false &&\n            !visualElement.manuallyAnimateOnMount) {\n            shouldAnimate = false;\n        }\n        isInitialRender = false;\n        return shouldAnimate ? animate(animations) : Promise.resolve();\n    }\n    /**\n     * Change whether a certain animation type is active.\n     */\n    function setActive(type, isActive, options) {\n        var _a;\n        // If the active state hasn't changed, we can safely do nothing here\n        if (state[type].isActive === isActive)\n            return Promise.resolve();\n        // Propagate active change to children\n        (_a = visualElement.variantChildren) === null || _a === void 0 ? void 0 : _a.forEach(function (child) { var _a; return (_a = child.animationState) === null || _a === void 0 ? void 0 : _a.setActive(type, isActive); });\n        state[type].isActive = isActive;\n        return animateChanges(options, type);\n    }\n    return {\n        isAnimated: isAnimated,\n        animateChanges: animateChanges,\n        setActive: setActive,\n        setAnimateFunction: setAnimateFunction,\n        getState: function () { return state; },\n    };\n}\nfunction variantsHaveChanged(prev, next) {\n    if (typeof next === \"string\") {\n        return next !== prev;\n    }\n    else if (isVariantLabels(next)) {\n        return !shallowCompare(next, prev);\n    }\n    return false;\n}\nfunction createTypeState(isActive) {\n    if (isActive === void 0) { isActive = false; }\n    return {\n        isActive: isActive,\n        protectedKeys: {},\n        needsAnimating: {},\n        prevResolvedValues: {},\n    };\n}\nfunction createState() {\n    var _a;\n    return _a = {},\n        _a[AnimationType.Animate] = createTypeState(true),\n        _a[AnimationType.Hover] = createTypeState(),\n        _a[AnimationType.Tap] = createTypeState(),\n        _a[AnimationType.Drag] = createTypeState(),\n        _a[AnimationType.Focus] = createTypeState(),\n        _a[AnimationType.Exit] = createTypeState(),\n        _a;\n}\n\nexport { createAnimationState, variantPriorityOrder, variantsHaveChanged };\n","import { __read } from 'tslib';\nimport { useEffect, useContext } from 'react';\nimport { isAnimationControls } from '../../animation/utils/is-animation-controls.js';\nimport { usePresence } from '../../components/AnimatePresence/use-presence.js';\nimport { PresenceContext } from '../../context/PresenceContext.js';\nimport { createAnimationState } from '../../render/utils/animation-state.js';\nimport { AnimationType } from '../../render/utils/types.js';\nimport { makeRenderlessComponent } from '../utils/make-renderless-component.js';\n\nvar animations = {\n    animation: makeRenderlessComponent(function (_a) {\n        var visualElement = _a.visualElement, animate = _a.animate;\n        /**\n         * We dynamically generate the AnimationState manager as it contains a reference\n         * to the underlying animation library. We only want to load that if we load this,\n         * so people can optionally code split it out using the `m` component.\n         */\n        visualElement.animationState || (visualElement.animationState = createAnimationState(visualElement));\n        /**\n         * Subscribe any provided AnimationControls to the component's VisualElement\n         */\n        if (isAnimationControls(animate)) {\n            useEffect(function () { return animate.subscribe(visualElement); }, [animate]);\n        }\n    }),\n    exit: makeRenderlessComponent(function (props) {\n        var custom = props.custom, visualElement = props.visualElement;\n        var _a = __read(usePresence(), 2), isPresent = _a[0], onExitComplete = _a[1];\n        var presenceContext = useContext(PresenceContext);\n        useEffect(function () {\n            var _a, _b;\n            var animation = (_a = visualElement.animationState) === null || _a === void 0 ? void 0 : _a.setActive(AnimationType.Exit, !isPresent, { custom: (_b = presenceContext === null || presenceContext === void 0 ? void 0 : presenceContext.custom) !== null && _b !== void 0 ? _b : custom });\n            !isPresent && (animation === null || animation === void 0 ? void 0 : animation.then(onExitComplete));\n        }, [isPresent]);\n    }),\n};\n\nexport { animations };\n","import { useDrag } from '../../gestures/drag/use-drag.js';\nimport { usePanGesture } from '../../gestures/use-pan-gesture.js';\nimport { makeRenderlessComponent } from '../utils/make-renderless-component.js';\n\nvar drag = {\n    pan: makeRenderlessComponent(usePanGesture),\n    drag: makeRenderlessComponent(useDrag),\n};\n\nexport { drag };\n","import { useRef, useContext, useEffect } from 'react';\nimport { MotionConfigContext } from '../context/MotionConfigContext.js';\nimport { useUnmountEffect } from '../utils/use-unmount-effect.js';\nimport { usePointerEvent } from '../events/use-pointer-event.js';\nimport { PanSession } from './PanSession.js';\n\n/**\n *\n * @param handlers -\n * @param ref -\n *\n * @internalremarks\n * Currently this sets new pan gesture functions every render. The memo route has been explored\n * in the past but ultimately we're still creating new functions every render. An optimisation\n * to explore is creating the pan gestures and loading them into a `ref`.\n *\n * @internal\n */\nfunction usePanGesture(_a) {\n    var onPan = _a.onPan, onPanStart = _a.onPanStart, onPanEnd = _a.onPanEnd, onPanSessionStart = _a.onPanSessionStart, visualElement = _a.visualElement;\n    var hasPanEvents = onPan || onPanStart || onPanEnd || onPanSessionStart;\n    var panSession = useRef(null);\n    var transformPagePoint = useContext(MotionConfigContext).transformPagePoint;\n    var handlers = {\n        onSessionStart: onPanSessionStart,\n        onStart: onPanStart,\n        onMove: onPan,\n        onEnd: function (event, info) {\n            panSession.current = null;\n            onPanEnd && onPanEnd(event, info);\n        },\n    };\n    useEffect(function () {\n        if (panSession.current !== null) {\n            panSession.current.updateHandlers(handlers);\n        }\n    });\n    function onPointerDown(event) {\n        panSession.current = new PanSession(event, handlers, {\n            transformPagePoint: transformPagePoint,\n        });\n    }\n    usePointerEvent(visualElement, \"pointerdown\", hasPanEvents && onPointerDown);\n    useUnmountEffect(function () { return panSession.current && panSession.current.end(); });\n}\n\nexport { usePanGesture };\n","import { __assign } from 'tslib';\nimport { useContext, useEffect } from 'react';\nimport { MotionConfigContext } from '../../context/MotionConfigContext.js';\nimport { VisualElementDragControls } from './VisualElementDragControls.js';\nimport { useConstant } from '../../utils/use-constant.js';\n\n/**\n * A hook that allows an element to be dragged.\n *\n * @internal\n */\nfunction useDrag(props) {\n    var groupDragControls = props.dragControls, visualElement = props.visualElement;\n    var transformPagePoint = useContext(MotionConfigContext).transformPagePoint;\n    var dragControls = useConstant(function () {\n        return new VisualElementDragControls({\n            visualElement: visualElement,\n        });\n    });\n    dragControls.setProps(__assign(__assign({}, props), { transformPagePoint: transformPagePoint }));\n    // If we've been provided a DragControls for manual control over the drag gesture,\n    // subscribe this component to it on mount.\n    useEffect(function () { return groupDragControls && groupDragControls.subscribe(dragControls); }, [dragControls]);\n    // Mount the drag controls with the visualElement\n    useEffect(function () { return dragControls.mount(visualElement); }, []);\n}\n\nexport { useDrag };\n","import { __rest, __assign, __read } from 'tslib';\nimport { invariant } from 'hey-listen';\n\nfunction isCSSVariable(value) {\n    return typeof value === \"string\" && value.startsWith(\"var(--\");\n}\n/**\n * Parse Framer's special CSS variable format into a CSS token and a fallback.\n *\n * ```\n * `var(--foo, #fff)` => [`--foo`, '#fff']\n * ```\n *\n * @param current\n */\nvar cssVariableRegex = /var\\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\\)/;\nfunction parseCSSVariable(current) {\n    var match = cssVariableRegex.exec(current);\n    if (!match)\n        return [,];\n    var _a = __read(match, 3), token = _a[1], fallback = _a[2];\n    return [token, fallback];\n}\nvar maxDepth = 4;\nfunction getVariableValue(current, element, depth) {\n    if (depth === void 0) { depth = 1; }\n    invariant(depth <= maxDepth, \"Max CSS variable fallback depth detected in property \\\"\" + current + \"\\\". This may indicate a circular fallback dependency.\");\n    var _a = __read(parseCSSVariable(current), 2), token = _a[0], fallback = _a[1];\n    // No CSS variable detected\n    if (!token)\n        return;\n    // Attempt to read this CSS variable off the element\n    var resolved = window.getComputedStyle(element).getPropertyValue(token);\n    if (resolved) {\n        return resolved.trim();\n    }\n    else if (isCSSVariable(fallback)) {\n        // The fallback might itself be a CSS variable, in which case we attempt to resolve it too.\n        return getVariableValue(fallback, element, depth + 1);\n    }\n    else {\n        return fallback;\n    }\n}\n/**\n * Resolve CSS variables from\n *\n * @internal\n */\nfunction resolveCSSVariables(visualElement, _a, transitionEnd) {\n    var _b;\n    var target = __rest(_a, []);\n    var element = visualElement.getInstance();\n    if (!(element instanceof HTMLElement))\n        return { target: target, transitionEnd: transitionEnd };\n    // If `transitionEnd` isn't `undefined`, clone it. We could clone `target` and `transitionEnd`\n    // only if they change but I think this reads clearer and this isn't a performance-critical path.\n    if (transitionEnd) {\n        transitionEnd = __assign({}, transitionEnd);\n    }\n    // Go through existing `MotionValue`s and ensure any existing CSS variables are resolved\n    visualElement.forEachValue(function (value) {\n        var current = value.get();\n        if (!isCSSVariable(current))\n            return;\n        var resolved = getVariableValue(current, element);\n        if (resolved)\n            value.set(resolved);\n    });\n    // Cycle through every target property and resolve CSS variables. Currently\n    // we only read single-var properties like `var(--foo)`, not `calc(var(--foo) + 20px)`\n    for (var key in target) {\n        var current = target[key];\n        if (!isCSSVariable(current))\n            continue;\n        var resolved = getVariableValue(current, element);\n        if (!resolved)\n            continue;\n        // Clone target if it hasn't already been\n        target[key] = resolved;\n        // If the user hasn't already set this key on `transitionEnd`, set it to the unresolved\n        // CSS variable. This will ensure that after the animation the component will reflect\n        // changes in the value of the CSS variable.\n        if (transitionEnd)\n            (_b = transitionEnd[key]) !== null && _b !== void 0 ? _b : (transitionEnd[key] = current);\n    }\n    return { target: target, transitionEnd: transitionEnd };\n}\n\nexport { cssVariableRegex, parseCSSVariable, resolveCSSVariables };\n","import { __assign } from 'tslib';\nimport { complex, px } from 'style-value-types';\nimport { mix } from 'popmotion';\nimport { cssVariableRegex } from '../utils/css-variables-conversion.js';\n\nfunction pixelsToPercent(pixels, axis) {\n    return (pixels / (axis.max - axis.min)) * 100;\n}\n/**\n * We always correct borderRadius as a percentage rather than pixels to reduce paints.\n * For example, if you are projecting a box that is 100px wide with a 10px borderRadius\n * into a box that is 200px wide with a 20px borderRadius, that is actually a 10%\n * borderRadius in both states. If we animate between the two in pixels that will trigger\n * a paint each time. If we animate between the two in percentage we'll avoid a paint.\n */\nfunction correctBorderRadius(latest, _layoutState, _a) {\n    var target = _a.target;\n    /**\n     * If latest is a string, if it's a percentage we can return immediately as it's\n     * going to be stretched appropriately. Otherwise, if it's a pixel, convert it to a number.\n     */\n    if (typeof latest === \"string\") {\n        if (px.test(latest)) {\n            latest = parseFloat(latest);\n        }\n        else {\n            return latest;\n        }\n    }\n    /**\n     * If latest is a number, it's a pixel value. We use the current viewportBox to calculate that\n     * pixel value as a percentage of each axis\n     */\n    var x = pixelsToPercent(latest, target.x);\n    var y = pixelsToPercent(latest, target.y);\n    return x + \"% \" + y + \"%\";\n}\nvar varToken = \"_$css\";\nfunction correctBoxShadow(latest, _a) {\n    var delta = _a.delta, treeScale = _a.treeScale;\n    var original = latest;\n    /**\n     * We need to first strip and store CSS variables from the string.\n     */\n    var containsCSSVariables = latest.includes(\"var(\");\n    var cssVariables = [];\n    if (containsCSSVariables) {\n        latest = latest.replace(cssVariableRegex, function (match) {\n            cssVariables.push(match);\n            return varToken;\n        });\n    }\n    var shadow = complex.parse(latest);\n    // TODO: Doesn't support multiple shadows\n    if (shadow.length > 5)\n        return original;\n    var template = complex.createTransformer(latest);\n    var offset = typeof shadow[0] !== \"number\" ? 1 : 0;\n    // Calculate the overall context scale\n    var xScale = delta.x.scale * treeScale.x;\n    var yScale = delta.y.scale * treeScale.y;\n    shadow[0 + offset] /= xScale;\n    shadow[1 + offset] /= yScale;\n    /**\n     * Ideally we'd correct x and y scales individually, but because blur and\n     * spread apply to both we have to take a scale average and apply that instead.\n     * We could potentially improve the outcome of this by incorporating the ratio between\n     * the two scales.\n     */\n    var averageScale = mix(xScale, yScale, 0.5);\n    // Blur\n    if (typeof shadow[2 + offset] === \"number\")\n        shadow[2 + offset] /= averageScale;\n    // Spread\n    if (typeof shadow[3 + offset] === \"number\")\n        shadow[3 + offset] /= averageScale;\n    var output = template(shadow);\n    if (containsCSSVariables) {\n        var i_1 = 0;\n        output = output.replace(varToken, function () {\n            var cssVariable = cssVariables[i_1];\n            i_1++;\n            return cssVariable;\n        });\n    }\n    return output;\n}\nvar borderCorrectionDefinition = {\n    process: correctBorderRadius,\n};\nvar defaultScaleCorrectors = {\n    borderRadius: __assign(__assign({}, borderCorrectionDefinition), { applyTo: [\n            \"borderTopLeftRadius\",\n            \"borderTopRightRadius\",\n            \"borderBottomLeftRadius\",\n            \"borderBottomRightRadius\",\n        ] }),\n    borderTopLeftRadius: borderCorrectionDefinition,\n    borderTopRightRadius: borderCorrectionDefinition,\n    borderBottomLeftRadius: borderCorrectionDefinition,\n    borderBottomRightRadius: borderCorrectionDefinition,\n    boxShadow: {\n        process: correctBoxShadow,\n    },\n};\n\nexport { correctBorderRadius, correctBoxShadow, defaultScaleCorrectors, pixelsToPercent };\n","import { __extends, __rest, __assign, __read } from 'tslib';\nimport * as React from 'react';\nimport { eachAxis } from '../../../utils/each-axis.js';\nimport { startAnimation, getValueTransition } from '../../../animation/utils/transitions.js';\nimport { checkIfParentHasChanged, calcRelativeOffset, tweenAxis } from './utils.js';\nimport { VisibilityAction } from '../../../components/AnimateSharedLayout/types.js';\nimport { usePresence } from '../../../components/AnimatePresence/use-presence.js';\nimport { axisBox } from '../../../utils/geometry/index.js';\nimport { addScaleCorrection } from '../../../render/dom/projection/scale-correction.js';\nimport { defaultScaleCorrectors } from '../../../render/dom/projection/default-scale-correctors.js';\n\nvar progressTarget = 1000;\nvar Animate = /** @class */ (function (_super) {\n    __extends(Animate, _super);\n    function Animate() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /**\n         * A mutable object that tracks the target viewport box\n         * for the current animation frame.\n         */\n        _this.frameTarget = axisBox();\n        /**\n         * The current animation target, we use this to check whether to start\n         * a new animation or continue the existing one.\n         */\n        _this.currentAnimationTarget = axisBox();\n        /**\n         * Track whether we're animating this axis.\n         */\n        _this.isAnimating = {\n            x: false,\n            y: false,\n        };\n        _this.stopAxisAnimation = {\n            x: undefined,\n            y: undefined,\n        };\n        _this.isAnimatingTree = false;\n        _this.animate = function (target, origin, _a) {\n            if (_a === void 0) { _a = {}; }\n            var originBox = _a.originBox, targetBox = _a.targetBox, visibilityAction = _a.visibilityAction, shouldStackAnimate = _a.shouldStackAnimate, onComplete = _a.onComplete, prevParent = _a.prevParent, config = __rest(_a, [\"originBox\", \"targetBox\", \"visibilityAction\", \"shouldStackAnimate\", \"onComplete\", \"prevParent\"]);\n            var _b = _this.props, visualElement = _b.visualElement, layout = _b.layout;\n            /**\n             * Early return if we've been instructed not to animate this render.\n             */\n            if (shouldStackAnimate === false) {\n                _this.isAnimatingTree = false;\n                return _this.safeToRemove();\n            }\n            /**\n             * Prioritise tree animations\n             */\n            if (_this.isAnimatingTree && shouldStackAnimate !== true) {\n                return;\n            }\n            else if (shouldStackAnimate) {\n                _this.isAnimatingTree = true;\n            }\n            /**\n             * Allow the measured origin (prev bounding box) and target (actual layout) to be\n             * overridden by the provided config.\n             */\n            origin = originBox || origin;\n            target = targetBox || target;\n            /**\n             * If this element has a projecting parent, there's an opportunity to animate\n             * it relatively to that parent rather than relatively to the viewport. This\n             * allows us to add orchestrated animations.\n             */\n            var isRelative = false;\n            var projectionParent = visualElement.getProjectionParent();\n            if (projectionParent) {\n                var prevParentViewportBox = projectionParent.prevViewportBox;\n                var parentLayout = projectionParent.getLayoutState().layout;\n                /**\n                 * If we're being provided a previous parent VisualElement by AnimateSharedLayout\n                 */\n                if (prevParent) {\n                    /**\n                     * If we've been provided an explicit target box it means we're animating back\n                     * to this previous parent. So we can make a relative box by comparing to the previous\n                     * parent's layout\n                     */\n                    if (targetBox) {\n                        parentLayout = prevParent.getLayoutState().layout;\n                    }\n                    /**\n                     * Likewise if we've been provided an explicit origin box it means we're\n                     * animating out from a different element. So we should figure out where that was\n                     * on screen relative to the new parent element.\n                     */\n                    if (originBox &&\n                        !checkIfParentHasChanged(prevParent, projectionParent) &&\n                        prevParent.prevViewportBox) {\n                        prevParentViewportBox = prevParent.prevViewportBox;\n                    }\n                }\n                if (prevParentViewportBox &&\n                    isProvidedCorrectDataForRelativeSharedLayout(prevParent, originBox, targetBox)) {\n                    isRelative = true;\n                    origin = calcRelativeOffset(prevParentViewportBox, origin);\n                    target = calcRelativeOffset(parentLayout, target);\n                }\n            }\n            var boxHasMoved = hasMoved(origin, target);\n            var animations = eachAxis(function (axis) {\n                var _a, _b;\n                /**\n                 * If layout is set to \"position\", we can resize the origin box based on the target\n                 * box and only animate its position.\n                 */\n                if (layout === \"position\") {\n                    var targetLength = target[axis].max - target[axis].min;\n                    origin[axis].max = origin[axis].min + targetLength;\n                }\n                if (visualElement.projection.isTargetLocked) {\n                    return;\n                }\n                else if (visibilityAction !== undefined) {\n                    visualElement.setVisibility(visibilityAction === VisibilityAction.Show);\n                }\n                else if (boxHasMoved) {\n                    // If the box has moved, animate between it's current visual state and its\n                    // final state\n                    return _this.animateAxis(axis, target[axis], origin[axis], __assign(__assign({}, config), { isRelative: isRelative }));\n                }\n                else {\n                    (_b = (_a = _this.stopAxisAnimation)[axis]) === null || _b === void 0 ? void 0 : _b.call(_a);\n                    // If the box has remained in the same place, immediately set the axis target\n                    // to the final desired state\n                    return visualElement.setProjectionTargetAxis(axis, target[axis].min, target[axis].max, isRelative);\n                }\n            });\n            // Force a render to ensure there's no flash of uncorrected bounding box.\n            visualElement.syncRender();\n            /**\n             * If this visualElement isn't present (ie it's been removed from the tree by the user but\n             * kept in by the tree by AnimatePresence) then call safeToRemove when all axis animations\n             * have successfully finished.\n             */\n            return Promise.all(animations).then(function () {\n                _this.isAnimatingTree = false;\n                onComplete && onComplete();\n                visualElement.notifyLayoutAnimationComplete();\n            });\n        };\n        return _this;\n    }\n    Animate.prototype.componentDidMount = function () {\n        var _this = this;\n        var visualElement = this.props.visualElement;\n        visualElement.animateMotionValue = startAnimation;\n        visualElement.enableLayoutProjection();\n        this.unsubLayoutReady = visualElement.onLayoutUpdate(this.animate);\n        visualElement.layoutSafeToRemove = function () { return _this.safeToRemove(); };\n        addScaleCorrection(defaultScaleCorrectors);\n    };\n    Animate.prototype.componentWillUnmount = function () {\n        var _this = this;\n        this.unsubLayoutReady();\n        eachAxis(function (axis) { var _a, _b; return (_b = (_a = _this.stopAxisAnimation)[axis]) === null || _b === void 0 ? void 0 : _b.call(_a); });\n    };\n    /**\n     * TODO: This manually performs animations on the visualElement's layout progress\n     * values. It'd be preferable to amend the startLayoutAxisAnimation\n     * API to accept more custom animations like this.\n     */\n    Animate.prototype.animateAxis = function (axis, target, origin, _a) {\n        var _this = this;\n        var _b, _c;\n        var _d = _a === void 0 ? {} : _a, transition = _d.transition, isRelative = _d.isRelative;\n        /**\n         * If we're not animating to a new target, don't run this animation\n         */\n        if (this.isAnimating[axis] &&\n            axisIsEqual(target, this.currentAnimationTarget[axis])) {\n            return;\n        }\n        (_c = (_b = this.stopAxisAnimation)[axis]) === null || _c === void 0 ? void 0 : _c.call(_b);\n        this.isAnimating[axis] = true;\n        var visualElement = this.props.visualElement;\n        var frameTarget = this.frameTarget[axis];\n        var layoutProgress = visualElement.getProjectionAnimationProgress()[axis];\n        /**\n         * Set layout progress back to 0. We set it twice to hard-reset any velocity that might\n         * be re-incoporated into a subsequent spring animation.\n         */\n        layoutProgress.clearListeners();\n        layoutProgress.set(0);\n        layoutProgress.set(0);\n        /**\n         * Create an animation function to run once per frame. This will tween the visual bounding box from\n         * origin to target using the latest progress value.\n         */\n        var frame = function () {\n            // Convert the latest layoutProgress, which is a value from 0-1000, into a 0-1 progress\n            var p = layoutProgress.get() / progressTarget;\n            // Tween the axis and update the visualElement with the latest values\n            tweenAxis(frameTarget, origin, target, p);\n            visualElement.setProjectionTargetAxis(axis, frameTarget.min, frameTarget.max, isRelative);\n        };\n        // Synchronously run a frame to ensure there's no flash of the uncorrected bounding box.\n        frame();\n        // Create a function to stop animation on this specific axis\n        var unsubscribeProgress = layoutProgress.onChange(frame);\n        this.stopAxisAnimation[axis] = function () {\n            _this.isAnimating[axis] = false;\n            layoutProgress.stop();\n            unsubscribeProgress();\n        };\n        this.currentAnimationTarget[axis] = target;\n        var layoutTransition = transition ||\n            visualElement.getDefaultTransition() ||\n            defaultLayoutTransition;\n        // Start the animation on this axis\n        var animation = startAnimation(axis === \"x\" ? \"layoutX\" : \"layoutY\", layoutProgress, progressTarget, layoutTransition && getValueTransition(layoutTransition, \"layout\")).then(this.stopAxisAnimation[axis]);\n        return animation;\n    };\n    Animate.prototype.safeToRemove = function () {\n        var _a, _b;\n        (_b = (_a = this.props).safeToRemove) === null || _b === void 0 ? void 0 : _b.call(_a);\n    };\n    Animate.prototype.render = function () {\n        return null;\n    };\n    return Animate;\n}(React.Component));\nfunction AnimateLayoutContextProvider(props) {\n    var _a = __read(usePresence(), 2), safeToRemove = _a[1];\n    return React.createElement(Animate, __assign({}, props, { safeToRemove: safeToRemove }));\n}\nfunction hasMoved(a, b) {\n    return (!isZeroBox(a) &&\n        !isZeroBox(b) &&\n        (!axisIsEqual(a.x, b.x) || !axisIsEqual(a.y, b.y)));\n}\nvar zeroAxis = { min: 0, max: 0 };\nfunction isZeroBox(a) {\n    return axisIsEqual(a.x, zeroAxis) && axisIsEqual(a.y, zeroAxis);\n}\nfunction axisIsEqual(a, b) {\n    return a.min === b.min && a.max === b.max;\n}\nvar defaultLayoutTransition = {\n    duration: 0.45,\n    ease: [0.4, 0, 0.1, 1],\n};\nfunction isProvidedCorrectDataForRelativeSharedLayout(prevParent, originBox, targetBox) {\n    return prevParent || (!prevParent && !(originBox || targetBox));\n}\n\nexport { AnimateLayoutContextProvider };\n","import { __extends, __assign } from 'tslib';\nimport React__default, { useContext } from 'react';\nimport { isSharedLayout, SharedLayoutContext, FramerTreeLayoutContext } from '../../../context/SharedLayoutContext.js';\nimport { snapshotViewportBox } from '../../../render/dom/projection/utils.js';\n\n/**\n * This component is responsible for scheduling the measuring of the motion component\n */\nvar Measure = /** @class */ (function (_super) {\n    __extends(Measure, _super);\n    function Measure() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * If this is a child of a SyncContext, register the VisualElement with it on mount.\n     */\n    Measure.prototype.componentDidMount = function () {\n        var _a = this.props, syncLayout = _a.syncLayout, framerSyncLayout = _a.framerSyncLayout, visualElement = _a.visualElement;\n        isSharedLayout(syncLayout) && syncLayout.register(visualElement);\n        isSharedLayout(framerSyncLayout) &&\n            framerSyncLayout.register(visualElement);\n        visualElement.onUnmount(function () {\n            if (isSharedLayout(syncLayout)) {\n                syncLayout.remove(visualElement);\n            }\n            if (isSharedLayout(framerSyncLayout)) {\n                framerSyncLayout.remove(visualElement);\n            }\n        });\n    };\n    /**\n     * If this is a child of a SyncContext, notify it that it needs to re-render. It will then\n     * handle the snapshotting.\n     *\n     * If it is stand-alone component, add it to the batcher.\n     */\n    Measure.prototype.getSnapshotBeforeUpdate = function () {\n        var _a = this.props, syncLayout = _a.syncLayout, visualElement = _a.visualElement;\n        if (isSharedLayout(syncLayout)) {\n            syncLayout.syncUpdate();\n        }\n        else {\n            snapshotViewportBox(visualElement);\n            syncLayout.add(visualElement);\n        }\n        return null;\n    };\n    Measure.prototype.componentDidUpdate = function () {\n        var syncLayout = this.props.syncLayout;\n        if (!isSharedLayout(syncLayout))\n            syncLayout.flush();\n    };\n    Measure.prototype.render = function () {\n        return null;\n    };\n    return Measure;\n}(React__default.Component));\nfunction MeasureContextProvider(props) {\n    var syncLayout = useContext(SharedLayoutContext);\n    var framerSyncLayout = useContext(FramerTreeLayoutContext);\n    return (React__default.createElement(Measure, __assign({}, props, { syncLayout: syncLayout, framerSyncLayout: framerSyncLayout })));\n}\n\nexport { MeasureContextProvider };\n","import { AnimateLayoutContextProvider } from './Animate.js';\nimport { MeasureContextProvider } from './Measure.js';\n\nvar layoutAnimations = {\n    measureLayout: MeasureContextProvider,\n    layoutAnimation: AnimateLayoutContextProvider,\n};\n\nexport { layoutAnimations };\n","import { axisBox, delta } from '../../utils/geometry/index.js';\n\nvar createProjectionState = function () { return ({\n    isEnabled: false,\n    isHydrated: false,\n    isTargetLocked: false,\n    target: axisBox(),\n    targetFinal: axisBox(),\n}); };\nfunction createLayoutState() {\n    return {\n        isHydrated: false,\n        layout: axisBox(),\n        layoutCorrected: axisBox(),\n        treeScale: { x: 1, y: 1 },\n        delta: delta(),\n        deltaFinal: delta(),\n        deltaTransform: \"\",\n    };\n}\nvar zeroLayout = createLayoutState();\n\nexport { createLayoutState, createProjectionState, zeroLayout };\n","import { zeroLayout } from '../../utils/state.js';\n\n/**\n * Build a transform style that takes a calculated delta between the element's current\n * space on screen and projects it into the desired space.\n */\nfunction buildLayoutProjectionTransform(_a, treeScale, latestTransform) {\n    var x = _a.x, y = _a.y;\n    /**\n     * The translations we use to calculate are always relative to the viewport coordinate space.\n     * But when we apply scales, we also scale the coordinate space of an element and its children.\n     * For instance if we have a treeScale (the culmination of all parent scales) of 0.5 and we need\n     * to move an element 100 pixels, we actually need to move it 200 in within that scaled space.\n     */\n    var xTranslate = x.translate / treeScale.x;\n    var yTranslate = y.translate / treeScale.y;\n    var transform = \"translate3d(\" + xTranslate + \"px, \" + yTranslate + \"px, 0) \";\n    if (latestTransform) {\n        var rotate = latestTransform.rotate, rotateX = latestTransform.rotateX, rotateY = latestTransform.rotateY;\n        if (rotate)\n            transform += \"rotate(\" + rotate + \") \";\n        if (rotateX)\n            transform += \"rotateX(\" + rotateX + \") \";\n        if (rotateY)\n            transform += \"rotateY(\" + rotateY + \") \";\n    }\n    transform += \"scale(\" + x.scale + \", \" + y.scale + \")\";\n    return !latestTransform && transform === identityProjection ? \"\" : transform;\n}\n/**\n * Take the calculated delta origin and apply it as a transform string.\n */\nfunction buildLayoutProjectionTransformOrigin(_a) {\n    var deltaFinal = _a.deltaFinal;\n    return deltaFinal.x.origin * 100 + \"% \" + deltaFinal.y.origin * 100 + \"% 0\";\n}\nvar identityProjection = buildLayoutProjectionTransform(zeroLayout.delta, zeroLayout.treeScale, { x: 1, y: 1 });\n\nexport { buildLayoutProjectionTransform, buildLayoutProjectionTransformOrigin, identityProjection };\n","import { __spreadArray, __read } from 'tslib';\nimport { SubscriptionManager } from '../../utils/subscription-manager.js';\n\nvar names = [\n    \"LayoutMeasure\",\n    \"BeforeLayoutMeasure\",\n    \"LayoutUpdate\",\n    \"ViewportBoxUpdate\",\n    \"Update\",\n    \"Render\",\n    \"AnimationComplete\",\n    \"LayoutAnimationComplete\",\n    \"AnimationStart\",\n    \"SetAxisTarget\",\n    \"Unmount\",\n];\nfunction createLifecycles() {\n    var managers = names.map(function () { return new SubscriptionManager(); });\n    var propSubscriptions = {};\n    var lifecycles = {\n        clearAllListeners: function () { return managers.forEach(function (manager) { return manager.clear(); }); },\n        updatePropListeners: function (props) {\n            return names.forEach(function (name) {\n                var _a;\n                (_a = propSubscriptions[name]) === null || _a === void 0 ? void 0 : _a.call(propSubscriptions);\n                var on = \"on\" + name;\n                var propListener = props[on];\n                if (propListener) {\n                    propSubscriptions[name] = lifecycles[on](propListener);\n                }\n            });\n        },\n    };\n    managers.forEach(function (manager, i) {\n        lifecycles[\"on\" + names[i]] = function (handler) { return manager.add(handler); };\n        lifecycles[\"notify\" + names[i]] = function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            return manager.notify.apply(manager, __spreadArray([], __read(args)));\n        };\n    });\n    return lifecycles;\n}\n\nexport { createLifecycles };\n","import { addUniqueItem, removeItem } from '../../utils/array.js';\nimport { compareByDepth } from './compare-by-depth.js';\n\nvar FlatTree = /** @class */ (function () {\n    function FlatTree() {\n        this.children = [];\n        this.isDirty = false;\n    }\n    FlatTree.prototype.add = function (child) {\n        addUniqueItem(this.children, child);\n        this.isDirty = true;\n    };\n    FlatTree.prototype.remove = function (child) {\n        removeItem(this.children, child);\n        this.isDirty = true;\n    };\n    FlatTree.prototype.forEach = function (callback) {\n        this.isDirty && this.children.sort(compareByDepth);\n        this.isDirty = false;\n        this.children.forEach(callback);\n    };\n    return FlatTree;\n}());\n\nexport { FlatTree };\n","import { __assign, __spreadArray, __read } from 'tslib';\nimport sync, { cancelSync } from 'framesync';\nimport { pipe } from 'popmotion';\nimport { Presence } from '../components/AnimateSharedLayout/types.js';\nimport { eachAxis } from '../utils/each-axis.js';\nimport { axisBox } from '../utils/geometry/index.js';\nimport { removeBoxTransforms, applyBoxTransforms } from '../utils/geometry/delta-apply.js';\nimport { calcRelativeBox, updateBoxDelta } from '../utils/geometry/delta-calc.js';\nimport { motionValue } from '../value/index.js';\nimport { isMotionValue } from '../value/utils/is-motion-value.js';\nimport { buildLayoutProjectionTransform } from './html/utils/build-projection-transform.js';\nimport { variantPriorityOrder } from './utils/animation-state.js';\nimport { createLifecycles } from './utils/lifecycles.js';\nimport { updateMotionValuesFromProps } from './utils/motion-values.js';\nimport { updateLayoutDeltas } from './utils/projection.js';\nimport { createLayoutState, createProjectionState } from './utils/state.js';\nimport { FlatTree } from './utils/flat-tree.js';\nimport { checkIfControllingVariants, checkIfVariantNode, isVariantLabel } from './utils/variants.js';\nimport { setCurrentViewportBox } from './dom/projection/relative-set.js';\nimport { isDraggable } from './utils/is-draggable.js';\n\nvar visualElement = function (_a) {\n    var _b = _a.treeType, treeType = _b === void 0 ? \"\" : _b, build = _a.build, getBaseTarget = _a.getBaseTarget, makeTargetAnimatable = _a.makeTargetAnimatable, measureViewportBox = _a.measureViewportBox, renderInstance = _a.render, readValueFromInstance = _a.readValueFromInstance, resetTransform = _a.resetTransform, restoreTransform = _a.restoreTransform, removeValueFromRenderState = _a.removeValueFromRenderState, sortNodePosition = _a.sortNodePosition, scrapeMotionValuesFromProps = _a.scrapeMotionValuesFromProps;\n    return function (_a, options) {\n        var parent = _a.parent, props = _a.props, presenceId = _a.presenceId, blockInitialAnimation = _a.blockInitialAnimation, visualState = _a.visualState;\n        if (options === void 0) { options = {}; }\n        var latestValues = visualState.latestValues, renderState = visualState.renderState;\n        /**\n         * The instance of the render-specific node that will be hydrated by the\n         * exposed React ref. So for example, this visual element can host a\n         * HTMLElement, plain object, or Three.js object. The functions provided\n         * in VisualElementConfig allow us to interface with this instance.\n         */\n        var instance;\n        /**\n         * Manages the subscriptions for a visual element's lifecycle, for instance\n         * onRender and onViewportBoxUpdate.\n         */\n        var lifecycles = createLifecycles();\n        /**\n         *\n         */\n        var projection = createProjectionState();\n        /**\n         * A reference to the nearest projecting parent. This is either\n         * undefined if we haven't looked for the nearest projecting parent,\n         * false if there is no parent performing layout projection, or a reference\n         * to the projecting parent.\n         */\n        var projectionParent;\n        /**\n         * This is a reference to the visual state of the \"lead\" visual element.\n         * Usually, this will be this visual element. But if it shares a layoutId\n         * with other visual elements, only one of them will be designated lead by\n         * AnimateSharedLayout. All the other visual elements will take on the visual\n         * appearance of the lead while they crossfade to it.\n         */\n        var leadProjection = projection;\n        var leadLatestValues = latestValues;\n        var unsubscribeFromLeadVisualElement;\n        /**\n         * The latest layout measurements and calculated projections. This\n         * is seperate from the target projection data in visualState as\n         * many visual elements might point to the same piece of visualState as\n         * a target, whereas they might each have different layouts and thus\n         * projection calculations needed to project into the same viewport box.\n         */\n        var layoutState = createLayoutState();\n        /**\n         *\n         */\n        var crossfader;\n        /**\n         * Keep track of whether the viewport box has been updated since the\n         * last time the layout projection was re-calculated.\n         */\n        var hasViewportBoxUpdated = false;\n        /**\n         * A map of all motion values attached to this visual element. Motion\n         * values are source of truth for any given animated value. A motion\n         * value might be provided externally by the component via props.\n         */\n        var values = new Map();\n        /**\n         * A map of every subscription that binds the provided or generated\n         * motion values onChange listeners to this visual element.\n         */\n        var valueSubscriptions = new Map();\n        /**\n         * A reference to the previously-provided motion values as returned\n         * from scrapeMotionValuesFromProps. We use the keys in here to determine\n         * if any motion values need to be removed after props are updated.\n         */\n        var prevMotionValues = {};\n        /**\n         * x/y motion values that track the progress of initiated layout\n         * animations.\n         *\n         * TODO: Target for removal\n         */\n        var projectionTargetProgress;\n        /**\n         * When values are removed from all animation props we need to search\n         * for a fallback value to animate to. These values are tracked in baseTarget.\n         */\n        var baseTarget = __assign({}, latestValues);\n        // Internal methods ========================\n        /**\n         * On mount, this will be hydrated with a callback to disconnect\n         * this visual element from its parent on unmount.\n         */\n        var removeFromVariantTree;\n        /**\n         *\n         */\n        function render() {\n            if (!instance)\n                return;\n            if (element.isProjectionReady()) {\n                /**\n                 * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n                 * This is the final box that we will then project into by calculating a transform delta and\n                 * applying it to the corrected box.\n                 */\n                applyBoxTransforms(leadProjection.targetFinal, leadProjection.target, leadLatestValues);\n                /**\n                 * Update the delta between the corrected box and the final target box, after\n                 * user-set transforms are applied to it. This will be used by the renderer to\n                 * create a transform style that will reproject the element from its actual layout\n                 * into the desired bounding box.\n                 */\n                updateBoxDelta(layoutState.deltaFinal, layoutState.layoutCorrected, leadProjection.targetFinal, latestValues);\n            }\n            triggerBuild();\n            renderInstance(instance, renderState);\n        }\n        function triggerBuild() {\n            var valuesToRender = latestValues;\n            if (crossfader && crossfader.isActive()) {\n                var crossfadedValues = crossfader.getCrossfadeState(element);\n                if (crossfadedValues)\n                    valuesToRender = crossfadedValues;\n            }\n            build(element, renderState, valuesToRender, leadProjection, layoutState, options, props);\n        }\n        function update() {\n            lifecycles.notifyUpdate(latestValues);\n        }\n        function updateLayoutProjection() {\n            if (!element.isProjectionReady())\n                return;\n            var delta = layoutState.delta, treeScale = layoutState.treeScale;\n            var prevTreeScaleX = treeScale.x;\n            var prevTreeScaleY = treeScale.y;\n            var prevDeltaTransform = layoutState.deltaTransform;\n            updateLayoutDeltas(layoutState, leadProjection, element.path, latestValues);\n            hasViewportBoxUpdated &&\n                element.notifyViewportBoxUpdate(leadProjection.target, delta);\n            hasViewportBoxUpdated = false;\n            var deltaTransform = buildLayoutProjectionTransform(delta, treeScale);\n            if (deltaTransform !== prevDeltaTransform ||\n                // Also compare calculated treeScale, for values that rely on this only for scale correction\n                prevTreeScaleX !== treeScale.x ||\n                prevTreeScaleY !== treeScale.y) {\n                element.scheduleRender();\n            }\n            layoutState.deltaTransform = deltaTransform;\n        }\n        function updateTreeLayoutProjection() {\n            element.layoutTree.forEach(fireUpdateLayoutProjection);\n        }\n        /**\n         *\n         */\n        function bindToMotionValue(key, value) {\n            var removeOnChange = value.onChange(function (latestValue) {\n                latestValues[key] = latestValue;\n                props.onUpdate && sync.update(update, false, true);\n            });\n            var removeOnRenderRequest = value.onRenderRequest(element.scheduleRender);\n            valueSubscriptions.set(key, function () {\n                removeOnChange();\n                removeOnRenderRequest();\n            });\n        }\n        /**\n         * Any motion values that are provided to the element when created\n         * aren't yet bound to the element, as this would technically be impure.\n         * However, we iterate through the motion values and set them to the\n         * initial values for this component.\n         *\n         * TODO: This is impure and we should look at changing this to run on mount.\n         * Doing so will break some tests but this isn't neccessarily a breaking change,\n         * more a reflection of the test.\n         */\n        var initialMotionValues = scrapeMotionValuesFromProps(props);\n        for (var key in initialMotionValues) {\n            var value = initialMotionValues[key];\n            if (latestValues[key] !== undefined && isMotionValue(value)) {\n                value.set(latestValues[key], false);\n            }\n        }\n        /**\n         * Determine what role this visual element should take in the variant tree.\n         */\n        var isControllingVariants = checkIfControllingVariants(props);\n        var isVariantNode = checkIfVariantNode(props);\n        var element = __assign(__assign({ treeType: treeType, \n            /**\n             * This is a mirror of the internal instance prop, which keeps\n             * VisualElement type-compatible with React's RefObject.\n             */\n            current: null, \n            /**\n             * The depth of this visual element within the visual element tree.\n             */\n            depth: parent ? parent.depth + 1 : 0, parent: parent, children: new Set(), \n            /**\n             * An ancestor path back to the root visual element. This is used\n             * by layout projection to quickly recurse back up the tree.\n             */\n            path: parent ? __spreadArray(__spreadArray([], __read(parent.path)), [parent]) : [], layoutTree: parent ? parent.layoutTree : new FlatTree(), \n            /**\n             *\n             */\n            presenceId: presenceId,\n            projection: projection, \n            /**\n             * If this component is part of the variant tree, it should track\n             * any children that are also part of the tree. This is essentially\n             * a shadow tree to simplify logic around how to stagger over children.\n             */\n            variantChildren: isVariantNode ? new Set() : undefined, \n            /**\n             * Whether this instance is visible. This can be changed imperatively\n             * by AnimateSharedLayout, is analogous to CSS's visibility in that\n             * hidden elements should take up layout, and needs enacting by the configured\n             * render function.\n             */\n            isVisible: undefined, \n            /**\n             * Normally, if a component is controlled by a parent's variants, it can\n             * rely on that ancestor to trigger animations further down the tree.\n             * However, if a component is created after its parent is mounted, the parent\n             * won't trigger that mount animation so the child needs to.\n             *\n             * TODO: This might be better replaced with a method isParentMounted\n             */\n            manuallyAnimateOnMount: Boolean(parent === null || parent === void 0 ? void 0 : parent.isMounted()), \n            /**\n             * This can be set by AnimatePresence to force components that mount\n             * at the same time as it to mount as if they have initial={false} set.\n             */\n            blockInitialAnimation: blockInitialAnimation, \n            /**\n             * Determine whether this component has mounted yet. This is mostly used\n             * by variant children to determine whether they need to trigger their\n             * own animations on mount.\n             */\n            isMounted: function () { return Boolean(instance); }, mount: function (newInstance) {\n                instance = element.current = newInstance;\n                element.pointTo(element);\n                if (isVariantNode && parent && !isControllingVariants) {\n                    removeFromVariantTree = parent === null || parent === void 0 ? void 0 : parent.addVariantChild(element);\n                }\n                parent === null || parent === void 0 ? void 0 : parent.children.add(element);\n            },\n            /**\n             *\n             */\n            unmount: function () {\n                cancelSync.update(update);\n                cancelSync.render(render);\n                cancelSync.preRender(element.updateLayoutProjection);\n                valueSubscriptions.forEach(function (remove) { return remove(); });\n                element.stopLayoutAnimation();\n                element.layoutTree.remove(element);\n                removeFromVariantTree === null || removeFromVariantTree === void 0 ? void 0 : removeFromVariantTree();\n                parent === null || parent === void 0 ? void 0 : parent.children.delete(element);\n                unsubscribeFromLeadVisualElement === null || unsubscribeFromLeadVisualElement === void 0 ? void 0 : unsubscribeFromLeadVisualElement();\n                lifecycles.clearAllListeners();\n            },\n            /**\n             * Add a child visual element to our set of children.\n             */\n            addVariantChild: function (child) {\n                var _a;\n                var closestVariantNode = element.getClosestVariantNode();\n                if (closestVariantNode) {\n                    (_a = closestVariantNode.variantChildren) === null || _a === void 0 ? void 0 : _a.add(child);\n                    return function () { return closestVariantNode.variantChildren.delete(child); };\n                }\n            },\n            sortNodePosition: function (other) {\n                /**\n                 * If these nodes aren't even of the same type we can't compare their depth.\n                 */\n                if (!sortNodePosition || treeType !== other.treeType)\n                    return 0;\n                return sortNodePosition(element.getInstance(), other.getInstance());\n            }, \n            /**\n             * Returns the closest variant node in the tree starting from\n             * this visual element.\n             */\n            getClosestVariantNode: function () {\n                return isVariantNode ? element : parent === null || parent === void 0 ? void 0 : parent.getClosestVariantNode();\n            }, \n            /**\n             * A method that schedules an update to layout projections throughout\n             * the tree. We inherit from the parent so there's only ever one\n             * job scheduled on the next frame - that of the root visual element.\n             */\n            scheduleUpdateLayoutProjection: parent\n                ? parent.scheduleUpdateLayoutProjection\n                : function () {\n                    return sync.preRender(element.updateTreeLayoutProjection, false, true);\n                }, \n            /**\n             * Expose the latest layoutId prop.\n             */\n            getLayoutId: function () { return props.layoutId; }, \n            /**\n             * Returns the current instance.\n             */\n            getInstance: function () { return instance; }, \n            /**\n             * Get/set the latest static values.\n             */\n            getStaticValue: function (key) { return latestValues[key]; }, setStaticValue: function (key, value) { return (latestValues[key] = value); }, \n            /**\n             * Returns the latest motion value state. Currently only used to take\n             * a snapshot of the visual element - perhaps this can return the whole\n             * visual state\n             */\n            getLatestValues: function () { return latestValues; }, \n            /**\n             * Set the visiblity of the visual element. If it's changed, schedule\n             * a render to reflect these changes.\n             */\n            setVisibility: function (visibility) {\n                if (element.isVisible === visibility)\n                    return;\n                element.isVisible = visibility;\n                element.scheduleRender();\n            },\n            /**\n             * Make a target animatable by Popmotion. For instance, if we're\n             * trying to animate width from 100px to 100vw we need to measure 100vw\n             * in pixels to determine what we really need to animate to. This is also\n             * pluggable to support Framer's custom value types like Color,\n             * and CSS variables.\n             */\n            makeTargetAnimatable: function (target, canMutate) {\n                if (canMutate === void 0) { canMutate = true; }\n                return makeTargetAnimatable(element, target, props, canMutate);\n            },\n            // Motion values ========================\n            /**\n             * Add a motion value and bind it to this visual element.\n             */\n            addValue: function (key, value) {\n                // Remove existing value if it exists\n                if (element.hasValue(key))\n                    element.removeValue(key);\n                values.set(key, value);\n                latestValues[key] = value.get();\n                bindToMotionValue(key, value);\n            },\n            /**\n             * Remove a motion value and unbind any active subscriptions.\n             */\n            removeValue: function (key) {\n                var _a;\n                values.delete(key);\n                (_a = valueSubscriptions.get(key)) === null || _a === void 0 ? void 0 : _a();\n                valueSubscriptions.delete(key);\n                delete latestValues[key];\n                removeValueFromRenderState(key, renderState);\n            }, \n            /**\n             * Check whether we have a motion value for this key\n             */\n            hasValue: function (key) { return values.has(key); }, \n            /**\n             * Get a motion value for this key. If called with a default\n             * value, we'll create one if none exists.\n             */\n            getValue: function (key, defaultValue) {\n                var value = values.get(key);\n                if (value === undefined && defaultValue !== undefined) {\n                    value = motionValue(defaultValue);\n                    element.addValue(key, value);\n                }\n                return value;\n            }, \n            /**\n             * Iterate over our motion values.\n             */\n            forEachValue: function (callback) { return values.forEach(callback); }, \n            /**\n             * If we're trying to animate to a previously unencountered value,\n             * we need to check for it in our state and as a last resort read it\n             * directly from the instance (which might have performance implications).\n             */\n            readValue: function (key) { var _a; return (_a = latestValues[key]) !== null && _a !== void 0 ? _a : readValueFromInstance(instance, key, options); }, \n            /**\n             * Set the base target to later animate back to. This is currently\n             * only hydrated on creation and when we first read a value.\n             */\n            setBaseTarget: function (key, value) {\n                baseTarget[key] = value;\n            },\n            /**\n             * Find the base target for a value thats been removed from all animation\n             * props.\n             */\n            getBaseTarget: function (key) {\n                if (getBaseTarget) {\n                    var target = getBaseTarget(props, key);\n                    if (target !== undefined && !isMotionValue(target))\n                        return target;\n                }\n                return baseTarget[key];\n            } }, lifecycles), { \n            /**\n             * Build the renderer state based on the latest visual state.\n             */\n            build: function () {\n                triggerBuild();\n                return renderState;\n            },\n            /**\n             * Schedule a render on the next animation frame.\n             */\n            scheduleRender: function () {\n                sync.render(render, false, true);\n            }, \n            /**\n             * Synchronously fire render. It's prefered that we batch renders but\n             * in many circumstances, like layout measurement, we need to run this\n             * synchronously. However in those instances other measures should be taken\n             * to batch reads/writes.\n             */\n            syncRender: render, \n            /**\n             * Update the provided props. Ensure any newly-added motion values are\n             * added to our map, old ones removed, and listeners updated.\n             */\n            setProps: function (newProps) {\n                props = newProps;\n                lifecycles.updatePropListeners(newProps);\n                prevMotionValues = updateMotionValuesFromProps(element, scrapeMotionValuesFromProps(props), prevMotionValues);\n            }, getProps: function () { return props; }, \n            // Variants ==============================\n            /**\n             * Returns the variant definition with a given name.\n             */\n            getVariant: function (name) { var _a; return (_a = props.variants) === null || _a === void 0 ? void 0 : _a[name]; }, \n            /**\n             * Returns the defined default transition on this component.\n             */\n            getDefaultTransition: function () { return props.transition; }, \n            /**\n             * Used by child variant nodes to get the closest ancestor variant props.\n             */\n            getVariantContext: function (startAtParent) {\n                if (startAtParent === void 0) { startAtParent = false; }\n                if (startAtParent)\n                    return parent === null || parent === void 0 ? void 0 : parent.getVariantContext();\n                if (!isControllingVariants) {\n                    var context_1 = (parent === null || parent === void 0 ? void 0 : parent.getVariantContext()) || {};\n                    if (props.initial !== undefined) {\n                        context_1.initial = props.initial;\n                    }\n                    return context_1;\n                }\n                var context = {};\n                for (var i = 0; i < numVariantProps; i++) {\n                    var name_1 = variantProps[i];\n                    var prop = props[name_1];\n                    if (isVariantLabel(prop) || prop === false) {\n                        context[name_1] = prop;\n                    }\n                }\n                return context;\n            },\n            // Layout projection ==============================\n            /**\n             * Enable layout projection for this visual element. Won't actually\n             * occur until we also have hydrated layout measurements.\n             */\n            enableLayoutProjection: function () {\n                projection.isEnabled = true;\n                element.layoutTree.add(element);\n            },\n            /**\n             * Lock the projection target, for instance when dragging, so\n             * nothing else can try and animate it.\n             */\n            lockProjectionTarget: function () {\n                projection.isTargetLocked = true;\n            },\n            unlockProjectionTarget: function () {\n                element.stopLayoutAnimation();\n                projection.isTargetLocked = false;\n            }, getLayoutState: function () { return layoutState; }, setCrossfader: function (newCrossfader) {\n                crossfader = newCrossfader;\n            }, isProjectionReady: function () {\n                return projection.isEnabled &&\n                    projection.isHydrated &&\n                    layoutState.isHydrated;\n            }, \n            /**\n             * Start a layout animation on a given axis.\n             */\n            startLayoutAnimation: function (axis, transition, isRelative) {\n                if (isRelative === void 0) { isRelative = false; }\n                var progress = element.getProjectionAnimationProgress()[axis];\n                var _a = isRelative\n                    ? projection.relativeTarget[axis]\n                    : projection.target[axis], min = _a.min, max = _a.max;\n                var length = max - min;\n                progress.clearListeners();\n                progress.set(min);\n                progress.set(min); // Set twice to hard-reset velocity\n                progress.onChange(function (v) {\n                    element.setProjectionTargetAxis(axis, v, v + length, isRelative);\n                });\n                return element.animateMotionValue(axis, progress, 0, transition);\n            },\n            /**\n             * Stop layout animations.\n             */\n            stopLayoutAnimation: function () {\n                eachAxis(function (axis) {\n                    return element.getProjectionAnimationProgress()[axis].stop();\n                });\n            },\n            /**\n             * Measure the current viewport box with or without transforms.\n             * Only measures axis-aligned boxes, rotate and skew must be manually\n             * removed with a re-render to work.\n             */\n            measureViewportBox: function (withTransform) {\n                if (withTransform === void 0) { withTransform = true; }\n                var viewportBox = measureViewportBox(instance, options);\n                if (!withTransform)\n                    removeBoxTransforms(viewportBox, latestValues);\n                return viewportBox;\n            },\n            /**\n             * Get the motion values tracking the layout animations on each\n             * axis. Lazy init if not already created.\n             */\n            getProjectionAnimationProgress: function () {\n                projectionTargetProgress || (projectionTargetProgress = {\n                    x: motionValue(0),\n                    y: motionValue(0),\n                });\n                return projectionTargetProgress;\n            },\n            /**\n             * Update the projection of a single axis. Schedule an update to\n             * the tree layout projection.\n             */\n            setProjectionTargetAxis: function (axis, min, max, isRelative) {\n                if (isRelative === void 0) { isRelative = false; }\n                var target;\n                if (isRelative) {\n                    if (!projection.relativeTarget) {\n                        projection.relativeTarget = axisBox();\n                    }\n                    target = projection.relativeTarget[axis];\n                }\n                else {\n                    projection.relativeTarget = undefined;\n                    target = projection.target[axis];\n                }\n                projection.isHydrated = true;\n                target.min = min;\n                target.max = max;\n                // Flag that we want to fire the onViewportBoxUpdate event handler\n                hasViewportBoxUpdated = true;\n                lifecycles.notifySetAxisTarget();\n            },\n            /**\n             * Rebase the projection target on top of the provided viewport box\n             * or the measured layout. This ensures that non-animating elements\n             * don't fall out of sync differences in measurements vs projections\n             * after a page scroll or other relayout.\n             */\n            rebaseProjectionTarget: function (force, box) {\n                if (box === void 0) { box = layoutState.layout; }\n                var _a = element.getProjectionAnimationProgress(), x = _a.x, y = _a.y;\n                var shouldRebase = !projection.relativeTarget &&\n                    !projection.isTargetLocked &&\n                    !x.isAnimating() &&\n                    !y.isAnimating();\n                if (force || shouldRebase) {\n                    eachAxis(function (axis) {\n                        var _a = box[axis], min = _a.min, max = _a.max;\n                        element.setProjectionTargetAxis(axis, min, max);\n                    });\n                }\n            },\n            /**\n             * Notify the visual element that its layout is up-to-date.\n             * Currently Animate.tsx uses this to check whether a layout animation\n             * needs to be performed.\n             */\n            notifyLayoutReady: function (config) {\n                setCurrentViewportBox(element);\n                element.notifyLayoutUpdate(layoutState.layout, element.prevViewportBox || layoutState.layout, config);\n            }, \n            /**\n             * Temporarily reset the transform of the instance.\n             */\n            resetTransform: function () { return resetTransform(element, instance, props); }, restoreTransform: function () { return restoreTransform(instance, renderState); }, updateLayoutProjection: updateLayoutProjection,\n            updateTreeLayoutProjection: function () {\n                element.layoutTree.forEach(fireResolveRelativeTargetBox);\n                /**\n                 * Schedule the projection updates at the end of the current preRender\n                 * step. This will ensure that all layout trees will first resolve\n                 * relative projection boxes into viewport boxes, and *then*\n                 * update projections.\n                 */\n                sync.preRender(updateTreeLayoutProjection, false, true);\n                // sync.postRender(() => element.scheduleUpdateLayoutProjection())\n            },\n            getProjectionParent: function () {\n                if (projectionParent === undefined) {\n                    var foundParent = false;\n                    // Search backwards through the tree path\n                    for (var i = element.path.length - 1; i >= 0; i--) {\n                        var ancestor = element.path[i];\n                        if (ancestor.projection.isEnabled) {\n                            foundParent = ancestor;\n                            break;\n                        }\n                    }\n                    projectionParent = foundParent;\n                }\n                return projectionParent;\n            },\n            resolveRelativeTargetBox: function () {\n                var relativeParent = element.getProjectionParent();\n                if (!projection.relativeTarget || !relativeParent)\n                    return;\n                calcRelativeBox(projection, relativeParent.projection);\n                if (isDraggable(relativeParent)) {\n                    var target = projection.target;\n                    applyBoxTransforms(target, target, relativeParent.getLatestValues());\n                }\n            },\n            shouldResetTransform: function () {\n                return Boolean(props._layoutResetTransform);\n            },\n            /**\n             *\n             */\n            pointTo: function (newLead) {\n                leadProjection = newLead.projection;\n                leadLatestValues = newLead.getLatestValues();\n                /**\n                 * Subscribe to lead component's layout animations\n                 */\n                unsubscribeFromLeadVisualElement === null || unsubscribeFromLeadVisualElement === void 0 ? void 0 : unsubscribeFromLeadVisualElement();\n                unsubscribeFromLeadVisualElement = pipe(newLead.onSetAxisTarget(element.scheduleUpdateLayoutProjection), newLead.onLayoutAnimationComplete(function () {\n                    var _a;\n                    if (element.isPresent) {\n                        element.presence = Presence.Present;\n                    }\n                    else {\n                        (_a = element.layoutSafeToRemove) === null || _a === void 0 ? void 0 : _a.call(element);\n                    }\n                }));\n            }, \n            // TODO: Clean this up\n            isPresent: true, presence: Presence.Entering });\n        return element;\n    };\n};\nfunction fireResolveRelativeTargetBox(child) {\n    child.resolveRelativeTargetBox();\n}\nfunction fireUpdateLayoutProjection(child) {\n    child.updateLayoutProjection();\n}\nvar variantProps = __spreadArray([\"initial\"], __read(variantPriorityOrder));\nvar numVariantProps = variantProps.length;\n\nexport { visualElement };\n","import { motionValue } from '../../value/index.js';\nimport { isMotionValue } from '../../value/utils/is-motion-value.js';\n\nfunction updateMotionValuesFromProps(element, next, prev) {\n    var _a;\n    for (var key in next) {\n        var nextValue = next[key];\n        var prevValue = prev[key];\n        if (isMotionValue(nextValue)) {\n            /**\n             * If this is a motion value found in props or style, we want to add it\n             * to our visual element's motion value map.\n             */\n            element.addValue(key, nextValue);\n        }\n        else if (isMotionValue(prevValue)) {\n            /**\n             * If we're swapping to a new motion value, create a new motion value\n             * from that\n             */\n            element.addValue(key, motionValue(nextValue));\n        }\n        else if (prevValue !== nextValue) {\n            /**\n             * If this is a flat value that has changed, update the motion value\n             * or create one if it doesn't exist. We only want to do this if we're\n             * not handling the value with our animation state.\n             */\n            if (element.hasValue(key)) {\n                var existingValue = element.getValue(key);\n                // TODO: Only update values that aren't being animated or even looked at\n                !existingValue.hasAnimated && existingValue.set(nextValue);\n            }\n            else {\n                element.addValue(key, motionValue((_a = element.getStaticValue(key)) !== null && _a !== void 0 ? _a : nextValue));\n            }\n        }\n    }\n    // Handle removed values\n    for (var key in prev) {\n        if (next[key] === undefined)\n            element.removeValue(key);\n    }\n    return next;\n}\n\nexport { updateMotionValuesFromProps };\n","import { calcRelativeOffset } from '../../../motion/features/layout/utils.js';\nimport { eachAxis } from '../../../utils/each-axis.js';\n\nfunction setCurrentViewportBox(visualElement) {\n    var projectionParent = visualElement.getProjectionParent();\n    if (!projectionParent) {\n        visualElement.rebaseProjectionTarget();\n        return;\n    }\n    var relativeOffset = calcRelativeOffset(projectionParent.getLayoutState().layout, visualElement.getLayoutState().layout);\n    eachAxis(function (axis) {\n        visualElement.setProjectionTargetAxis(axis, relativeOffset[axis].min, relativeOffset[axis].max, true);\n    });\n}\n\nexport { setCurrentViewportBox };\n","import { resetBox, applyTreeDeltas } from '../../utils/geometry/delta-apply.js';\nimport { updateBoxDelta } from '../../utils/geometry/delta-calc.js';\n\nfunction updateLayoutDeltas(_a, _b, treePath, transformOrigin) {\n    var delta = _a.delta, layout = _a.layout, layoutCorrected = _a.layoutCorrected, treeScale = _a.treeScale;\n    var target = _b.target;\n    /**\n     * Reset the corrected box with the latest values from box, as we're then going\n     * to perform mutative operations on it.\n     */\n    resetBox(layoutCorrected, layout);\n    /**\n     * Apply all the parent deltas to this box to produce the corrected box. This\n     * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n     */\n    applyTreeDeltas(layoutCorrected, treeScale, treePath);\n    /**\n     * Update the delta between the corrected box and the target box before user-set transforms were applied.\n     * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n     * for our layout reprojection, but still allow them to be scaled correctly by the user.\n     * It might be that to simplify this we may want to accept that user-set scale is also corrected\n     * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n     * to allow people to choose whether these styles are corrected based on just the\n     * layout reprojection or the final bounding box.\n     */\n    updateBoxDelta(delta, layoutCorrected, target, transformOrigin);\n}\n\nexport { updateLayoutDeltas };\n","import { __assign, __read } from 'tslib';\nimport { number, px } from 'style-value-types';\nimport { isKeyframesTarget } from '../../../animation/utils/is-keyframes-target.js';\nimport { invariant } from 'hey-listen';\nimport { transformProps } from '../../html/utils/transform.js';\nimport { findDimensionValueType } from '../value-types/dimensions.js';\n\nvar positionalKeys = new Set([\n    \"width\",\n    \"height\",\n    \"top\",\n    \"left\",\n    \"right\",\n    \"bottom\",\n    \"x\",\n    \"y\",\n]);\nvar isPositionalKey = function (key) { return positionalKeys.has(key); };\nvar hasPositionalKey = function (target) {\n    return Object.keys(target).some(isPositionalKey);\n};\nvar setAndResetVelocity = function (value, to) {\n    // Looks odd but setting it twice doesn't render, it'll just\n    // set both prev and current to the latest value\n    value.set(to, false);\n    value.set(to);\n};\nvar isNumOrPxType = function (v) {\n    return v === number || v === px;\n};\nvar BoundingBoxDimension;\n(function (BoundingBoxDimension) {\n    BoundingBoxDimension[\"width\"] = \"width\";\n    BoundingBoxDimension[\"height\"] = \"height\";\n    BoundingBoxDimension[\"left\"] = \"left\";\n    BoundingBoxDimension[\"right\"] = \"right\";\n    BoundingBoxDimension[\"top\"] = \"top\";\n    BoundingBoxDimension[\"bottom\"] = \"bottom\";\n})(BoundingBoxDimension || (BoundingBoxDimension = {}));\nvar getPosFromMatrix = function (matrix, pos) {\n    return parseFloat(matrix.split(\", \")[pos]);\n};\nvar getTranslateFromMatrix = function (pos2, pos3) { return function (_bbox, _a) {\n    var transform = _a.transform;\n    if (transform === \"none\" || !transform)\n        return 0;\n    var matrix3d = transform.match(/^matrix3d\\((.+)\\)$/);\n    if (matrix3d) {\n        return getPosFromMatrix(matrix3d[1], pos3);\n    }\n    else {\n        var matrix = transform.match(/^matrix\\((.+)\\)$/);\n        if (matrix) {\n            return getPosFromMatrix(matrix[1], pos2);\n        }\n        else {\n            return 0;\n        }\n    }\n}; };\nvar transformKeys = new Set([\"x\", \"y\", \"z\"]);\nvar nonTranslationalTransformKeys = transformProps.filter(function (key) { return !transformKeys.has(key); });\nfunction removeNonTranslationalTransform(visualElement) {\n    var removedTransforms = [];\n    nonTranslationalTransformKeys.forEach(function (key) {\n        var value = visualElement.getValue(key);\n        if (value !== undefined) {\n            removedTransforms.push([key, value.get()]);\n            value.set(key.startsWith(\"scale\") ? 1 : 0);\n        }\n    });\n    // Apply changes to element before measurement\n    if (removedTransforms.length)\n        visualElement.syncRender();\n    return removedTransforms;\n}\nvar positionalValues = {\n    // Dimensions\n    width: function (_a) {\n        var x = _a.x;\n        return x.max - x.min;\n    },\n    height: function (_a) {\n        var y = _a.y;\n        return y.max - y.min;\n    },\n    top: function (_bbox, _a) {\n        var top = _a.top;\n        return parseFloat(top);\n    },\n    left: function (_bbox, _a) {\n        var left = _a.left;\n        return parseFloat(left);\n    },\n    bottom: function (_a, _b) {\n        var y = _a.y;\n        var top = _b.top;\n        return parseFloat(top) + (y.max - y.min);\n    },\n    right: function (_a, _b) {\n        var x = _a.x;\n        var left = _b.left;\n        return parseFloat(left) + (x.max - x.min);\n    },\n    // Transform\n    x: getTranslateFromMatrix(4, 13),\n    y: getTranslateFromMatrix(5, 14),\n};\nvar convertChangedValueTypes = function (target, visualElement, changedKeys) {\n    var originBbox = visualElement.measureViewportBox();\n    var element = visualElement.getInstance();\n    var elementComputedStyle = getComputedStyle(element);\n    var display = elementComputedStyle.display, top = elementComputedStyle.top, left = elementComputedStyle.left, bottom = elementComputedStyle.bottom, right = elementComputedStyle.right, transform = elementComputedStyle.transform;\n    var originComputedStyle = { top: top, left: left, bottom: bottom, right: right, transform: transform };\n    // If the element is currently set to display: \"none\", make it visible before\n    // measuring the target bounding box\n    if (display === \"none\") {\n        visualElement.setStaticValue(\"display\", target.display || \"block\");\n    }\n    // Apply the latest values (as set in checkAndConvertChangedValueTypes)\n    visualElement.syncRender();\n    var targetBbox = visualElement.measureViewportBox();\n    changedKeys.forEach(function (key) {\n        // Restore styles to their **calculated computed style**, not their actual\n        // originally set style. This allows us to animate between equivalent pixel units.\n        var value = visualElement.getValue(key);\n        setAndResetVelocity(value, positionalValues[key](originBbox, originComputedStyle));\n        target[key] = positionalValues[key](targetBbox, elementComputedStyle);\n    });\n    return target;\n};\nvar checkAndConvertChangedValueTypes = function (visualElement, target, origin, transitionEnd) {\n    if (origin === void 0) { origin = {}; }\n    if (transitionEnd === void 0) { transitionEnd = {}; }\n    target = __assign({}, target);\n    transitionEnd = __assign({}, transitionEnd);\n    var targetPositionalKeys = Object.keys(target).filter(isPositionalKey);\n    // We want to remove any transform values that could affect the element's bounding box before\n    // it's measured. We'll reapply these later.\n    var removedTransformValues = [];\n    var hasAttemptedToRemoveTransformValues = false;\n    var changedValueTypeKeys = [];\n    targetPositionalKeys.forEach(function (key) {\n        var value = visualElement.getValue(key);\n        if (!visualElement.hasValue(key))\n            return;\n        var from = origin[key];\n        var to = target[key];\n        var fromType = findDimensionValueType(from);\n        var toType;\n        // TODO: The current implementation of this basically throws an error\n        // if you try and do value conversion via keyframes. There's probably\n        // a way of doing this but the performance implications would need greater scrutiny,\n        // as it'd be doing multiple resize-remeasure operations.\n        if (isKeyframesTarget(to)) {\n            var numKeyframes = to.length;\n            for (var i = to[0] === null ? 1 : 0; i < numKeyframes; i++) {\n                if (!toType) {\n                    toType = findDimensionValueType(to[i]);\n                    invariant(toType === fromType ||\n                        (isNumOrPxType(fromType) && isNumOrPxType(toType)), \"Keyframes must be of the same dimension as the current value\");\n                }\n                else {\n                    invariant(findDimensionValueType(to[i]) === toType, \"All keyframes must be of the same type\");\n                }\n            }\n        }\n        else {\n            toType = findDimensionValueType(to);\n        }\n        if (fromType !== toType) {\n            // If they're both just number or px, convert them both to numbers rather than\n            // relying on resize/remeasure to convert (which is wasteful in this situation)\n            if (isNumOrPxType(fromType) && isNumOrPxType(toType)) {\n                var current = value.get();\n                if (typeof current === \"string\") {\n                    value.set(parseFloat(current));\n                }\n                if (typeof to === \"string\") {\n                    target[key] = parseFloat(to);\n                }\n                else if (Array.isArray(to) && toType === px) {\n                    target[key] = to.map(parseFloat);\n                }\n            }\n            else if ((fromType === null || fromType === void 0 ? void 0 : fromType.transform) &&\n                (toType === null || toType === void 0 ? void 0 : toType.transform) &&\n                (from === 0 || to === 0)) {\n                // If one or the other value is 0, it's safe to coerce it to the\n                // type of the other without measurement\n                if (from === 0) {\n                    value.set(toType.transform(from));\n                }\n                else {\n                    target[key] = fromType.transform(to);\n                }\n            }\n            else {\n                // If we're going to do value conversion via DOM measurements, we first\n                // need to remove non-positional transform values that could affect the bbox measurements.\n                if (!hasAttemptedToRemoveTransformValues) {\n                    removedTransformValues = removeNonTranslationalTransform(visualElement);\n                    hasAttemptedToRemoveTransformValues = true;\n                }\n                changedValueTypeKeys.push(key);\n                transitionEnd[key] =\n                    transitionEnd[key] !== undefined\n                        ? transitionEnd[key]\n                        : target[key];\n                setAndResetVelocity(value, to);\n            }\n        }\n    });\n    if (changedValueTypeKeys.length) {\n        var convertedTarget = convertChangedValueTypes(target, visualElement, changedValueTypeKeys);\n        // If we removed transform values, reapply them before the next render\n        if (removedTransformValues.length) {\n            removedTransformValues.forEach(function (_a) {\n                var _b = __read(_a, 2), key = _b[0], value = _b[1];\n                visualElement.getValue(key).set(value);\n            });\n        }\n        // Reapply original values\n        visualElement.syncRender();\n        return { target: convertedTarget, transitionEnd: transitionEnd };\n    }\n    else {\n        return { target: target, transitionEnd: transitionEnd };\n    }\n};\n/**\n * Convert value types for x/y/width/height/top/left/bottom/right\n *\n * Allows animation between `'auto'` -> `'100%'` or `0` -> `'calc(50% - 10vw)'`\n *\n * @internal\n */\nfunction unitConversion(visualElement, target, origin, transitionEnd) {\n    return hasPositionalKey(target)\n        ? checkAndConvertChangedValueTypes(visualElement, target, origin, transitionEnd)\n        : { target: target, transitionEnd: transitionEnd };\n}\n\nexport { BoundingBoxDimension, unitConversion };\n","import { resolveCSSVariables } from './css-variables-conversion.js';\nimport { unitConversion } from './unit-conversion.js';\n\n/**\n * Parse a DOM variant to make it animatable. This involves resolving CSS variables\n * and ensuring animations like \"20%\" => \"calc(50vw)\" are performed in pixels.\n */\nvar parseDomVariant = function (visualElement, target, origin, transitionEnd) {\n    var resolved = resolveCSSVariables(visualElement, target, transitionEnd);\n    target = resolved.target;\n    transitionEnd = resolved.transitionEnd;\n    return unitConversion(visualElement, target, origin, transitionEnd);\n};\n\nexport { parseDomVariant };\n","import { __rest, __assign } from 'tslib';\nimport { visualElement } from '../index.js';\nimport { getOrigin, checkTargetForNewValues } from '../utils/setters.js';\nimport { getBoundingBox } from '../dom/projection/measure.js';\nimport { buildHTMLStyles } from './utils/build-styles.js';\nimport { isCSSVariable } from '../dom/utils/is-css-variable.js';\nimport { parseDomVariant } from '../dom/utils/parse-dom-variant.js';\nimport { isTransformProp } from './utils/transform.js';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.js';\nimport { renderHTML } from './utils/render.js';\nimport { getDefaultValueType } from '../dom/value-types/defaults.js';\nimport { buildLayoutProjectionTransformOrigin, buildLayoutProjectionTransform } from './utils/build-projection-transform.js';\n\nfunction getComputedStyle(element) {\n    return window.getComputedStyle(element);\n}\nvar htmlConfig = {\n    treeType: \"dom\",\n    readValueFromInstance: function (domElement, key) {\n        if (isTransformProp(key)) {\n            var defaultType = getDefaultValueType(key);\n            return defaultType ? defaultType.default || 0 : 0;\n        }\n        else {\n            var computedStyle = getComputedStyle(domElement);\n            return ((isCSSVariable(key)\n                ? computedStyle.getPropertyValue(key)\n                : computedStyle[key]) || 0);\n        }\n    },\n    sortNodePosition: function (a, b) {\n        /**\n         * compareDocumentPosition returns a bitmask, by using the bitwise &\n         * we're returning true if 2 in that bitmask is set to true. 2 is set\n         * to true if b preceeds a.\n         */\n        return a.compareDocumentPosition(b) & 2 ? 1 : -1;\n    },\n    getBaseTarget: function (props, key) {\n        var _a;\n        return (_a = props.style) === null || _a === void 0 ? void 0 : _a[key];\n    },\n    measureViewportBox: function (element, _a) {\n        var transformPagePoint = _a.transformPagePoint;\n        return getBoundingBox(element, transformPagePoint);\n    },\n    /**\n     * Reset the transform on the current Element. This is called as part\n     * of a batched process across the entire layout tree. To remove this write\n     * cycle it'd be interesting to see if it's possible to \"undo\" all the current\n     * layout transforms up the tree in the same way this.getBoundingBoxWithoutTransforms\n     * works\n     */\n    resetTransform: function (element, domElement, props) {\n        var transformTemplate = props.transformTemplate;\n        domElement.style.transform = transformTemplate\n            ? transformTemplate({}, \"\")\n            : \"none\";\n        // Ensure that whatever happens next, we restore our transform on the next frame\n        element.scheduleRender();\n    },\n    restoreTransform: function (instance, mutableState) {\n        instance.style.transform = mutableState.style.transform;\n    },\n    removeValueFromRenderState: function (key, _a) {\n        var vars = _a.vars, style = _a.style;\n        delete vars[key];\n        delete style[key];\n    },\n    /**\n     * Ensure that HTML and Framer-specific value types like `px`->`%` and `Color`\n     * can be animated by Motion.\n     */\n    makeTargetAnimatable: function (element, _a, _b, isMounted) {\n        var transformValues = _b.transformValues;\n        if (isMounted === void 0) { isMounted = true; }\n        var transition = _a.transition, transitionEnd = _a.transitionEnd, target = __rest(_a, [\"transition\", \"transitionEnd\"]);\n        var origin = getOrigin(target, transition || {}, element);\n        /**\n         * If Framer has provided a function to convert `Color` etc value types, convert them\n         */\n        if (transformValues) {\n            if (transitionEnd)\n                transitionEnd = transformValues(transitionEnd);\n            if (target)\n                target = transformValues(target);\n            if (origin)\n                origin = transformValues(origin);\n        }\n        if (isMounted) {\n            checkTargetForNewValues(element, target, origin);\n            var parsed = parseDomVariant(element, target, origin, transitionEnd);\n            transitionEnd = parsed.transitionEnd;\n            target = parsed.target;\n        }\n        return __assign({ transition: transition,\n            transitionEnd: transitionEnd }, target);\n    },\n    scrapeMotionValuesFromProps: scrapeMotionValuesFromProps,\n    build: function (element, renderState, latestValues, projection, layoutState, options, props) {\n        if (element.isVisible !== undefined) {\n            renderState.style.visibility = element.isVisible\n                ? \"visible\"\n                : \"hidden\";\n        }\n        var isProjectionTranform = projection.isEnabled && layoutState.isHydrated;\n        buildHTMLStyles(renderState, latestValues, projection, layoutState, options, props.transformTemplate, isProjectionTranform ? buildLayoutProjectionTransform : undefined, isProjectionTranform\n            ? buildLayoutProjectionTransformOrigin\n            : undefined);\n    },\n    render: renderHTML,\n};\nvar htmlVisualElement = visualElement(htmlConfig);\n\nexport { getComputedStyle, htmlConfig, htmlVisualElement };\n","import { __assign } from 'tslib';\nimport { visualElement } from '../index.js';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.js';\nimport { htmlConfig } from '../html/visual-element.js';\nimport { buildSVGAttrs } from './utils/build-attrs.js';\nimport { camelToDash } from '../dom/utils/camel-to-dash.js';\nimport { camelCaseAttributes } from './utils/camel-case-attrs.js';\nimport { isTransformProp } from '../html/utils/transform.js';\nimport { renderSVG } from './utils/render.js';\nimport { getDefaultValueType } from '../dom/value-types/defaults.js';\nimport { buildLayoutProjectionTransformOrigin, buildLayoutProjectionTransform } from '../html/utils/build-projection-transform.js';\n\nvar svgVisualElement = visualElement(__assign(__assign({}, htmlConfig), { getBaseTarget: function (props, key) {\n        return props[key];\n    },\n    readValueFromInstance: function (domElement, key) {\n        var _a;\n        if (isTransformProp(key)) {\n            return ((_a = getDefaultValueType(key)) === null || _a === void 0 ? void 0 : _a.default) || 0;\n        }\n        key = !camelCaseAttributes.has(key) ? camelToDash(key) : key;\n        return domElement.getAttribute(key);\n    },\n    scrapeMotionValuesFromProps: scrapeMotionValuesFromProps,\n    build: function (_element, renderState, latestValues, projection, layoutState, options, props) {\n        var isProjectionTranform = projection.isEnabled && layoutState.isHydrated;\n        buildSVGAttrs(renderState, latestValues, projection, layoutState, options, props.transformTemplate, isProjectionTranform ? buildLayoutProjectionTransform : undefined, isProjectionTranform\n            ? buildLayoutProjectionTransformOrigin\n            : undefined);\n    }, render: renderSVG }));\n\nexport { svgVisualElement };\n","import { __assign } from 'tslib';\nimport { animations } from '../../motion/features/animations.js';\nimport { gestureAnimations } from '../../motion/features/gestures.js';\nimport { createDomVisualElement } from './create-visual-element.js';\n\n/**\n * @public\n */\nvar domAnimation = __assign(__assign({ renderer: createDomVisualElement }, animations), gestureAnimations);\n\nexport { domAnimation };\n","import { htmlVisualElement } from '../html/visual-element.js';\nimport { svgVisualElement } from '../svg/visual-element.js';\nimport { isSVGComponent } from './utils/is-svg-component.js';\n\nvar createDomVisualElement = function (Component, options) {\n    return isSVGComponent(Component)\n        ? svgVisualElement(options, { enableHardwareAcceleration: false })\n        : htmlVisualElement(options, { enableHardwareAcceleration: true });\n};\n\nexport { createDomVisualElement };\n","import { __assign } from 'tslib';\nimport { drag } from '../../motion/features/drag.js';\nimport { layoutAnimations } from '../../motion/features/layout/index.js';\nimport { domAnimation } from './features-animation.js';\n\n/**\n * @public\n */\nvar domMax = __assign(__assign(__assign({}, domAnimation), drag), layoutAnimations);\n\nexport { domMax };\n"],"names":["createHoverEvent","visualElement","isActive","callback","event","info","_a","isMouseEvent","isDragActive","animationState","setActive","AnimationType","Hover","isNodeOrChild","parent","child","parentElement","makeRenderlessComponent","hook","props","gestureAnimations","tap","useTapGesture","onTap","onTapStart","onTapCancel","whileTap","hasPressListeners","isPressing","useRef","cancelPointerEndListeners","removePointerEndListener","current","call","checkPointerEnd","Tap","onPointerUp","getInstance","target","onPointerCancel","usePointerEvent","onPointerDown","pipe","addPointerEvent","window","useUnmountEffect","focus","useFocusGesture","whileFocus","useDomEvent","Focus","hover","useHoverGesture","onHoverStart","onHoverEnd","whileHover","shallowCompare","next","prev","Array","isArray","prevLength","length","i","testValueType","v","type","test","dimensionValueTypes","number","px","percent","degrees","vw","vh","parse","findDimensionValueType","find","valueTypes","__spreadArray","__read","color","complex","findValueType","setMotionValue","key","value","hasValue","getValue","set","addValue","motionValue","getOriginFromTransition","transition","from","animateVariant","variant","options","resolved","resolveVariant","custom","_b","getDefaultTransition","transitionOverride","getAnimation","animateTarget","Promise","resolve","getChildAnimations","variantChildren","size","forwardDelay","delayChildren","staggerChildren","staggerDirection","animateChildren","animations","maxStaggerDuration","generateStaggerDuration","sort","sortByTreeOrder","forEach","push","__assign","delay","then","notifyAnimationComplete","all","when","_c","first","last","definition","_d","_e","makeTargetAnimatable","_f","transitionEnd","__rest","animationTypeState","getState","valueTarget","shouldBlockAnimation","animation","startAnimation","setTarget","resolveFinalValueInKeyframes","a","b","sortNodePosition","protectedKeys","needsAnimating","shouldBlock","hasOwnProperty","variantPriorityOrder","Animate","Drag","Exit","reversePriorityOrder","reverse","numAnimationTypes","animateList","map","animateVisualElement","notifyAnimationStart","resolvedDefinition","createAnimationState","animate","state","createState","createTypeState","allAnimatedKeys","isInitialRender","buildResolvedTypeValues","acc","animateChanges","changedActiveType","getProps","context","getVariantContext","removedKeys","Set","encounteredKeys","removedVariantIndex","Infinity","_loop_1","typeState","prop","propIsVariant","isVariantLabel","activeDelta","isInherited","manuallyAnimateOnMount","prevProp","isAnimationControls","shouldAnimateType","variantsHaveChanged","isVariantLabels","definitionList","resolvedValues","reduce","prevResolvedValues","allKeys","markToAnimate","delete","isKeyframesTarget","add","has","blockInitialAnimation","apply","fallbackAnimation_1","fallbackTarget","getBaseTarget","shouldAnimate","Boolean","initial","isAnimated","setAnimateFunction","makeAnimator","useEffect","subscribe","exit","usePresence","isPresent","onExitComplete","presenceContext","useContext","PresenceContext","drag","pan","usePanGesture","onPan","onPanStart","onPanEnd","onPanSessionStart","hasPanEvents","panSession","transformPagePoint","MotionConfigContext","handlers","onSessionStart","onStart","onMove","onEnd","updateHandlers","PanSession","end","useDrag","groupDragControls","dragControls","useConstant","VisualElementDragControls","setProps","mount","isCSSVariable","startsWith","cssVariableRegex","getVariableValue","element","depth","parseCSSVariable","match","exec","token","fallback","getComputedStyle","getPropertyValue","trim","pixelsToPercent","pixels","axis","max","min","varToken","borderCorrectionDefinition","process","correctBorderRadius","latest","_layoutState","parseFloat","x","y","defaultScaleCorrectors","borderRadius","applyTo","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","boxShadow","correctBoxShadow","delta","treeScale","original","containsCSSVariables","includes","cssVariables","replace","shadow","template","createTransformer","offset","xScale","scale","yScale","averageScale","mix","output","i_1","cssVariable","_super","_this","this","arguments","frameTarget","axisBox","currentAnimationTarget","isAnimating","stopAxisAnimation","isAnimatingTree","origin","originBox","targetBox","visibilityAction","shouldStackAnimate","onComplete","prevParent","config","layout","safeToRemove","isRelative","projectionParent","getProjectionParent","prevParentViewportBox","prevViewportBox","parentLayout","getLayoutState","checkIfParentHasChanged","isProvidedCorrectDataForRelativeSharedLayout","calcRelativeOffset","boxHasMoved","hasMoved","isZeroBox","axisIsEqual","eachAxis","targetLength","projection","isTargetLocked","animateAxis","setProjectionTargetAxis","setVisibility","VisibilityAction","Show","syncRender","notifyLayoutAnimationComplete","__extends","prototype","componentDidMount","animateMotionValue","enableLayoutProjection","unsubLayoutReady","onLayoutUpdate","layoutSafeToRemove","addScaleCorrection","componentWillUnmount","layoutProgress","getProjectionAnimationProgress","clearListeners","frame","p","get","tweenAxis","unsubscribeProgress","onChange","stop","layoutTransition","defaultLayoutTransition","getValueTransition","render","React.Component","zeroAxis","duration","ease","Measure","syncLayout","framerSyncLayout","isSharedLayout","register","onUnmount","remove","getSnapshotBeforeUpdate","syncUpdate","snapshotViewportBox","componentDidUpdate","flush","React__default","Component","layoutAnimations","measureLayout","MeasureContextProvider","SharedLayoutContext","FramerTreeLayoutContext","createElement","layoutAnimation","AnimateLayoutContextProvider","React.createElement","createLayoutState","isHydrated","layoutCorrected","deltaFinal","deltaTransform","zeroLayout","buildLayoutProjectionTransform","latestTransform","transform","translate","rotate","rotateX","rotateY","identityProjection","buildLayoutProjectionTransformOrigin","names","FlatTree","children","isDirty","addUniqueItem","removeItem","compareByDepth","treeType","build","measureViewportBox","renderInstance","readValueFromInstance","resetTransform","restoreTransform","removeValueFromRenderState","scrapeMotionValuesFromProps","presenceId","visualState","instance","unsubscribeFromLeadVisualElement","crossfader","projectionTargetProgress","removeFromVariantTree","latestValues","renderState","lifecycles","createLifecycles","managers","SubscriptionManager","propSubscriptions","clearAllListeners","manager","clear","updatePropListeners","name","on","propListener","handler","args","_i","notify","isEnabled","targetFinal","leadProjection","leadLatestValues","layoutState","hasViewportBoxUpdated","values","Map","valueSubscriptions","prevMotionValues","baseTarget","isProjectionReady","applyBoxTransforms","updateBoxDelta","triggerBuild","valuesToRender","crossfadedValues","getCrossfadeState","update","notifyUpdate","updateTreeLayoutProjection","layoutTree","fireUpdateLayoutProjection","initialMotionValues","isMotionValue","isControllingVariants","checkIfControllingVariants","isVariantNode","checkIfVariantNode","path","isVisible","isMounted","newInstance","pointTo","addVariantChild","unmount","cancelSync","preRender","updateLayoutProjection","stopLayoutAnimation","closestVariantNode","getClosestVariantNode","other","scheduleUpdateLayoutProjection","sync","getLayoutId","layoutId","getStaticValue","setStaticValue","getLatestValues","visibility","scheduleRender","canMutate","removeValue","bindToMotionValue","removeOnChange","latestValue","onUpdate","removeOnRenderRequest","onRenderRequest","defaultValue","forEachValue","readValue","setBaseTarget","newProps","updateMotionValuesFromProps","nextValue","prevValue","existingValue","hasAnimated","getVariant","variants","startAtParent","context_1","numVariantProps","name_1","variantProps","lockProjectionTarget","unlockProjectionTarget","setCrossfader","newCrossfader","startLayoutAnimation","progress","relativeTarget","withTransform","viewportBox","removeBoxTransforms","notifySetAxisTarget","rebaseProjectionTarget","force","box","shouldRebase","notifyLayoutReady","setCurrentViewportBox","relativeOffset","notifyLayoutUpdate","prevTreeScaleX","prevTreeScaleY","prevDeltaTransform","updateLayoutDeltas","treePath","transformOrigin","resetBox","applyTreeDeltas","notifyViewportBoxUpdate","fireResolveRelativeTargetBox","foundParent","ancestor","resolveRelativeTargetBox","relativeParent","calcRelativeBox","isDraggable","shouldResetTransform","_layoutResetTransform","newLead","onSetAxisTarget","onLayoutAnimationComplete","presence","Presence","Present","Entering","BoundingBoxDimension","positionalKeys","isPositionalKey","setAndResetVelocity","to","isNumOrPxType","getPosFromMatrix","matrix","pos","split","getTranslateFromMatrix","pos2","pos3","_bbox","matrix3d","transformKeys","nonTranslationalTransformKeys","transformProps","filter","positionalValues","width","height","top","left","bottom","right","checkAndConvertChangedValueTypes","targetPositionalKeys","Object","keys","removedTransformValues","hasAttemptedToRemoveTransformValues","changedValueTypeKeys","toType","fromType","numKeyframes","invariant","removeNonTranslationalTransform","removedTransforms","convertedTarget","changedKeys","originBbox","elementComputedStyle","display","originComputedStyle","targetBbox","convertChangedValueTypes","unitConversion","some","hasPositionalKey","parseDomVariant","resolveCSSVariables","HTMLElement","htmlConfig","domElement","isTransformProp","defaultType","getDefaultValueType","default","computedStyle","compareDocumentPosition","style","getBoundingBox","transformTemplate","mutableState","vars","transformValues","getOrigin","checkTargetForNewValues","newValueKeys","numNewValues","targetValue","getAnimatableNone","parsed","isProjectionTranform","buildHTMLStyles","renderHTML","htmlVisualElement","svgVisualElement","camelCaseAttributes","camelToDash","getAttribute","_element","buildSVGAttrs","renderSVG","domAnimation","renderer","isSVGComponent","enableHardwareAcceleration","domMax"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38]}