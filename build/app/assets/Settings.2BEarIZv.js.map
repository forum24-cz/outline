{"version":3,"file":"Settings.2BEarIZv.js","sources":["../../../plugins/github/shared/GitHubUtils.ts","../../../plugins/github/client/components/GitHubButton.tsx","../../../plugins/github/client/Settings.tsx"],"sourcesContent":["import queryString from \"query-string\";\nimport env from \"@shared/env\";\nimport { integrationSettingsPath } from \"@shared/utils/routeHelpers\";\n\nexport class GitHubUtils {\n  public static clientId = env.GITHUB_CLIENT_ID;\n\n  static get url() {\n    return integrationSettingsPath(\"github\");\n  }\n\n  /**\n   * @param error\n   * @returns URL to be redirected to upon authorization error from GitHub\n   */\n  public static errorUrl(error: string) {\n    return `${this.url}?error=${error}`;\n  }\n\n  /**\n   * @returns Callback URL configured for GitHub, to which users will be redirected upon authorization\n   */\n  public static callbackUrl(\n    { baseUrl, params }: { baseUrl: string; params?: string } = {\n      baseUrl: `${env.URL}`,\n      params: undefined,\n    }\n  ) {\n    return params\n      ? `${baseUrl}/api/github.callback?${params}`\n      : `${baseUrl}/api/github.callback`;\n  }\n\n  static authUrl(state: string): string {\n    const baseUrl = `https://github.com/apps/${env.GITHUB_APP_NAME}/installations/new`;\n    const params = {\n      client_id: this.clientId,\n      redirect_uri: this.callbackUrl(),\n      state,\n    };\n    return `${baseUrl}?${queryString.stringify(params)}`;\n  }\n\n  static installRequestUrl(): string {\n    return `${this.url}?install_request=true`;\n  }\n\n  public static getColorForStatus(status: string) {\n    switch (status) {\n      case \"open\":\n        return \"#238636\";\n      case \"done\":\n        return \"#a371f7\";\n      case \"closed\":\n        return \"#f85149\";\n      case \"merged\":\n        return \"#8250df\";\n      case \"canceled\":\n      default:\n        return \"#848d97\";\n    }\n  }\n}\n","import * as React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport Button, { type Props } from \"~/components/Button\";\nimport useCurrentTeam from \"~/hooks/useCurrentTeam\";\nimport { redirectTo } from \"~/utils/urls\";\nimport { GitHubUtils } from \"../../shared/GitHubUtils\";\n\nexport function GitHubConnectButton(props: Props<HTMLButtonElement>) {\n  const { t } = useTranslation();\n  const team = useCurrentTeam();\n\n  return (\n    <Button\n      onClick={() => redirectTo(GitHubUtils.authUrl(team.id))}\n      neutral\n      {...props}\n    >\n      {t(\"Connect\")}\n    </Button>\n  );\n}\n","import { observer } from \"mobx-react\";\nimport { PlusIcon } from \"outline-icons\";\nimport * as React from \"react\";\nimport { useTranslation, Trans } from \"react-i18next\";\nimport { IntegrationService } from \"@shared/types\";\nimport { ConnectedButton } from \"~/scenes/Settings/components/ConnectedButton\";\nimport { AvatarSize } from \"~/components/Avatar\";\nimport Flex from \"~/components/Flex\";\nimport Heading from \"~/components/Heading\";\nimport List from \"~/components/List\";\nimport ListItem from \"~/components/List/Item\";\nimport Notice from \"~/components/Notice\";\nimport PlaceholderText from \"~/components/PlaceholderText\";\nimport Scene from \"~/components/Scene\";\nimport TeamLogo from \"~/components/TeamLogo\";\nimport Text from \"~/components/Text\";\nimport Time from \"~/components/Time\";\nimport env from \"~/env\";\nimport useQuery from \"~/hooks/useQuery\";\nimport useStores from \"~/hooks/useStores\";\nimport GitHubIcon from \"./Icon\";\nimport { GitHubConnectButton } from \"./components/GitHubButton\";\n\nfunction GitHub() {\n  const { integrations } = useStores();\n  const { t } = useTranslation();\n  const query = useQuery();\n  const error = query.get(\"error\");\n  const installRequest = query.get(\"install_request\");\n  const appName = env.APP_NAME;\n  const githubAppName = env.GITHUB_APP_NAME;\n\n  React.useEffect(() => {\n    void integrations.fetchAll({\n      service: IntegrationService.GitHub,\n      withRelations: true,\n    });\n  }, [integrations]);\n\n  return (\n    <Scene title=\"GitHub\" icon={<GitHubIcon />}>\n      <Heading>GitHub</Heading>\n\n      {error === \"access_denied\" && (\n        <Notice>\n          <Trans>\n            Whoops, you need to accept the permissions in GitHub to connect{\" \"}\n            {{ appName }} to your workspace. Try again?\n          </Trans>\n        </Notice>\n      )}\n      {error === \"unauthenticated\" && (\n        <Notice>\n          <Trans>\n            Something went wrong while authenticating your request. Please try\n            logging in again.\n          </Trans>\n        </Notice>\n      )}\n      {installRequest === \"true\" && (\n        <Notice>\n          <Trans>\n            The owner of GitHub account has been requested to install the{\" \"}\n            {{ githubAppName }} GitHub app. Once approved, previews will be\n            shown for respective links.\n          </Trans>\n        </Notice>\n      )}\n      {env.GITHUB_CLIENT_ID ? (\n        <>\n          <Text as=\"p\">\n            <Trans>\n              Enable previews of GitHub issues and pull requests in documents by\n              connecting a GitHub organization or specific repositories to{\" \"}\n              {appName}.\n            </Trans>\n          </Text>\n\n          {integrations.github.length ? (\n            <>\n              <Heading as=\"h2\">\n                <Flex justify=\"space-between\" auto>\n                  {t(\"Connected\")}\n                  <GitHubConnectButton icon={<PlusIcon />} />\n                </Flex>\n              </Heading>\n              <List>\n                {integrations.github.map((integration) => {\n                  const githubAccount =\n                    integration.settings?.github?.installation.account;\n                  const integrationCreatedBy = integration.user\n                    ? integration.user.name\n                    : undefined;\n\n                  return (\n                    <ListItem\n                      key={githubAccount?.id}\n                      small\n                      title={githubAccount?.name}\n                      subtitle={\n                        integrationCreatedBy ? (\n                          <>\n                            <Trans>Enabled by {{ integrationCreatedBy }}</Trans>{\" \"}\n                            &middot;{\" \"}\n                            <Time\n                              dateTime={integration.createdAt}\n                              relative={false}\n                              format={{ en_US: \"MMMM d, y\" }}\n                            />\n                          </>\n                        ) : (\n                          <PlaceholderText />\n                        )\n                      }\n                      image={\n                        <TeamLogo\n                          src={githubAccount?.avatarUrl}\n                          size={AvatarSize.Large}\n                        />\n                      }\n                      actions={\n                        <ConnectedButton\n                          onClick={integration.delete}\n                          confirmationMessage={t(\n                            \"Disconnecting will prevent previewing GitHub links from this organization in documents. Are you sure?\"\n                          )}\n                        />\n                      }\n                    />\n                  );\n                })}\n              </List>\n            </>\n          ) : (\n            <p>\n              <GitHubConnectButton icon={<GitHubIcon />} />\n            </p>\n          )}\n        </>\n      ) : (\n        <Notice>\n          <Trans>\n            The GitHub integration is currently disabled. Please set the\n            associated environment variables and restart the server to enable\n            the integration.\n          </Trans>\n        </Notice>\n      )}\n    </Scene>\n  );\n}\n\nexport default observer(GitHub);\n"],"names":["GitHubUtils","url","integrationSettingsPath","errorUrl","error","this","callbackUrl","baseUrl","params","env","URL","undefined","authUrl","state","GITHUB_APP_NAME","client_id","clientId","redirect_uri","queryString","stringify","installRequestUrl","getColorForStatus","status","_GitHubUtils","GITHUB_CLIENT_ID","GitHubConnectButton","props","t","useTranslation","team","useCurrentTeam","Button","onClick","redirectTo","id","neutral","observer","GitHub","integrations","useStores","query","useQuery","get","installRequest","appName","APP_NAME","githubAppName","React","fetchAll","service","IntegrationService","withRelations","Scene","title","icon","jsx","GitHubIcon","children","Heading","Notice","Trans","jsxs","Fragment","Text","as","github","length","Flex","justify","auto","PlusIcon","List","map","integration","githubAccount","settings","installation","account","integrationCreatedBy","user","name","ListItem","small","subtitle","Time","dateTime","createdAt","relative","format","en_US","PlaceholderText","image","TeamLogo","src","avatarUrl","size","AvatarSize","Large","actions","ConnectedButton","delete","confirmationMessage"],"mappings":"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"}