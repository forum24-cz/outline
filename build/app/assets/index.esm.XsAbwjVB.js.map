{"version":3,"file":"index.esm.XsAbwjVB.js","sources":["../../../node_modules/react-hook-form/dist/index.esm.mjs"],"sourcesContent":["import React from 'react';\n\nvar isCheckBoxInput = (element) => element.type === 'checkbox';\n\nvar isDateObject = (value) => value instanceof Date;\n\nvar isNullOrUndefined = (value) => value == null;\n\nconst isObjectType = (value) => typeof value === 'object';\nvar isObject = (value) => !isNullOrUndefined(value) &&\n    !Array.isArray(value) &&\n    isObjectType(value) &&\n    !isDateObject(value);\n\nvar getEventValue = (event) => isObject(event) && event.target\n    ? isCheckBoxInput(event.target)\n        ? event.target.checked\n        : event.target.value\n    : event;\n\nvar getNodeParentName = (name) => name.substring(0, name.search(/\\.\\d+(\\.|$)/)) || name;\n\nvar isNameInFieldArray = (names, name) => names.has(getNodeParentName(name));\n\nvar isPlainObject = (tempObject) => {\n    const prototypeCopy = tempObject.constructor && tempObject.constructor.prototype;\n    return (isObject(prototypeCopy) && prototypeCopy.hasOwnProperty('isPrototypeOf'));\n};\n\nvar isWeb = typeof window !== 'undefined' &&\n    typeof window.HTMLElement !== 'undefined' &&\n    typeof document !== 'undefined';\n\nfunction cloneObject(data) {\n    let copy;\n    const isArray = Array.isArray(data);\n    const isFileListInstance = typeof FileList !== 'undefined' ? data instanceof FileList : false;\n    if (data instanceof Date) {\n        copy = new Date(data);\n    }\n    else if (data instanceof Set) {\n        copy = new Set(data);\n    }\n    else if (!(isWeb && (data instanceof Blob || isFileListInstance)) &&\n        (isArray || isObject(data))) {\n        copy = isArray ? [] : {};\n        if (!isArray && !isPlainObject(data)) {\n            copy = data;\n        }\n        else {\n            for (const key in data) {\n                if (data.hasOwnProperty(key)) {\n                    copy[key] = cloneObject(data[key]);\n                }\n            }\n        }\n    }\n    else {\n        return data;\n    }\n    return copy;\n}\n\nvar compact = (value) => Array.isArray(value) ? value.filter(Boolean) : [];\n\nvar isUndefined = (val) => val === undefined;\n\nvar get = (object, path, defaultValue) => {\n    if (!path || !isObject(object)) {\n        return defaultValue;\n    }\n    const result = compact(path.split(/[,[\\].]+?/)).reduce((result, key) => isNullOrUndefined(result) ? result : result[key], object);\n    return isUndefined(result) || result === object\n        ? isUndefined(object[path])\n            ? defaultValue\n            : object[path]\n        : result;\n};\n\nvar isBoolean = (value) => typeof value === 'boolean';\n\nvar isKey = (value) => /^\\w*$/.test(value);\n\nvar stringToPath = (input) => compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n\nvar set = (object, path, value) => {\n    let index = -1;\n    const tempPath = isKey(path) ? [path] : stringToPath(path);\n    const length = tempPath.length;\n    const lastIndex = length - 1;\n    while (++index < length) {\n        const key = tempPath[index];\n        let newValue = value;\n        if (index !== lastIndex) {\n            const objValue = object[key];\n            newValue =\n                isObject(objValue) || Array.isArray(objValue)\n                    ? objValue\n                    : !isNaN(+tempPath[index + 1])\n                        ? []\n                        : {};\n        }\n        if (key === '__proto__' || key === 'constructor' || key === 'prototype') {\n            return;\n        }\n        object[key] = newValue;\n        object = object[key];\n    }\n    return object;\n};\n\nconst EVENTS = {\n    BLUR: 'blur',\n    FOCUS_OUT: 'focusout',\n    CHANGE: 'change',\n};\nconst VALIDATION_MODE = {\n    onBlur: 'onBlur',\n    onChange: 'onChange',\n    onSubmit: 'onSubmit',\n    onTouched: 'onTouched',\n    all: 'all',\n};\nconst INPUT_VALIDATION_RULES = {\n    max: 'max',\n    min: 'min',\n    maxLength: 'maxLength',\n    minLength: 'minLength',\n    pattern: 'pattern',\n    required: 'required',\n    validate: 'validate',\n};\n\nconst HookFormContext = React.createContext(null);\n/**\n * This custom hook allows you to access the form context. useFormContext is intended to be used in deeply nested structures, where it would become inconvenient to pass the context as a prop. To be used with {@link FormProvider}.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @returns return all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nconst useFormContext = () => React.useContext(HookFormContext);\n/**\n * A provider component that propagates the `useForm` methods to all children components via [React Context](https://reactjs.org/docs/context.html) API. To be used with {@link useFormContext}.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @param props - all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nconst FormProvider = (props) => {\n    const { children, ...data } = props;\n    return (React.createElement(HookFormContext.Provider, { value: data }, children));\n};\n\nvar getProxyFormState = (formState, control, localProxyFormState, isRoot = true) => {\n    const result = {\n        defaultValues: control._defaultValues,\n    };\n    for (const key in formState) {\n        Object.defineProperty(result, key, {\n            get: () => {\n                const _key = key;\n                if (control._proxyFormState[_key] !== VALIDATION_MODE.all) {\n                    control._proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;\n                }\n                localProxyFormState && (localProxyFormState[_key] = true);\n                return formState[_key];\n            },\n        });\n    }\n    return result;\n};\n\nvar isEmptyObject = (value) => isObject(value) && !Object.keys(value).length;\n\nvar shouldRenderFormState = (formStateData, _proxyFormState, updateFormState, isRoot) => {\n    updateFormState(formStateData);\n    const { name, ...formState } = formStateData;\n    return (isEmptyObject(formState) ||\n        Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n        Object.keys(formState).find((key) => _proxyFormState[key] ===\n            (!isRoot || VALIDATION_MODE.all)));\n};\n\nvar convertToArrayPayload = (value) => (Array.isArray(value) ? value : [value]);\n\nvar shouldSubscribeByName = (name, signalName, exact) => !name ||\n    !signalName ||\n    name === signalName ||\n    convertToArrayPayload(name).some((currentName) => currentName &&\n        (exact\n            ? currentName === signalName\n            : currentName.startsWith(signalName) ||\n                signalName.startsWith(currentName)));\n\nfunction useSubscribe(props) {\n    const _props = React.useRef(props);\n    _props.current = props;\n    React.useEffect(() => {\n        const subscription = !props.disabled &&\n            _props.current.subject &&\n            _props.current.subject.subscribe({\n                next: _props.current.next,\n            });\n        return () => {\n            subscription && subscription.unsubscribe();\n        };\n    }, [props.disabled]);\n}\n\n/**\n * This custom hook allows you to subscribe to each form state, and isolate the re-render at the custom hook level. It has its scope in terms of form state subscription, so it would not affect other useFormState and useForm. Using this hook can reduce the re-render impact on large and complex form application.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformstate) • [Demo](https://codesandbox.io/s/useformstate-75xly)\n *\n * @param props - include options on specify fields to subscribe. {@link UseFormStateReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, control } = useForm({\n *     defaultValues: {\n *     firstName: \"firstName\"\n *   }});\n *   const { dirtyFields } = useFormState({\n *     control\n *   });\n *   const onSubmit = (data) => console.log(data);\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input {...register(\"firstName\")} placeholder=\"First Name\" />\n *       {dirtyFields.firstName && <p>Field is dirty.</p>}\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useFormState(props) {\n    const methods = useFormContext();\n    const { control = methods.control, disabled, name, exact } = props || {};\n    const [formState, updateFormState] = React.useState(control._formState);\n    const _mounted = React.useRef(true);\n    const _localProxyFormState = React.useRef({\n        isDirty: false,\n        isLoading: false,\n        dirtyFields: false,\n        touchedFields: false,\n        validatingFields: false,\n        isValidating: false,\n        isValid: false,\n        errors: false,\n    });\n    const _name = React.useRef(name);\n    _name.current = name;\n    useSubscribe({\n        disabled,\n        next: (value) => _mounted.current &&\n            shouldSubscribeByName(_name.current, value.name, exact) &&\n            shouldRenderFormState(value, _localProxyFormState.current, control._updateFormState) &&\n            updateFormState({\n                ...control._formState,\n                ...value,\n            }),\n        subject: control._subjects.state,\n    });\n    React.useEffect(() => {\n        _mounted.current = true;\n        _localProxyFormState.current.isValid && control._updateValid(true);\n        return () => {\n            _mounted.current = false;\n        };\n    }, [control]);\n    return React.useMemo(() => getProxyFormState(formState, control, _localProxyFormState.current, false), [formState, control]);\n}\n\nvar isString = (value) => typeof value === 'string';\n\nvar generateWatchOutput = (names, _names, formValues, isGlobal, defaultValue) => {\n    if (isString(names)) {\n        isGlobal && _names.watch.add(names);\n        return get(formValues, names, defaultValue);\n    }\n    if (Array.isArray(names)) {\n        return names.map((fieldName) => (isGlobal && _names.watch.add(fieldName), get(formValues, fieldName)));\n    }\n    isGlobal && (_names.watchAll = true);\n    return formValues;\n};\n\n/**\n * Custom hook to subscribe to field change and isolate re-rendering at the component level.\n *\n * @remarks\n *\n * [API](https://react-hook-form.com/docs/usewatch) • [Demo](https://codesandbox.io/s/react-hook-form-v7-ts-usewatch-h9i5e)\n *\n * @example\n * ```tsx\n * const { control } = useForm();\n * const values = useWatch({\n *   name: \"fieldName\"\n *   control,\n * })\n * ```\n */\nfunction useWatch(props) {\n    const methods = useFormContext();\n    const { control = methods.control, name, defaultValue, disabled, exact, } = props || {};\n    const _name = React.useRef(name);\n    _name.current = name;\n    useSubscribe({\n        disabled,\n        subject: control._subjects.values,\n        next: (formState) => {\n            if (shouldSubscribeByName(_name.current, formState.name, exact)) {\n                updateValue(cloneObject(generateWatchOutput(_name.current, control._names, formState.values || control._formValues, false, defaultValue)));\n            }\n        },\n    });\n    const [value, updateValue] = React.useState(control._getWatch(name, defaultValue));\n    React.useEffect(() => control._removeUnmounted());\n    return value;\n}\n\n/**\n * Custom hook to work with controlled component, this function provide you with both form and field level state. Re-render is isolated at the hook level.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usecontroller) • [Demo](https://codesandbox.io/s/usecontroller-0o8px)\n *\n * @param props - the path name to the form field value, and validation rules.\n *\n * @returns field properties, field and form state. {@link UseControllerReturn}\n *\n * @example\n * ```tsx\n * function Input(props) {\n *   const { field, fieldState, formState } = useController(props);\n *   return (\n *     <div>\n *       <input {...field} placeholder={props.name} />\n *       <p>{fieldState.isTouched && \"Touched\"}</p>\n *       <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\n *     </div>\n *   );\n * }\n * ```\n */\nfunction useController(props) {\n    const methods = useFormContext();\n    const { name, disabled, control = methods.control, shouldUnregister } = props;\n    const isArrayField = isNameInFieldArray(control._names.array, name);\n    const value = useWatch({\n        control,\n        name,\n        defaultValue: get(control._formValues, name, get(control._defaultValues, name, props.defaultValue)),\n        exact: true,\n    });\n    const formState = useFormState({\n        control,\n        name,\n        exact: true,\n    });\n    const _registerProps = React.useRef(control.register(name, {\n        ...props.rules,\n        value,\n        ...(isBoolean(props.disabled) ? { disabled: props.disabled } : {}),\n    }));\n    const fieldState = React.useMemo(() => Object.defineProperties({}, {\n        invalid: {\n            enumerable: true,\n            get: () => !!get(formState.errors, name),\n        },\n        isDirty: {\n            enumerable: true,\n            get: () => !!get(formState.dirtyFields, name),\n        },\n        isTouched: {\n            enumerable: true,\n            get: () => !!get(formState.touchedFields, name),\n        },\n        isValidating: {\n            enumerable: true,\n            get: () => !!get(formState.validatingFields, name),\n        },\n        error: {\n            enumerable: true,\n            get: () => get(formState.errors, name),\n        },\n    }), [formState, name]);\n    const field = React.useMemo(() => ({\n        name,\n        value,\n        ...(isBoolean(disabled) || formState.disabled\n            ? { disabled: formState.disabled || disabled }\n            : {}),\n        onChange: (event) => _registerProps.current.onChange({\n            target: {\n                value: getEventValue(event),\n                name: name,\n            },\n            type: EVENTS.CHANGE,\n        }),\n        onBlur: () => _registerProps.current.onBlur({\n            target: {\n                value: get(control._formValues, name),\n                name: name,\n            },\n            type: EVENTS.BLUR,\n        }),\n        ref: (elm) => {\n            const field = get(control._fields, name);\n            if (field && elm) {\n                field._f.ref = {\n                    focus: () => elm.focus(),\n                    select: () => elm.select(),\n                    setCustomValidity: (message) => elm.setCustomValidity(message),\n                    reportValidity: () => elm.reportValidity(),\n                };\n            }\n        },\n    }), [\n        name,\n        control._formValues,\n        disabled,\n        formState.disabled,\n        value,\n        control._fields,\n    ]);\n    React.useEffect(() => {\n        const _shouldUnregisterField = control._options.shouldUnregister || shouldUnregister;\n        const updateMounted = (name, value) => {\n            const field = get(control._fields, name);\n            if (field && field._f) {\n                field._f.mount = value;\n            }\n        };\n        updateMounted(name, true);\n        if (_shouldUnregisterField) {\n            const value = cloneObject(get(control._options.defaultValues, name));\n            set(control._defaultValues, name, value);\n            if (isUndefined(get(control._formValues, name))) {\n                set(control._formValues, name, value);\n            }\n        }\n        !isArrayField && control.register(name);\n        return () => {\n            (isArrayField\n                ? _shouldUnregisterField && !control._state.action\n                : _shouldUnregisterField)\n                ? control.unregister(name)\n                : updateMounted(name, false);\n        };\n    }, [name, control, isArrayField, shouldUnregister]);\n    React.useEffect(() => {\n        control._updateDisabledField({\n            disabled,\n            fields: control._fields,\n            name,\n        });\n    }, [disabled, name, control]);\n    return React.useMemo(() => ({\n        field,\n        formState,\n        fieldState,\n    }), [field, formState, fieldState]);\n}\n\n/**\n * Component based on `useController` hook to work with controlled component.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usecontroller/controller) • [Demo](https://codesandbox.io/s/react-hook-form-v6-controller-ts-jwyzw) • [Video](https://www.youtube.com/watch?v=N2UNk_UCVyA)\n *\n * @param props - the path name to the form field value, and validation rules.\n *\n * @returns provide field handler functions, field and form state.\n *\n * @example\n * ```tsx\n * function App() {\n *   const { control } = useForm<FormValues>({\n *     defaultValues: {\n *       test: \"\"\n *     }\n *   });\n *\n *   return (\n *     <form>\n *       <Controller\n *         control={control}\n *         name=\"test\"\n *         render={({ field: { onChange, onBlur, value, ref }, formState, fieldState }) => (\n *           <>\n *             <input\n *               onChange={onChange} // send value to hook form\n *               onBlur={onBlur} // notify when input is touched\n *               value={value} // return updated value\n *               ref={ref} // set ref for focus management\n *             />\n *             <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\n *             <p>{fieldState.isTouched ? \"touched\" : \"\"}</p>\n *           </>\n *         )}\n *       />\n *     </form>\n *   );\n * }\n * ```\n */\nconst Controller = (props) => props.render(useController(props));\n\nconst flatten = (obj) => {\n    const output = {};\n    for (const key of Object.keys(obj)) {\n        if (isObjectType(obj[key]) && obj[key] !== null) {\n            const nested = flatten(obj[key]);\n            for (const nestedKey of Object.keys(nested)) {\n                output[`${key}.${nestedKey}`] = nested[nestedKey];\n            }\n        }\n        else {\n            output[key] = obj[key];\n        }\n    }\n    return output;\n};\n\nconst POST_REQUEST = 'post';\n/**\n * Form component to manage submission.\n *\n * @param props - to setup submission detail. {@link FormProps}\n *\n * @returns form component or headless render prop.\n *\n * @example\n * ```tsx\n * function App() {\n *   const { control, formState: { errors } } = useForm();\n *\n *   return (\n *     <Form action=\"/api\" control={control}>\n *       <input {...register(\"name\")} />\n *       <p>{errors?.root?.server && 'Server error'}</p>\n *       <button>Submit</button>\n *     </Form>\n *   );\n * }\n * ```\n */\nfunction Form(props) {\n    const methods = useFormContext();\n    const [mounted, setMounted] = React.useState(false);\n    const { control = methods.control, onSubmit, children, action, method = POST_REQUEST, headers, encType, onError, render, onSuccess, validateStatus, ...rest } = props;\n    const submit = async (event) => {\n        let hasError = false;\n        let type = '';\n        await control.handleSubmit(async (data) => {\n            const formData = new FormData();\n            let formDataJson = '';\n            try {\n                formDataJson = JSON.stringify(data);\n            }\n            catch (_a) { }\n            const flattenFormValues = flatten(control._formValues);\n            for (const key in flattenFormValues) {\n                formData.append(key, flattenFormValues[key]);\n            }\n            if (onSubmit) {\n                await onSubmit({\n                    data,\n                    event,\n                    method,\n                    formData,\n                    formDataJson,\n                });\n            }\n            if (action) {\n                try {\n                    const shouldStringifySubmissionData = [\n                        headers && headers['Content-Type'],\n                        encType,\n                    ].some((value) => value && value.includes('json'));\n                    const response = await fetch(String(action), {\n                        method,\n                        headers: {\n                            ...headers,\n                            ...(encType ? { 'Content-Type': encType } : {}),\n                        },\n                        body: shouldStringifySubmissionData ? formDataJson : formData,\n                    });\n                    if (response &&\n                        (validateStatus\n                            ? !validateStatus(response.status)\n                            : response.status < 200 || response.status >= 300)) {\n                        hasError = true;\n                        onError && onError({ response });\n                        type = String(response.status);\n                    }\n                    else {\n                        onSuccess && onSuccess({ response });\n                    }\n                }\n                catch (error) {\n                    hasError = true;\n                    onError && onError({ error });\n                }\n            }\n        })(event);\n        if (hasError && props.control) {\n            props.control._subjects.state.next({\n                isSubmitSuccessful: false,\n            });\n            props.control.setError('root.server', {\n                type,\n            });\n        }\n    };\n    React.useEffect(() => {\n        setMounted(true);\n    }, []);\n    return render ? (React.createElement(React.Fragment, null, render({\n        submit,\n    }))) : (React.createElement(\"form\", { noValidate: mounted, action: action, method: method, encType: encType, onSubmit: submit, ...rest }, children));\n}\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n            ...(errors[name] && errors[name].types ? errors[name].types : {}),\n            [type]: message || true,\n        },\n    }\n    : {};\n\nvar generateId = () => {\n    const d = typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n        const r = (Math.random() * 16 + d) % 16 | 0;\n        return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n    });\n};\n\nvar getFocusFieldName = (name, index, options = {}) => options.shouldFocus || isUndefined(options.shouldFocus)\n    ? options.focusName ||\n        `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.`\n    : '';\n\nvar getValidationModes = (mode) => ({\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\n    isOnChange: mode === VALIDATION_MODE.onChange,\n    isOnAll: mode === VALIDATION_MODE.all,\n    isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n\nvar isWatched = (name, _names, isBlurEvent) => !isBlurEvent &&\n    (_names.watchAll ||\n        _names.watch.has(name) ||\n        [..._names.watch].some((watchName) => name.startsWith(watchName) &&\n            /^\\.\\w+/.test(name.slice(watchName.length))));\n\nconst iterateFieldsByAction = (fields, action, fieldsNames, abortEarly) => {\n    for (const key of fieldsNames || Object.keys(fields)) {\n        const field = get(fields, key);\n        if (field) {\n            const { _f, ...currentField } = field;\n            if (_f) {\n                if (_f.refs && _f.refs[0] && action(_f.refs[0], key) && !abortEarly) {\n                    return true;\n                }\n                else if (_f.ref && action(_f.ref, _f.name) && !abortEarly) {\n                    return true;\n                }\n                else {\n                    if (iterateFieldsByAction(currentField, action)) {\n                        break;\n                    }\n                }\n            }\n            else if (isObject(currentField)) {\n                if (iterateFieldsByAction(currentField, action)) {\n                    break;\n                }\n            }\n        }\n    }\n    return;\n};\n\nvar updateFieldArrayRootError = (errors, error, name) => {\n    const fieldArrayErrors = convertToArrayPayload(get(errors, name));\n    set(fieldArrayErrors, 'root', error[name]);\n    set(errors, name, fieldArrayErrors);\n    return errors;\n};\n\nvar isFileInput = (element) => element.type === 'file';\n\nvar isFunction = (value) => typeof value === 'function';\n\nvar isHTMLElement = (value) => {\n    if (!isWeb) {\n        return false;\n    }\n    const owner = value ? value.ownerDocument : 0;\n    return (value instanceof\n        (owner && owner.defaultView ? owner.defaultView.HTMLElement : HTMLElement));\n};\n\nvar isMessage = (value) => isString(value);\n\nvar isRadioInput = (element) => element.type === 'radio';\n\nvar isRegex = (value) => value instanceof RegExp;\n\nconst defaultResult = {\n    value: false,\n    isValid: false,\n};\nconst validResult = { value: true, isValid: true };\nvar getCheckboxValue = (options) => {\n    if (Array.isArray(options)) {\n        if (options.length > 1) {\n            const values = options\n                .filter((option) => option && option.checked && !option.disabled)\n                .map((option) => option.value);\n            return { value: values, isValid: !!values.length };\n        }\n        return options[0].checked && !options[0].disabled\n            ? // @ts-expect-error expected to work in the browser\n                options[0].attributes && !isUndefined(options[0].attributes.value)\n                    ? isUndefined(options[0].value) || options[0].value === ''\n                        ? validResult\n                        : { value: options[0].value, isValid: true }\n                    : validResult\n            : defaultResult;\n    }\n    return defaultResult;\n};\n\nconst defaultReturn = {\n    isValid: false,\n    value: null,\n};\nvar getRadioValue = (options) => Array.isArray(options)\n    ? options.reduce((previous, option) => option && option.checked && !option.disabled\n        ? {\n            isValid: true,\n            value: option.value,\n        }\n        : previous, defaultReturn)\n    : defaultReturn;\n\nfunction getValidateError(result, ref, type = 'validate') {\n    if (isMessage(result) ||\n        (Array.isArray(result) && result.every(isMessage)) ||\n        (isBoolean(result) && !result)) {\n        return {\n            type,\n            message: isMessage(result) ? result : '',\n            ref,\n        };\n    }\n}\n\nvar getValueAndMessage = (validationData) => isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n    };\n\nvar validateField = async (field, disabledFieldNames, formValues, validateAllFieldCriteria, shouldUseNativeValidation, isFieldArray) => {\n    const { ref, refs, required, maxLength, minLength, min, max, pattern, validate, name, valueAsNumber, mount, } = field._f;\n    const inputValue = get(formValues, name);\n    if (!mount || disabledFieldNames.has(name)) {\n        return {};\n    }\n    const inputRef = refs ? refs[0] : ref;\n    const setCustomValidity = (message) => {\n        if (shouldUseNativeValidation && inputRef.reportValidity) {\n            inputRef.setCustomValidity(isBoolean(message) ? '' : message || '');\n            inputRef.reportValidity();\n        }\n    };\n    const error = {};\n    const isRadio = isRadioInput(ref);\n    const isCheckBox = isCheckBoxInput(ref);\n    const isRadioOrCheckbox = isRadio || isCheckBox;\n    const isEmpty = ((valueAsNumber || isFileInput(ref)) &&\n        isUndefined(ref.value) &&\n        isUndefined(inputValue)) ||\n        (isHTMLElement(ref) && ref.value === '') ||\n        inputValue === '' ||\n        (Array.isArray(inputValue) && !inputValue.length);\n    const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\n    const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\n        const message = exceedMax ? maxLengthMessage : minLengthMessage;\n        error[name] = {\n            type: exceedMax ? maxType : minType,\n            message,\n            ref,\n            ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n        };\n    };\n    if (isFieldArray\n        ? !Array.isArray(inputValue) || !inputValue.length\n        : required &&\n            ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n                (isBoolean(inputValue) && !inputValue) ||\n                (isCheckBox && !getCheckboxValue(refs).isValid) ||\n                (isRadio && !getRadioValue(refs).isValid))) {\n        const { value, message } = isMessage(required)\n            ? { value: !!required, message: required }\n            : getValueAndMessage(required);\n        if (value) {\n            error[name] = {\n                type: INPUT_VALIDATION_RULES.required,\n                message,\n                ref: inputRef,\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n            };\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(message);\n                return error;\n            }\n        }\n    }\n    if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n        let exceedMax;\n        let exceedMin;\n        const maxOutput = getValueAndMessage(max);\n        const minOutput = getValueAndMessage(min);\n        if (!isNullOrUndefined(inputValue) && !isNaN(inputValue)) {\n            const valueNumber = ref.valueAsNumber ||\n                (inputValue ? +inputValue : inputValue);\n            if (!isNullOrUndefined(maxOutput.value)) {\n                exceedMax = valueNumber > maxOutput.value;\n            }\n            if (!isNullOrUndefined(minOutput.value)) {\n                exceedMin = valueNumber < minOutput.value;\n            }\n        }\n        else {\n            const valueDate = ref.valueAsDate || new Date(inputValue);\n            const convertTimeToDate = (time) => new Date(new Date().toDateString() + ' ' + time);\n            const isTime = ref.type == 'time';\n            const isWeek = ref.type == 'week';\n            if (isString(maxOutput.value) && inputValue) {\n                exceedMax = isTime\n                    ? convertTimeToDate(inputValue) > convertTimeToDate(maxOutput.value)\n                    : isWeek\n                        ? inputValue > maxOutput.value\n                        : valueDate > new Date(maxOutput.value);\n            }\n            if (isString(minOutput.value) && inputValue) {\n                exceedMin = isTime\n                    ? convertTimeToDate(inputValue) < convertTimeToDate(minOutput.value)\n                    : isWeek\n                        ? inputValue < minOutput.value\n                        : valueDate < new Date(minOutput.value);\n            }\n        }\n        if (exceedMax || exceedMin) {\n            getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(error[name].message);\n                return error;\n            }\n        }\n    }\n    if ((maxLength || minLength) &&\n        !isEmpty &&\n        (isString(inputValue) || (isFieldArray && Array.isArray(inputValue)))) {\n        const maxLengthOutput = getValueAndMessage(maxLength);\n        const minLengthOutput = getValueAndMessage(minLength);\n        const exceedMax = !isNullOrUndefined(maxLengthOutput.value) &&\n            inputValue.length > +maxLengthOutput.value;\n        const exceedMin = !isNullOrUndefined(minLengthOutput.value) &&\n            inputValue.length < +minLengthOutput.value;\n        if (exceedMax || exceedMin) {\n            getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(error[name].message);\n                return error;\n            }\n        }\n    }\n    if (pattern && !isEmpty && isString(inputValue)) {\n        const { value: patternValue, message } = getValueAndMessage(pattern);\n        if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n            error[name] = {\n                type: INPUT_VALIDATION_RULES.pattern,\n                message,\n                ref,\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n            };\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(message);\n                return error;\n            }\n        }\n    }\n    if (validate) {\n        if (isFunction(validate)) {\n            const result = await validate(inputValue, formValues);\n            const validateError = getValidateError(result, inputRef);\n            if (validateError) {\n                error[name] = {\n                    ...validateError,\n                    ...appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message),\n                };\n                if (!validateAllFieldCriteria) {\n                    setCustomValidity(validateError.message);\n                    return error;\n                }\n            }\n        }\n        else if (isObject(validate)) {\n            let validationResult = {};\n            for (const key in validate) {\n                if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n                    break;\n                }\n                const validateError = getValidateError(await validate[key](inputValue, formValues), inputRef, key);\n                if (validateError) {\n                    validationResult = {\n                        ...validateError,\n                        ...appendErrorsCurry(key, validateError.message),\n                    };\n                    setCustomValidity(validateError.message);\n                    if (validateAllFieldCriteria) {\n                        error[name] = validationResult;\n                    }\n                }\n            }\n            if (!isEmptyObject(validationResult)) {\n                error[name] = {\n                    ref: inputRef,\n                    ...validationResult,\n                };\n                if (!validateAllFieldCriteria) {\n                    return error;\n                }\n            }\n        }\n    }\n    setCustomValidity(true);\n    return error;\n};\n\nvar appendAt = (data, value) => [\n    ...data,\n    ...convertToArrayPayload(value),\n];\n\nvar fillEmptyArray = (value) => Array.isArray(value) ? value.map(() => undefined) : undefined;\n\nfunction insert(data, index, value) {\n    return [\n        ...data.slice(0, index),\n        ...convertToArrayPayload(value),\n        ...data.slice(index),\n    ];\n}\n\nvar moveArrayAt = (data, from, to) => {\n    if (!Array.isArray(data)) {\n        return [];\n    }\n    if (isUndefined(data[to])) {\n        data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n};\n\nvar prependAt = (data, value) => [\n    ...convertToArrayPayload(value),\n    ...convertToArrayPayload(data),\n];\n\nfunction removeAtIndexes(data, indexes) {\n    let i = 0;\n    const temp = [...data];\n    for (const index of indexes) {\n        temp.splice(index - i, 1);\n        i++;\n    }\n    return compact(temp).length ? temp : [];\n}\nvar removeArrayAt = (data, index) => isUndefined(index)\n    ? []\n    : removeAtIndexes(data, convertToArrayPayload(index).sort((a, b) => a - b));\n\nvar swapArrayAt = (data, indexA, indexB) => {\n    [data[indexA], data[indexB]] = [data[indexB], data[indexA]];\n};\n\nfunction baseGet(object, updatePath) {\n    const length = updatePath.slice(0, -1).length;\n    let index = 0;\n    while (index < length) {\n        object = isUndefined(object) ? index++ : object[updatePath[index++]];\n    }\n    return object;\n}\nfunction isEmptyArray(obj) {\n    for (const key in obj) {\n        if (obj.hasOwnProperty(key) && !isUndefined(obj[key])) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction unset(object, path) {\n    const paths = Array.isArray(path)\n        ? path\n        : isKey(path)\n            ? [path]\n            : stringToPath(path);\n    const childObject = paths.length === 1 ? object : baseGet(object, paths);\n    const index = paths.length - 1;\n    const key = paths[index];\n    if (childObject) {\n        delete childObject[key];\n    }\n    if (index !== 0 &&\n        ((isObject(childObject) && isEmptyObject(childObject)) ||\n            (Array.isArray(childObject) && isEmptyArray(childObject)))) {\n        unset(object, paths.slice(0, -1));\n    }\n    return object;\n}\n\nvar updateAt = (fieldValues, index, value) => {\n    fieldValues[index] = value;\n    return fieldValues;\n};\n\n/**\n * A custom hook that exposes convenient methods to perform operations with a list of dynamic inputs that need to be appended, updated, removed etc. • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn) • [Video](https://youtu.be/4MrbfGSFY2A)\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usefieldarray) • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn)\n *\n * @param props - useFieldArray props\n *\n * @returns methods - functions to manipulate with the Field Arrays (dynamic inputs) {@link UseFieldArrayReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, control, handleSubmit, reset, trigger, setError } = useForm({\n *     defaultValues: {\n *       test: []\n *     }\n *   });\n *   const { fields, append } = useFieldArray({\n *     control,\n *     name: \"test\"\n *   });\n *\n *   return (\n *     <form onSubmit={handleSubmit(data => console.log(data))}>\n *       {fields.map((item, index) => (\n *          <input key={item.id} {...register(`test.${index}.firstName`)}  />\n *       ))}\n *       <button type=\"button\" onClick={() => append({ firstName: \"bill\" })}>\n *         append\n *       </button>\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useFieldArray(props) {\n    const methods = useFormContext();\n    const { control = methods.control, name, keyName = 'id', shouldUnregister, rules, } = props;\n    const [fields, setFields] = React.useState(control._getFieldArray(name));\n    const ids = React.useRef(control._getFieldArray(name).map(generateId));\n    const _fieldIds = React.useRef(fields);\n    const _name = React.useRef(name);\n    const _actioned = React.useRef(false);\n    _name.current = name;\n    _fieldIds.current = fields;\n    control._names.array.add(name);\n    rules &&\n        control.register(name, rules);\n    useSubscribe({\n        next: ({ values, name: fieldArrayName, }) => {\n            if (fieldArrayName === _name.current || !fieldArrayName) {\n                const fieldValues = get(values, _name.current);\n                if (Array.isArray(fieldValues)) {\n                    setFields(fieldValues);\n                    ids.current = fieldValues.map(generateId);\n                }\n            }\n        },\n        subject: control._subjects.array,\n    });\n    const updateValues = React.useCallback((updatedFieldArrayValues) => {\n        _actioned.current = true;\n        control._updateFieldArray(name, updatedFieldArrayValues);\n    }, [control, name]);\n    const append = (value, options) => {\n        const appendValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = appendAt(control._getFieldArray(name), appendValue);\n        control._names.focus = getFocusFieldName(name, updatedFieldArrayValues.length - 1, options);\n        ids.current = appendAt(ids.current, appendValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, appendAt, {\n            argA: fillEmptyArray(value),\n        });\n    };\n    const prepend = (value, options) => {\n        const prependValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = prependAt(control._getFieldArray(name), prependValue);\n        control._names.focus = getFocusFieldName(name, 0, options);\n        ids.current = prependAt(ids.current, prependValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, prependAt, {\n            argA: fillEmptyArray(value),\n        });\n    };\n    const remove = (index) => {\n        const updatedFieldArrayValues = removeArrayAt(control._getFieldArray(name), index);\n        ids.current = removeArrayAt(ids.current, index);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        !Array.isArray(get(control._fields, name)) &&\n            set(control._fields, name, undefined);\n        control._updateFieldArray(name, updatedFieldArrayValues, removeArrayAt, {\n            argA: index,\n        });\n    };\n    const insert$1 = (index, value, options) => {\n        const insertValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = insert(control._getFieldArray(name), index, insertValue);\n        control._names.focus = getFocusFieldName(name, index, options);\n        ids.current = insert(ids.current, index, insertValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, insert, {\n            argA: index,\n            argB: fillEmptyArray(value),\n        });\n    };\n    const swap = (indexA, indexB) => {\n        const updatedFieldArrayValues = control._getFieldArray(name);\n        swapArrayAt(updatedFieldArrayValues, indexA, indexB);\n        swapArrayAt(ids.current, indexA, indexB);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, swapArrayAt, {\n            argA: indexA,\n            argB: indexB,\n        }, false);\n    };\n    const move = (from, to) => {\n        const updatedFieldArrayValues = control._getFieldArray(name);\n        moveArrayAt(updatedFieldArrayValues, from, to);\n        moveArrayAt(ids.current, from, to);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, moveArrayAt, {\n            argA: from,\n            argB: to,\n        }, false);\n    };\n    const update = (index, value) => {\n        const updateValue = cloneObject(value);\n        const updatedFieldArrayValues = updateAt(control._getFieldArray(name), index, updateValue);\n        ids.current = [...updatedFieldArrayValues].map((item, i) => !item || i === index ? generateId() : ids.current[i]);\n        updateValues(updatedFieldArrayValues);\n        setFields([...updatedFieldArrayValues]);\n        control._updateFieldArray(name, updatedFieldArrayValues, updateAt, {\n            argA: index,\n            argB: updateValue,\n        }, true, false);\n    };\n    const replace = (value) => {\n        const updatedFieldArrayValues = convertToArrayPayload(cloneObject(value));\n        ids.current = updatedFieldArrayValues.map(generateId);\n        updateValues([...updatedFieldArrayValues]);\n        setFields([...updatedFieldArrayValues]);\n        control._updateFieldArray(name, [...updatedFieldArrayValues], (data) => data, {}, true, false);\n    };\n    React.useEffect(() => {\n        control._state.action = false;\n        isWatched(name, control._names) &&\n            control._subjects.state.next({\n                ...control._formState,\n            });\n        if (_actioned.current &&\n            (!getValidationModes(control._options.mode).isOnSubmit ||\n                control._formState.isSubmitted)) {\n            if (control._options.resolver) {\n                control._executeSchema([name]).then((result) => {\n                    const error = get(result.errors, name);\n                    const existingError = get(control._formState.errors, name);\n                    if (existingError\n                        ? (!error && existingError.type) ||\n                            (error &&\n                                (existingError.type !== error.type ||\n                                    existingError.message !== error.message))\n                        : error && error.type) {\n                        error\n                            ? set(control._formState.errors, name, error)\n                            : unset(control._formState.errors, name);\n                        control._subjects.state.next({\n                            errors: control._formState.errors,\n                        });\n                    }\n                });\n            }\n            else {\n                const field = get(control._fields, name);\n                if (field &&\n                    field._f &&\n                    !(getValidationModes(control._options.reValidateMode).isOnSubmit &&\n                        getValidationModes(control._options.mode).isOnSubmit)) {\n                    validateField(field, control._names.disabled, control._formValues, control._options.criteriaMode === VALIDATION_MODE.all, control._options.shouldUseNativeValidation, true).then((error) => !isEmptyObject(error) &&\n                        control._subjects.state.next({\n                            errors: updateFieldArrayRootError(control._formState.errors, error, name),\n                        }));\n                }\n            }\n        }\n        control._subjects.values.next({\n            name,\n            values: { ...control._formValues },\n        });\n        control._names.focus &&\n            iterateFieldsByAction(control._fields, (ref, key) => {\n                if (control._names.focus &&\n                    key.startsWith(control._names.focus) &&\n                    ref.focus) {\n                    ref.focus();\n                    return 1;\n                }\n                return;\n            });\n        control._names.focus = '';\n        control._updateValid();\n        _actioned.current = false;\n    }, [fields, name, control]);\n    React.useEffect(() => {\n        !get(control._formValues, name) && control._updateFieldArray(name);\n        return () => {\n            (control._options.shouldUnregister || shouldUnregister) &&\n                control.unregister(name);\n        };\n    }, [name, control, keyName, shouldUnregister]);\n    return {\n        swap: React.useCallback(swap, [updateValues, name, control]),\n        move: React.useCallback(move, [updateValues, name, control]),\n        prepend: React.useCallback(prepend, [updateValues, name, control]),\n        append: React.useCallback(append, [updateValues, name, control]),\n        remove: React.useCallback(remove, [updateValues, name, control]),\n        insert: React.useCallback(insert$1, [updateValues, name, control]),\n        update: React.useCallback(update, [updateValues, name, control]),\n        replace: React.useCallback(replace, [updateValues, name, control]),\n        fields: React.useMemo(() => fields.map((field, index) => ({\n            ...field,\n            [keyName]: ids.current[index] || generateId(),\n        })), [fields, keyName]),\n    };\n}\n\nvar createSubject = () => {\n    let _observers = [];\n    const next = (value) => {\n        for (const observer of _observers) {\n            observer.next && observer.next(value);\n        }\n    };\n    const subscribe = (observer) => {\n        _observers.push(observer);\n        return {\n            unsubscribe: () => {\n                _observers = _observers.filter((o) => o !== observer);\n            },\n        };\n    };\n    const unsubscribe = () => {\n        _observers = [];\n    };\n    return {\n        get observers() {\n            return _observers;\n        },\n        next,\n        subscribe,\n        unsubscribe,\n    };\n};\n\nvar isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);\n\nfunction deepEqual(object1, object2) {\n    if (isPrimitive(object1) || isPrimitive(object2)) {\n        return object1 === object2;\n    }\n    if (isDateObject(object1) && isDateObject(object2)) {\n        return object1.getTime() === object2.getTime();\n    }\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n    if (keys1.length !== keys2.length) {\n        return false;\n    }\n    for (const key of keys1) {\n        const val1 = object1[key];\n        if (!keys2.includes(key)) {\n            return false;\n        }\n        if (key !== 'ref') {\n            const val2 = object2[key];\n            if ((isDateObject(val1) && isDateObject(val2)) ||\n                (isObject(val1) && isObject(val2)) ||\n                (Array.isArray(val1) && Array.isArray(val2))\n                ? !deepEqual(val1, val2)\n                : val1 !== val2) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nvar isMultipleSelect = (element) => element.type === `select-multiple`;\n\nvar isRadioOrCheckbox = (ref) => isRadioInput(ref) || isCheckBoxInput(ref);\n\nvar live = (ref) => isHTMLElement(ref) && ref.isConnected;\n\nvar objectHasFunction = (data) => {\n    for (const key in data) {\n        if (isFunction(data[key])) {\n            return true;\n        }\n    }\n    return false;\n};\n\nfunction markFieldsDirty(data, fields = {}) {\n    const isParentNodeArray = Array.isArray(data);\n    if (isObject(data) || isParentNodeArray) {\n        for (const key in data) {\n            if (Array.isArray(data[key]) ||\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\n                fields[key] = Array.isArray(data[key]) ? [] : {};\n                markFieldsDirty(data[key], fields[key]);\n            }\n            else if (!isNullOrUndefined(data[key])) {\n                fields[key] = true;\n            }\n        }\n    }\n    return fields;\n}\nfunction getDirtyFieldsFromDefaultValues(data, formValues, dirtyFieldsFromValues) {\n    const isParentNodeArray = Array.isArray(data);\n    if (isObject(data) || isParentNodeArray) {\n        for (const key in data) {\n            if (Array.isArray(data[key]) ||\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\n                if (isUndefined(formValues) ||\n                    isPrimitive(dirtyFieldsFromValues[key])) {\n                    dirtyFieldsFromValues[key] = Array.isArray(data[key])\n                        ? markFieldsDirty(data[key], [])\n                        : { ...markFieldsDirty(data[key]) };\n                }\n                else {\n                    getDirtyFieldsFromDefaultValues(data[key], isNullOrUndefined(formValues) ? {} : formValues[key], dirtyFieldsFromValues[key]);\n                }\n            }\n            else {\n                dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);\n            }\n        }\n    }\n    return dirtyFieldsFromValues;\n}\nvar getDirtyFields = (defaultValues, formValues) => getDirtyFieldsFromDefaultValues(defaultValues, formValues, markFieldsDirty(formValues));\n\nvar getFieldValueAs = (value, { valueAsNumber, valueAsDate, setValueAs }) => isUndefined(value)\n    ? value\n    : valueAsNumber\n        ? value === ''\n            ? NaN\n            : value\n                ? +value\n                : value\n        : valueAsDate && isString(value)\n            ? new Date(value)\n            : setValueAs\n                ? setValueAs(value)\n                : value;\n\nfunction getFieldValue(_f) {\n    const ref = _f.ref;\n    if (isFileInput(ref)) {\n        return ref.files;\n    }\n    if (isRadioInput(ref)) {\n        return getRadioValue(_f.refs).value;\n    }\n    if (isMultipleSelect(ref)) {\n        return [...ref.selectedOptions].map(({ value }) => value);\n    }\n    if (isCheckBoxInput(ref)) {\n        return getCheckboxValue(_f.refs).value;\n    }\n    return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n\nvar getResolverOptions = (fieldsNames, _fields, criteriaMode, shouldUseNativeValidation) => {\n    const fields = {};\n    for (const name of fieldsNames) {\n        const field = get(_fields, name);\n        field && set(fields, name, field._f);\n    }\n    return {\n        criteriaMode,\n        names: [...fieldsNames],\n        fields,\n        shouldUseNativeValidation,\n    };\n};\n\nvar getRuleValue = (rule) => isUndefined(rule)\n    ? rule\n    : isRegex(rule)\n        ? rule.source\n        : isObject(rule)\n            ? isRegex(rule.value)\n                ? rule.value.source\n                : rule.value\n            : rule;\n\nconst ASYNC_FUNCTION = 'AsyncFunction';\nvar hasPromiseValidation = (fieldReference) => !!fieldReference &&\n    !!fieldReference.validate &&\n    !!((isFunction(fieldReference.validate) &&\n        fieldReference.validate.constructor.name === ASYNC_FUNCTION) ||\n        (isObject(fieldReference.validate) &&\n            Object.values(fieldReference.validate).find((validateFunction) => validateFunction.constructor.name === ASYNC_FUNCTION)));\n\nvar hasValidation = (options) => options.mount &&\n    (options.required ||\n        options.min ||\n        options.max ||\n        options.maxLength ||\n        options.minLength ||\n        options.pattern ||\n        options.validate);\n\nfunction schemaErrorLookup(errors, _fields, name) {\n    const error = get(errors, name);\n    if (error || isKey(name)) {\n        return {\n            error,\n            name,\n        };\n    }\n    const names = name.split('.');\n    while (names.length) {\n        const fieldName = names.join('.');\n        const field = get(_fields, fieldName);\n        const foundError = get(errors, fieldName);\n        if (field && !Array.isArray(field) && name !== fieldName) {\n            return { name };\n        }\n        if (foundError && foundError.type) {\n            return {\n                name: fieldName,\n                error: foundError,\n            };\n        }\n        names.pop();\n    }\n    return {\n        name,\n    };\n}\n\nvar skipValidation = (isBlurEvent, isTouched, isSubmitted, reValidateMode, mode) => {\n    if (mode.isOnAll) {\n        return false;\n    }\n    else if (!isSubmitted && mode.isOnTouch) {\n        return !(isTouched || isBlurEvent);\n    }\n    else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n        return !isBlurEvent;\n    }\n    else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n        return isBlurEvent;\n    }\n    return true;\n};\n\nvar unsetEmptyArray = (ref, name) => !compact(get(ref, name)).length && unset(ref, name);\n\nconst defaultOptions = {\n    mode: VALIDATION_MODE.onSubmit,\n    reValidateMode: VALIDATION_MODE.onChange,\n    shouldFocusError: true,\n};\nfunction createFormControl(props = {}) {\n    let _options = {\n        ...defaultOptions,\n        ...props,\n    };\n    let _formState = {\n        submitCount: 0,\n        isDirty: false,\n        isLoading: isFunction(_options.defaultValues),\n        isValidating: false,\n        isSubmitted: false,\n        isSubmitting: false,\n        isSubmitSuccessful: false,\n        isValid: false,\n        touchedFields: {},\n        dirtyFields: {},\n        validatingFields: {},\n        errors: _options.errors || {},\n        disabled: _options.disabled || false,\n    };\n    let _fields = {};\n    let _defaultValues = isObject(_options.defaultValues) || isObject(_options.values)\n        ? cloneObject(_options.defaultValues || _options.values) || {}\n        : {};\n    let _formValues = _options.shouldUnregister\n        ? {}\n        : cloneObject(_defaultValues);\n    let _state = {\n        action: false,\n        mount: false,\n        watch: false,\n    };\n    let _names = {\n        mount: new Set(),\n        disabled: new Set(),\n        unMount: new Set(),\n        array: new Set(),\n        watch: new Set(),\n    };\n    let delayErrorCallback;\n    let timer = 0;\n    const _proxyFormState = {\n        isDirty: false,\n        dirtyFields: false,\n        validatingFields: false,\n        touchedFields: false,\n        isValidating: false,\n        isValid: false,\n        errors: false,\n    };\n    const _subjects = {\n        values: createSubject(),\n        array: createSubject(),\n        state: createSubject(),\n    };\n    const validationModeBeforeSubmit = getValidationModes(_options.mode);\n    const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n    const shouldDisplayAllAssociatedErrors = _options.criteriaMode === VALIDATION_MODE.all;\n    const debounce = (callback) => (wait) => {\n        clearTimeout(timer);\n        timer = setTimeout(callback, wait);\n    };\n    const _updateValid = async (shouldUpdateValid) => {\n        if (!_options.disabled && (_proxyFormState.isValid || shouldUpdateValid)) {\n            const isValid = _options.resolver\n                ? isEmptyObject((await _executeSchema()).errors)\n                : await executeBuiltInValidation(_fields, true);\n            if (isValid !== _formState.isValid) {\n                _subjects.state.next({\n                    isValid,\n                });\n            }\n        }\n    };\n    const _updateIsValidating = (names, isValidating) => {\n        if (!_options.disabled &&\n            (_proxyFormState.isValidating || _proxyFormState.validatingFields)) {\n            (names || Array.from(_names.mount)).forEach((name) => {\n                if (name) {\n                    isValidating\n                        ? set(_formState.validatingFields, name, isValidating)\n                        : unset(_formState.validatingFields, name);\n                }\n            });\n            _subjects.state.next({\n                validatingFields: _formState.validatingFields,\n                isValidating: !isEmptyObject(_formState.validatingFields),\n            });\n        }\n    };\n    const _updateFieldArray = (name, values = [], method, args, shouldSetValues = true, shouldUpdateFieldsAndState = true) => {\n        if (args && method && !_options.disabled) {\n            _state.action = true;\n            if (shouldUpdateFieldsAndState && Array.isArray(get(_fields, name))) {\n                const fieldValues = method(get(_fields, name), args.argA, args.argB);\n                shouldSetValues && set(_fields, name, fieldValues);\n            }\n            if (shouldUpdateFieldsAndState &&\n                Array.isArray(get(_formState.errors, name))) {\n                const errors = method(get(_formState.errors, name), args.argA, args.argB);\n                shouldSetValues && set(_formState.errors, name, errors);\n                unsetEmptyArray(_formState.errors, name);\n            }\n            if (_proxyFormState.touchedFields &&\n                shouldUpdateFieldsAndState &&\n                Array.isArray(get(_formState.touchedFields, name))) {\n                const touchedFields = method(get(_formState.touchedFields, name), args.argA, args.argB);\n                shouldSetValues && set(_formState.touchedFields, name, touchedFields);\n            }\n            if (_proxyFormState.dirtyFields) {\n                _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n            }\n            _subjects.state.next({\n                name,\n                isDirty: _getDirty(name, values),\n                dirtyFields: _formState.dirtyFields,\n                errors: _formState.errors,\n                isValid: _formState.isValid,\n            });\n        }\n        else {\n            set(_formValues, name, values);\n        }\n    };\n    const updateErrors = (name, error) => {\n        set(_formState.errors, name, error);\n        _subjects.state.next({\n            errors: _formState.errors,\n        });\n    };\n    const _setErrors = (errors) => {\n        _formState.errors = errors;\n        _subjects.state.next({\n            errors: _formState.errors,\n            isValid: false,\n        });\n    };\n    const updateValidAndValue = (name, shouldSkipSetValueAs, value, ref) => {\n        const field = get(_fields, name);\n        if (field) {\n            const defaultValue = get(_formValues, name, isUndefined(value) ? get(_defaultValues, name) : value);\n            isUndefined(defaultValue) ||\n                (ref && ref.defaultChecked) ||\n                shouldSkipSetValueAs\n                ? set(_formValues, name, shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f))\n                : setFieldValue(name, defaultValue);\n            _state.mount && _updateValid();\n        }\n    };\n    const updateTouchAndDirty = (name, fieldValue, isBlurEvent, shouldDirty, shouldRender) => {\n        let shouldUpdateField = false;\n        let isPreviousDirty = false;\n        const output = {\n            name,\n        };\n        if (!_options.disabled) {\n            const disabledField = !!(get(_fields, name) &&\n                get(_fields, name)._f &&\n                get(_fields, name)._f.disabled);\n            if (!isBlurEvent || shouldDirty) {\n                if (_proxyFormState.isDirty) {\n                    isPreviousDirty = _formState.isDirty;\n                    _formState.isDirty = output.isDirty = _getDirty();\n                    shouldUpdateField = isPreviousDirty !== output.isDirty;\n                }\n                const isCurrentFieldPristine = disabledField || deepEqual(get(_defaultValues, name), fieldValue);\n                isPreviousDirty = !!(!disabledField && get(_formState.dirtyFields, name));\n                isCurrentFieldPristine || disabledField\n                    ? unset(_formState.dirtyFields, name)\n                    : set(_formState.dirtyFields, name, true);\n                output.dirtyFields = _formState.dirtyFields;\n                shouldUpdateField =\n                    shouldUpdateField ||\n                        (_proxyFormState.dirtyFields &&\n                            isPreviousDirty !== !isCurrentFieldPristine);\n            }\n            if (isBlurEvent) {\n                const isPreviousFieldTouched = get(_formState.touchedFields, name);\n                if (!isPreviousFieldTouched) {\n                    set(_formState.touchedFields, name, isBlurEvent);\n                    output.touchedFields = _formState.touchedFields;\n                    shouldUpdateField =\n                        shouldUpdateField ||\n                            (_proxyFormState.touchedFields &&\n                                isPreviousFieldTouched !== isBlurEvent);\n                }\n            }\n            shouldUpdateField && shouldRender && _subjects.state.next(output);\n        }\n        return shouldUpdateField ? output : {};\n    };\n    const shouldRenderByError = (name, isValid, error, fieldState) => {\n        const previousFieldError = get(_formState.errors, name);\n        const shouldUpdateValid = _proxyFormState.isValid &&\n            isBoolean(isValid) &&\n            _formState.isValid !== isValid;\n        if (_options.delayError && error) {\n            delayErrorCallback = debounce(() => updateErrors(name, error));\n            delayErrorCallback(_options.delayError);\n        }\n        else {\n            clearTimeout(timer);\n            delayErrorCallback = null;\n            error\n                ? set(_formState.errors, name, error)\n                : unset(_formState.errors, name);\n        }\n        if ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n            !isEmptyObject(fieldState) ||\n            shouldUpdateValid) {\n            const updatedFormState = {\n                ...fieldState,\n                ...(shouldUpdateValid && isBoolean(isValid) ? { isValid } : {}),\n                errors: _formState.errors,\n                name,\n            };\n            _formState = {\n                ..._formState,\n                ...updatedFormState,\n            };\n            _subjects.state.next(updatedFormState);\n        }\n    };\n    const _executeSchema = async (name) => {\n        _updateIsValidating(name, true);\n        const result = await _options.resolver(_formValues, _options.context, getResolverOptions(name || _names.mount, _fields, _options.criteriaMode, _options.shouldUseNativeValidation));\n        _updateIsValidating(name);\n        return result;\n    };\n    const executeSchemaAndUpdateState = async (names) => {\n        const { errors } = await _executeSchema(names);\n        if (names) {\n            for (const name of names) {\n                const error = get(errors, name);\n                error\n                    ? set(_formState.errors, name, error)\n                    : unset(_formState.errors, name);\n            }\n        }\n        else {\n            _formState.errors = errors;\n        }\n        return errors;\n    };\n    const executeBuiltInValidation = async (fields, shouldOnlyCheckValid, context = {\n        valid: true,\n    }) => {\n        for (const name in fields) {\n            const field = fields[name];\n            if (field) {\n                const { _f, ...fieldValue } = field;\n                if (_f) {\n                    const isFieldArrayRoot = _names.array.has(_f.name);\n                    const isPromiseFunction = field._f && hasPromiseValidation(field._f);\n                    if (isPromiseFunction && _proxyFormState.validatingFields) {\n                        _updateIsValidating([name], true);\n                    }\n                    const fieldError = await validateField(field, _names.disabled, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation && !shouldOnlyCheckValid, isFieldArrayRoot);\n                    if (isPromiseFunction && _proxyFormState.validatingFields) {\n                        _updateIsValidating([name]);\n                    }\n                    if (fieldError[_f.name]) {\n                        context.valid = false;\n                        if (shouldOnlyCheckValid) {\n                            break;\n                        }\n                    }\n                    !shouldOnlyCheckValid &&\n                        (get(fieldError, _f.name)\n                            ? isFieldArrayRoot\n                                ? updateFieldArrayRootError(_formState.errors, fieldError, _f.name)\n                                : set(_formState.errors, _f.name, fieldError[_f.name])\n                            : unset(_formState.errors, _f.name));\n                }\n                !isEmptyObject(fieldValue) &&\n                    (await executeBuiltInValidation(fieldValue, shouldOnlyCheckValid, context));\n            }\n        }\n        return context.valid;\n    };\n    const _removeUnmounted = () => {\n        for (const name of _names.unMount) {\n            const field = get(_fields, name);\n            field &&\n                (field._f.refs\n                    ? field._f.refs.every((ref) => !live(ref))\n                    : !live(field._f.ref)) &&\n                unregister(name);\n        }\n        _names.unMount = new Set();\n    };\n    const _getDirty = (name, data) => !_options.disabled &&\n        (name && data && set(_formValues, name, data),\n            !deepEqual(getValues(), _defaultValues));\n    const _getWatch = (names, defaultValue, isGlobal) => generateWatchOutput(names, _names, {\n        ...(_state.mount\n            ? _formValues\n            : isUndefined(defaultValue)\n                ? _defaultValues\n                : isString(names)\n                    ? { [names]: defaultValue }\n                    : defaultValue),\n    }, isGlobal, defaultValue);\n    const _getFieldArray = (name) => compact(get(_state.mount ? _formValues : _defaultValues, name, _options.shouldUnregister ? get(_defaultValues, name, []) : []));\n    const setFieldValue = (name, value, options = {}) => {\n        const field = get(_fields, name);\n        let fieldValue = value;\n        if (field) {\n            const fieldReference = field._f;\n            if (fieldReference) {\n                !fieldReference.disabled &&\n                    set(_formValues, name, getFieldValueAs(value, fieldReference));\n                fieldValue =\n                    isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n                        ? ''\n                        : value;\n                if (isMultipleSelect(fieldReference.ref)) {\n                    [...fieldReference.ref.options].forEach((optionRef) => (optionRef.selected = fieldValue.includes(optionRef.value)));\n                }\n                else if (fieldReference.refs) {\n                    if (isCheckBoxInput(fieldReference.ref)) {\n                        fieldReference.refs.length > 1\n                            ? fieldReference.refs.forEach((checkboxRef) => (!checkboxRef.defaultChecked || !checkboxRef.disabled) &&\n                                (checkboxRef.checked = Array.isArray(fieldValue)\n                                    ? !!fieldValue.find((data) => data === checkboxRef.value)\n                                    : fieldValue === checkboxRef.value))\n                            : fieldReference.refs[0] &&\n                                (fieldReference.refs[0].checked = !!fieldValue);\n                    }\n                    else {\n                        fieldReference.refs.forEach((radioRef) => (radioRef.checked = radioRef.value === fieldValue));\n                    }\n                }\n                else if (isFileInput(fieldReference.ref)) {\n                    fieldReference.ref.value = '';\n                }\n                else {\n                    fieldReference.ref.value = fieldValue;\n                    if (!fieldReference.ref.type) {\n                        _subjects.values.next({\n                            name,\n                            values: { ..._formValues },\n                        });\n                    }\n                }\n            }\n        }\n        (options.shouldDirty || options.shouldTouch) &&\n            updateTouchAndDirty(name, fieldValue, options.shouldTouch, options.shouldDirty, true);\n        options.shouldValidate && trigger(name);\n    };\n    const setValues = (name, value, options) => {\n        for (const fieldKey in value) {\n            const fieldValue = value[fieldKey];\n            const fieldName = `${name}.${fieldKey}`;\n            const field = get(_fields, fieldName);\n            (_names.array.has(name) ||\n                isObject(fieldValue) ||\n                (field && !field._f)) &&\n                !isDateObject(fieldValue)\n                ? setValues(fieldName, fieldValue, options)\n                : setFieldValue(fieldName, fieldValue, options);\n        }\n    };\n    const setValue = (name, value, options = {}) => {\n        const field = get(_fields, name);\n        const isFieldArray = _names.array.has(name);\n        const cloneValue = cloneObject(value);\n        set(_formValues, name, cloneValue);\n        if (isFieldArray) {\n            _subjects.array.next({\n                name,\n                values: { ..._formValues },\n            });\n            if ((_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n                options.shouldDirty) {\n                _subjects.state.next({\n                    name,\n                    dirtyFields: getDirtyFields(_defaultValues, _formValues),\n                    isDirty: _getDirty(name, cloneValue),\n                });\n            }\n        }\n        else {\n            field && !field._f && !isNullOrUndefined(cloneValue)\n                ? setValues(name, cloneValue, options)\n                : setFieldValue(name, cloneValue, options);\n        }\n        isWatched(name, _names) && _subjects.state.next({ ..._formState });\n        _subjects.values.next({\n            name: _state.mount ? name : undefined,\n            values: { ..._formValues },\n        });\n    };\n    const onChange = async (event) => {\n        _state.mount = true;\n        const target = event.target;\n        let name = target.name;\n        let isFieldValueUpdated = true;\n        const field = get(_fields, name);\n        const getCurrentFieldValue = () => target.type ? getFieldValue(field._f) : getEventValue(event);\n        const _updateIsFieldValueUpdated = (fieldValue) => {\n            isFieldValueUpdated =\n                Number.isNaN(fieldValue) ||\n                    (isDateObject(fieldValue) && isNaN(fieldValue.getTime())) ||\n                    deepEqual(fieldValue, get(_formValues, name, fieldValue));\n        };\n        if (field) {\n            let error;\n            let isValid;\n            const fieldValue = getCurrentFieldValue();\n            const isBlurEvent = event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;\n            const shouldSkipValidation = (!hasValidation(field._f) &&\n                !_options.resolver &&\n                !get(_formState.errors, name) &&\n                !field._f.deps) ||\n                skipValidation(isBlurEvent, get(_formState.touchedFields, name), _formState.isSubmitted, validationModeAfterSubmit, validationModeBeforeSubmit);\n            const watched = isWatched(name, _names, isBlurEvent);\n            set(_formValues, name, fieldValue);\n            if (isBlurEvent) {\n                field._f.onBlur && field._f.onBlur(event);\n                delayErrorCallback && delayErrorCallback(0);\n            }\n            else if (field._f.onChange) {\n                field._f.onChange(event);\n            }\n            const fieldState = updateTouchAndDirty(name, fieldValue, isBlurEvent, false);\n            const shouldRender = !isEmptyObject(fieldState) || watched;\n            !isBlurEvent &&\n                _subjects.values.next({\n                    name,\n                    type: event.type,\n                    values: { ..._formValues },\n                });\n            if (shouldSkipValidation) {\n                if (_proxyFormState.isValid) {\n                    if (_options.mode === 'onBlur' && isBlurEvent) {\n                        _updateValid();\n                    }\n                    else if (!isBlurEvent) {\n                        _updateValid();\n                    }\n                }\n                return (shouldRender &&\n                    _subjects.state.next({ name, ...(watched ? {} : fieldState) }));\n            }\n            !isBlurEvent && watched && _subjects.state.next({ ..._formState });\n            if (_options.resolver) {\n                const { errors } = await _executeSchema([name]);\n                _updateIsFieldValueUpdated(fieldValue);\n                if (isFieldValueUpdated) {\n                    const previousErrorLookupResult = schemaErrorLookup(_formState.errors, _fields, name);\n                    const errorLookupResult = schemaErrorLookup(errors, _fields, previousErrorLookupResult.name || name);\n                    error = errorLookupResult.error;\n                    name = errorLookupResult.name;\n                    isValid = isEmptyObject(errors);\n                }\n            }\n            else {\n                _updateIsValidating([name], true);\n                error = (await validateField(field, _names.disabled, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation))[name];\n                _updateIsValidating([name]);\n                _updateIsFieldValueUpdated(fieldValue);\n                if (isFieldValueUpdated) {\n                    if (error) {\n                        isValid = false;\n                    }\n                    else if (_proxyFormState.isValid) {\n                        isValid = await executeBuiltInValidation(_fields, true);\n                    }\n                }\n            }\n            if (isFieldValueUpdated) {\n                field._f.deps &&\n                    trigger(field._f.deps);\n                shouldRenderByError(name, isValid, error, fieldState);\n            }\n        }\n    };\n    const _focusInput = (ref, key) => {\n        if (get(_formState.errors, key) && ref.focus) {\n            ref.focus();\n            return 1;\n        }\n        return;\n    };\n    const trigger = async (name, options = {}) => {\n        let isValid;\n        let validationResult;\n        const fieldNames = convertToArrayPayload(name);\n        if (_options.resolver) {\n            const errors = await executeSchemaAndUpdateState(isUndefined(name) ? name : fieldNames);\n            isValid = isEmptyObject(errors);\n            validationResult = name\n                ? !fieldNames.some((name) => get(errors, name))\n                : isValid;\n        }\n        else if (name) {\n            validationResult = (await Promise.all(fieldNames.map(async (fieldName) => {\n                const field = get(_fields, fieldName);\n                return await executeBuiltInValidation(field && field._f ? { [fieldName]: field } : field);\n            }))).every(Boolean);\n            !(!validationResult && !_formState.isValid) && _updateValid();\n        }\n        else {\n            validationResult = isValid = await executeBuiltInValidation(_fields);\n        }\n        _subjects.state.next({\n            ...(!isString(name) ||\n                (_proxyFormState.isValid && isValid !== _formState.isValid)\n                ? {}\n                : { name }),\n            ...(_options.resolver || !name ? { isValid } : {}),\n            errors: _formState.errors,\n        });\n        options.shouldFocus &&\n            !validationResult &&\n            iterateFieldsByAction(_fields, _focusInput, name ? fieldNames : _names.mount);\n        return validationResult;\n    };\n    const getValues = (fieldNames) => {\n        const values = {\n            ...(_state.mount ? _formValues : _defaultValues),\n        };\n        return isUndefined(fieldNames)\n            ? values\n            : isString(fieldNames)\n                ? get(values, fieldNames)\n                : fieldNames.map((name) => get(values, name));\n    };\n    const getFieldState = (name, formState) => ({\n        invalid: !!get((formState || _formState).errors, name),\n        isDirty: !!get((formState || _formState).dirtyFields, name),\n        error: get((formState || _formState).errors, name),\n        isValidating: !!get(_formState.validatingFields, name),\n        isTouched: !!get((formState || _formState).touchedFields, name),\n    });\n    const clearErrors = (name) => {\n        name &&\n            convertToArrayPayload(name).forEach((inputName) => unset(_formState.errors, inputName));\n        _subjects.state.next({\n            errors: name ? _formState.errors : {},\n        });\n    };\n    const setError = (name, error, options) => {\n        const ref = (get(_fields, name, { _f: {} })._f || {}).ref;\n        const currentError = get(_formState.errors, name) || {};\n        // Don't override existing error messages elsewhere in the object tree.\n        const { ref: currentRef, message, type, ...restOfErrorTree } = currentError;\n        set(_formState.errors, name, {\n            ...restOfErrorTree,\n            ...error,\n            ref,\n        });\n        _subjects.state.next({\n            name,\n            errors: _formState.errors,\n            isValid: false,\n        });\n        options && options.shouldFocus && ref && ref.focus && ref.focus();\n    };\n    const watch = (name, defaultValue) => isFunction(name)\n        ? _subjects.values.subscribe({\n            next: (payload) => name(_getWatch(undefined, defaultValue), payload),\n        })\n        : _getWatch(name, defaultValue, true);\n    const unregister = (name, options = {}) => {\n        for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n            _names.mount.delete(fieldName);\n            _names.array.delete(fieldName);\n            if (!options.keepValue) {\n                unset(_fields, fieldName);\n                unset(_formValues, fieldName);\n            }\n            !options.keepError && unset(_formState.errors, fieldName);\n            !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n            !options.keepTouched && unset(_formState.touchedFields, fieldName);\n            !options.keepIsValidating &&\n                unset(_formState.validatingFields, fieldName);\n            !_options.shouldUnregister &&\n                !options.keepDefaultValue &&\n                unset(_defaultValues, fieldName);\n        }\n        _subjects.values.next({\n            values: { ..._formValues },\n        });\n        _subjects.state.next({\n            ..._formState,\n            ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n        });\n        !options.keepIsValid && _updateValid();\n    };\n    const _updateDisabledField = ({ disabled, name, field, fields, }) => {\n        if ((isBoolean(disabled) && _state.mount) ||\n            !!disabled ||\n            _names.disabled.has(name)) {\n            disabled ? _names.disabled.add(name) : _names.disabled.delete(name);\n            updateTouchAndDirty(name, getFieldValue(field ? field._f : get(fields, name)._f), false, false, true);\n        }\n    };\n    const register = (name, options = {}) => {\n        let field = get(_fields, name);\n        const disabledIsDefined = isBoolean(options.disabled) || isBoolean(_options.disabled);\n        set(_fields, name, {\n            ...(field || {}),\n            _f: {\n                ...(field && field._f ? field._f : { ref: { name } }),\n                name,\n                mount: true,\n                ...options,\n            },\n        });\n        _names.mount.add(name);\n        if (field) {\n            _updateDisabledField({\n                field,\n                disabled: isBoolean(options.disabled)\n                    ? options.disabled\n                    : _options.disabled,\n                name,\n            });\n        }\n        else {\n            updateValidAndValue(name, true, options.value);\n        }\n        return {\n            ...(disabledIsDefined\n                ? { disabled: options.disabled || _options.disabled }\n                : {}),\n            ...(_options.progressive\n                ? {\n                    required: !!options.required,\n                    min: getRuleValue(options.min),\n                    max: getRuleValue(options.max),\n                    minLength: getRuleValue(options.minLength),\n                    maxLength: getRuleValue(options.maxLength),\n                    pattern: getRuleValue(options.pattern),\n                }\n                : {}),\n            name,\n            onChange,\n            onBlur: onChange,\n            ref: (ref) => {\n                if (ref) {\n                    register(name, options);\n                    field = get(_fields, name);\n                    const fieldRef = isUndefined(ref.value)\n                        ? ref.querySelectorAll\n                            ? ref.querySelectorAll('input,select,textarea')[0] || ref\n                            : ref\n                        : ref;\n                    const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\n                    const refs = field._f.refs || [];\n                    if (radioOrCheckbox\n                        ? refs.find((option) => option === fieldRef)\n                        : fieldRef === field._f.ref) {\n                        return;\n                    }\n                    set(_fields, name, {\n                        _f: {\n                            ...field._f,\n                            ...(radioOrCheckbox\n                                ? {\n                                    refs: [\n                                        ...refs.filter(live),\n                                        fieldRef,\n                                        ...(Array.isArray(get(_defaultValues, name)) ? [{}] : []),\n                                    ],\n                                    ref: { type: fieldRef.type, name },\n                                }\n                                : { ref: fieldRef }),\n                        },\n                    });\n                    updateValidAndValue(name, false, undefined, fieldRef);\n                }\n                else {\n                    field = get(_fields, name, {});\n                    if (field._f) {\n                        field._f.mount = false;\n                    }\n                    (_options.shouldUnregister || options.shouldUnregister) &&\n                        !(isNameInFieldArray(_names.array, name) && _state.action) &&\n                        _names.unMount.add(name);\n                }\n            },\n        };\n    };\n    const _focusError = () => _options.shouldFocusError &&\n        iterateFieldsByAction(_fields, _focusInput, _names.mount);\n    const _disableForm = (disabled) => {\n        if (isBoolean(disabled)) {\n            _subjects.state.next({ disabled });\n            iterateFieldsByAction(_fields, (ref, name) => {\n                const currentField = get(_fields, name);\n                if (currentField) {\n                    ref.disabled = currentField._f.disabled || disabled;\n                    if (Array.isArray(currentField._f.refs)) {\n                        currentField._f.refs.forEach((inputRef) => {\n                            inputRef.disabled = currentField._f.disabled || disabled;\n                        });\n                    }\n                }\n            }, 0, false);\n        }\n    };\n    const handleSubmit = (onValid, onInvalid) => async (e) => {\n        let onValidError = undefined;\n        if (e) {\n            e.preventDefault && e.preventDefault();\n            e.persist && e.persist();\n        }\n        let fieldValues = cloneObject(_formValues);\n        if (_names.disabled.size) {\n            for (const name of _names.disabled) {\n                set(fieldValues, name, undefined);\n            }\n        }\n        _subjects.state.next({\n            isSubmitting: true,\n        });\n        if (_options.resolver) {\n            const { errors, values } = await _executeSchema();\n            _formState.errors = errors;\n            fieldValues = values;\n        }\n        else {\n            await executeBuiltInValidation(_fields);\n        }\n        unset(_formState.errors, 'root');\n        if (isEmptyObject(_formState.errors)) {\n            _subjects.state.next({\n                errors: {},\n            });\n            try {\n                await onValid(fieldValues, e);\n            }\n            catch (error) {\n                onValidError = error;\n            }\n        }\n        else {\n            if (onInvalid) {\n                await onInvalid({ ..._formState.errors }, e);\n            }\n            _focusError();\n            setTimeout(_focusError);\n        }\n        _subjects.state.next({\n            isSubmitted: true,\n            isSubmitting: false,\n            isSubmitSuccessful: isEmptyObject(_formState.errors) && !onValidError,\n            submitCount: _formState.submitCount + 1,\n            errors: _formState.errors,\n        });\n        if (onValidError) {\n            throw onValidError;\n        }\n    };\n    const resetField = (name, options = {}) => {\n        if (get(_fields, name)) {\n            if (isUndefined(options.defaultValue)) {\n                setValue(name, cloneObject(get(_defaultValues, name)));\n            }\n            else {\n                setValue(name, options.defaultValue);\n                set(_defaultValues, name, cloneObject(options.defaultValue));\n            }\n            if (!options.keepTouched) {\n                unset(_formState.touchedFields, name);\n            }\n            if (!options.keepDirty) {\n                unset(_formState.dirtyFields, name);\n                _formState.isDirty = options.defaultValue\n                    ? _getDirty(name, cloneObject(get(_defaultValues, name)))\n                    : _getDirty();\n            }\n            if (!options.keepError) {\n                unset(_formState.errors, name);\n                _proxyFormState.isValid && _updateValid();\n            }\n            _subjects.state.next({ ..._formState });\n        }\n    };\n    const _reset = (formValues, keepStateOptions = {}) => {\n        const updatedValues = formValues ? cloneObject(formValues) : _defaultValues;\n        const cloneUpdatedValues = cloneObject(updatedValues);\n        const isEmptyResetValues = isEmptyObject(formValues);\n        const values = isEmptyResetValues ? _defaultValues : cloneUpdatedValues;\n        if (!keepStateOptions.keepDefaultValues) {\n            _defaultValues = updatedValues;\n        }\n        if (!keepStateOptions.keepValues) {\n            if (keepStateOptions.keepDirtyValues) {\n                const fieldsToCheck = new Set([\n                    ..._names.mount,\n                    ...Object.keys(getDirtyFields(_defaultValues, _formValues)),\n                ]);\n                for (const fieldName of Array.from(fieldsToCheck)) {\n                    get(_formState.dirtyFields, fieldName)\n                        ? set(values, fieldName, get(_formValues, fieldName))\n                        : setValue(fieldName, get(values, fieldName));\n                }\n            }\n            else {\n                if (isWeb && isUndefined(formValues)) {\n                    for (const name of _names.mount) {\n                        const field = get(_fields, name);\n                        if (field && field._f) {\n                            const fieldReference = Array.isArray(field._f.refs)\n                                ? field._f.refs[0]\n                                : field._f.ref;\n                            if (isHTMLElement(fieldReference)) {\n                                const form = fieldReference.closest('form');\n                                if (form) {\n                                    form.reset();\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n                _fields = {};\n            }\n            _formValues = _options.shouldUnregister\n                ? keepStateOptions.keepDefaultValues\n                    ? cloneObject(_defaultValues)\n                    : {}\n                : cloneObject(values);\n            _subjects.array.next({\n                values: { ...values },\n            });\n            _subjects.values.next({\n                values: { ...values },\n            });\n        }\n        _names = {\n            mount: keepStateOptions.keepDirtyValues ? _names.mount : new Set(),\n            unMount: new Set(),\n            array: new Set(),\n            disabled: new Set(),\n            watch: new Set(),\n            watchAll: false,\n            focus: '',\n        };\n        _state.mount =\n            !_proxyFormState.isValid ||\n                !!keepStateOptions.keepIsValid ||\n                !!keepStateOptions.keepDirtyValues;\n        _state.watch = !!_options.shouldUnregister;\n        _subjects.state.next({\n            submitCount: keepStateOptions.keepSubmitCount\n                ? _formState.submitCount\n                : 0,\n            isDirty: isEmptyResetValues\n                ? false\n                : keepStateOptions.keepDirty\n                    ? _formState.isDirty\n                    : !!(keepStateOptions.keepDefaultValues &&\n                        !deepEqual(formValues, _defaultValues)),\n            isSubmitted: keepStateOptions.keepIsSubmitted\n                ? _formState.isSubmitted\n                : false,\n            dirtyFields: isEmptyResetValues\n                ? {}\n                : keepStateOptions.keepDirtyValues\n                    ? keepStateOptions.keepDefaultValues && _formValues\n                        ? getDirtyFields(_defaultValues, _formValues)\n                        : _formState.dirtyFields\n                    : keepStateOptions.keepDefaultValues && formValues\n                        ? getDirtyFields(_defaultValues, formValues)\n                        : keepStateOptions.keepDirty\n                            ? _formState.dirtyFields\n                            : {},\n            touchedFields: keepStateOptions.keepTouched\n                ? _formState.touchedFields\n                : {},\n            errors: keepStateOptions.keepErrors ? _formState.errors : {},\n            isSubmitSuccessful: keepStateOptions.keepIsSubmitSuccessful\n                ? _formState.isSubmitSuccessful\n                : false,\n            isSubmitting: false,\n        });\n    };\n    const reset = (formValues, keepStateOptions) => _reset(isFunction(formValues)\n        ? formValues(_formValues)\n        : formValues, keepStateOptions);\n    const setFocus = (name, options = {}) => {\n        const field = get(_fields, name);\n        const fieldReference = field && field._f;\n        if (fieldReference) {\n            const fieldRef = fieldReference.refs\n                ? fieldReference.refs[0]\n                : fieldReference.ref;\n            if (fieldRef.focus) {\n                fieldRef.focus();\n                options.shouldSelect &&\n                    isFunction(fieldRef.select) &&\n                    fieldRef.select();\n            }\n        }\n    };\n    const _updateFormState = (updatedFormState) => {\n        _formState = {\n            ..._formState,\n            ...updatedFormState,\n        };\n    };\n    const _resetDefaultValues = () => isFunction(_options.defaultValues) &&\n        _options.defaultValues().then((values) => {\n            reset(values, _options.resetOptions);\n            _subjects.state.next({\n                isLoading: false,\n            });\n        });\n    return {\n        control: {\n            register,\n            unregister,\n            getFieldState,\n            handleSubmit,\n            setError,\n            _executeSchema,\n            _getWatch,\n            _getDirty,\n            _updateValid,\n            _removeUnmounted,\n            _updateFieldArray,\n            _updateDisabledField,\n            _getFieldArray,\n            _reset,\n            _resetDefaultValues,\n            _updateFormState,\n            _disableForm,\n            _subjects,\n            _proxyFormState,\n            _setErrors,\n            get _fields() {\n                return _fields;\n            },\n            get _formValues() {\n                return _formValues;\n            },\n            get _state() {\n                return _state;\n            },\n            set _state(value) {\n                _state = value;\n            },\n            get _defaultValues() {\n                return _defaultValues;\n            },\n            get _names() {\n                return _names;\n            },\n            set _names(value) {\n                _names = value;\n            },\n            get _formState() {\n                return _formState;\n            },\n            set _formState(value) {\n                _formState = value;\n            },\n            get _options() {\n                return _options;\n            },\n            set _options(value) {\n                _options = {\n                    ..._options,\n                    ...value,\n                };\n            },\n        },\n        trigger,\n        register,\n        handleSubmit,\n        watch,\n        setValue,\n        getValues,\n        reset,\n        resetField,\n        clearErrors,\n        unregister,\n        setError,\n        setFocus,\n        getFieldState,\n    };\n}\n\n/**\n * Custom hook to manage the entire form.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useform) • [Demo](https://codesandbox.io/s/react-hook-form-get-started-ts-5ksmm) • [Video](https://www.youtube.com/watch?v=RkXv4AXXC_4)\n *\n * @param props - form configuration and validation parameters.\n *\n * @returns methods - individual functions to manage the form state. {@link UseFormReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, watch, formState: { errors } } = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   console.log(watch(\"example\"));\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input defaultValue=\"test\" {...register(\"example\")} />\n *       <input {...register(\"exampleRequired\", { required: true })} />\n *       {errors.exampleRequired && <span>This field is required</span>}\n *       <button>Submit</button>\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useForm(props = {}) {\n    const _formControl = React.useRef(undefined);\n    const _values = React.useRef(undefined);\n    const [formState, updateFormState] = React.useState({\n        isDirty: false,\n        isValidating: false,\n        isLoading: isFunction(props.defaultValues),\n        isSubmitted: false,\n        isSubmitting: false,\n        isSubmitSuccessful: false,\n        isValid: false,\n        submitCount: 0,\n        dirtyFields: {},\n        touchedFields: {},\n        validatingFields: {},\n        errors: props.errors || {},\n        disabled: props.disabled || false,\n        defaultValues: isFunction(props.defaultValues)\n            ? undefined\n            : props.defaultValues,\n    });\n    if (!_formControl.current) {\n        _formControl.current = {\n            ...createFormControl(props),\n            formState,\n        };\n    }\n    const control = _formControl.current.control;\n    control._options = props;\n    useSubscribe({\n        subject: control._subjects.state,\n        next: (value) => {\n            if (shouldRenderFormState(value, control._proxyFormState, control._updateFormState, true)) {\n                updateFormState({ ...control._formState });\n            }\n        },\n    });\n    React.useEffect(() => control._disableForm(props.disabled), [control, props.disabled]);\n    React.useEffect(() => {\n        if (control._proxyFormState.isDirty) {\n            const isDirty = control._getDirty();\n            if (isDirty !== formState.isDirty) {\n                control._subjects.state.next({\n                    isDirty,\n                });\n            }\n        }\n    }, [control, formState.isDirty]);\n    React.useEffect(() => {\n        if (props.values && !deepEqual(props.values, _values.current)) {\n            control._reset(props.values, control._options.resetOptions);\n            _values.current = props.values;\n            updateFormState((state) => ({ ...state }));\n        }\n        else {\n            control._resetDefaultValues();\n        }\n    }, [props.values, control]);\n    React.useEffect(() => {\n        if (props.errors) {\n            control._setErrors(props.errors);\n        }\n    }, [props.errors, control]);\n    React.useEffect(() => {\n        if (!control._state.mount) {\n            control._updateValid();\n            control._state.mount = true;\n        }\n        if (control._state.watch) {\n            control._state.watch = false;\n            control._subjects.state.next({ ...control._formState });\n        }\n        control._removeUnmounted();\n    });\n    React.useEffect(() => {\n        props.shouldUnregister &&\n            control._subjects.values.next({\n                values: control._getWatch(),\n            });\n    }, [props.shouldUnregister, control]);\n    _formControl.current.formState = getProxyFormState(formState, control);\n    return _formControl.current;\n}\n\nexport { Controller, Form, FormProvider, appendErrors, get, set, useController, useFieldArray, useForm, useFormContext, useFormState, useWatch };\n//# sourceMappingURL=index.esm.mjs.map\n"],"names":["isCheckBoxInput","element","type","isDateObject","value","Date","isNullOrUndefined","isObjectType","isObject","Array","isArray","getEventValue","event","target","checked","isNameInFieldArray","names","name","has","substring","search","getNodeParentName","isWeb","window","HTMLElement","document","cloneObject","data","copy","isFileListInstance","FileList","Set","Blob","tempObject","prototypeCopy","constructor","prototype","hasOwnProperty","isPlainObject","key","compact","filter","Boolean","isUndefined","val","get","object","path","defaultValue","result","split","reduce","isBoolean","isKey","test","stringToPath","input","replace","set","index","tempPath","length","lastIndex","newValue","objValue","isNaN","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","HookFormContext","React","createContext","useFormContext","useContext","getProxyFormState","formState","control","localProxyFormState","isRoot","defaultValues","_defaultValues","Object","defineProperty","_key","_proxyFormState","isEmptyObject","keys","shouldRenderFormState","formStateData","updateFormState","find","convertToArrayPayload","shouldSubscribeByName","signalName","exact","some","currentName","startsWith","useSubscribe","props","_props","useRef","current","useEffect","subscription","disabled","subject","subscribe","next","unsubscribe","isString","generateWatchOutput","_names","formValues","isGlobal","watch","add","map","fieldName","watchAll","useController","methods","shouldUnregister","isArrayField","array","useWatch","_name","_subjects","values","updateValue","_formValues","useState","_getWatch","_removeUnmounted","useFormState","_formState","_mounted","_localProxyFormState","isDirty","isLoading","dirtyFields","touchedFields","validatingFields","isValidating","isValid","errors","_updateFormState","state","_updateValid","useMemo","_registerProps","register","rules","fieldState","defineProperties","invalid","enumerable","isTouched","error","field","onChange","onBlur","ref","elm","_fields","_f","focus","select","setCustomValidity","message","reportValidity","_shouldUnregisterField","_options","updateMounted","mount","_state","action","unregister","_updateDisabledField","fields","Controller","render","appendErrors","validateAllFieldCriteria","types","getValidationModes","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","isWatched","isBlurEvent","watchName","slice","iterateFieldsByAction","fieldsNames","abortEarly","currentField","refs","updateFieldArrayRootError","fieldArrayErrors","isFileInput","isFunction","isHTMLElement","owner","ownerDocument","defaultView","isMessage","isRadioInput","isRegex","RegExp","defaultResult","validResult","getCheckboxValue","options","option","attributes","defaultReturn","getRadioValue","previous","getValidateError","every","getValueAndMessage","validationData","validateField","async","disabledFieldNames","shouldUseNativeValidation","isFieldArray","required","maxLength","minLength","min","max","pattern","validate","valueAsNumber","inputValue","inputRef","isRadio","isCheckBox","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","exceedMin","maxOutput","minOutput","valueDate","valueAsDate","convertTimeToDate","time","toDateString","isTime","isWeek","valueNumber","maxLengthOutput","minLengthOutput","patternValue","match","validateError","validationResult","unset","paths","childObject","baseGet","updatePath","isEmptyArray","obj","createSubject","_observers","observers","observer","push","o","isPrimitive","deepEqual","object1","object2","getTime","keys1","keys2","val1","includes","val2","isMultipleSelect","live","isConnected","objectHasFunction","markFieldsDirty","isParentNodeArray","getDirtyFieldsFromDefaultValues","dirtyFieldsFromValues","getDirtyFields","getFieldValueAs","setValueAs","NaN","getFieldValue","files","selectedOptions","getRuleValue","rule","source","ASYNC_FUNCTION","schemaErrorLookup","join","foundError","pop","defaultOptions","reValidateMode","shouldFocusError","createFormControl","delayErrorCallback","submitCount","isSubmitted","isSubmitting","isSubmitSuccessful","unMount","timer","validationModeBeforeSubmit","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","criteriaMode","shouldUpdateValid","resolver","_executeSchema","executeBuiltInValidation","_updateIsValidating","from","forEach","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","shouldDirty","shouldRender","shouldUpdateField","isPreviousDirty","output","disabledField","_getDirty","isCurrentFieldPristine","isPreviousFieldTouched","shouldRenderByError","previousFieldError","callback","delayError","updateErrors","wait","clearTimeout","setTimeout","updatedFormState","context","getResolverOptions","shouldOnlyCheckValid","valid","isFieldArrayRoot","isPromiseFunction","fieldReference","validateFunction","fieldError","getValues","optionRef","selected","checkboxRef","radioRef","shouldTouch","shouldValidate","trigger","setValues","fieldKey","setValue","cloneValue","isFieldValueUpdated","_updateIsFieldValueUpdated","Number","shouldSkipValidation","deps","skipValidation","watched","previousErrorLookupResult","errorLookupResult","_focusInput","fieldNames","executeSchemaAndUpdateState","Promise","all","shouldFocus","getFieldState","setError","currentError","currentRef","restOfErrorTree","delete","keepValue","keepError","keepDirty","keepTouched","keepIsValidating","keepDefaultValue","keepIsValid","disabledIsDefined","progressive","fieldRef","querySelectorAll","radioOrCheckbox","_focusError","handleSubmit","onValid","onInvalid","e","onValidError","preventDefault","persist","fieldValues","size","_reset","keepStateOptions","updatedValues","cloneUpdatedValues","isEmptyResetValues","keepDefaultValues","keepValues","keepDirtyValues","fieldsToCheck","form","closest","reset","keepSubmitCount","keepIsSubmitted","keepErrors","keepIsSubmitSuccessful","_updateFieldArray","method","args","shouldSetValues","shouldUpdateFieldsAndState","argA","argB","unsetEmptyArray","_getFieldArray","_resetDefaultValues","then","resetOptions","_disableForm","_setErrors","payload","resetField","clearErrors","inputName","setFocus","shouldSelect","useForm","_formControl","_values"],"mappings":"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","x_google_ignoreList":[0]}