{"version":3,"file":"EmojiPanel.TJcM4M0j.js","sources":["../../../app/components/IconPicker/utils.ts","../../../node_modules/lodash/chunk.js","../../../app/components/IconPicker/components/Grid.tsx","../../../app/components/IconPicker/components/IconButton.tsx","../../../app/components/IconPicker/components/GridTemplate.tsx","../../../app/components/IconPicker/components/SkinTonePicker.tsx","../../../app/components/IconPicker/components/EmojiPanel.tsx"],"sourcesContent":["import i18next from \"i18next\";\n\nexport enum DisplayCategory {\n  All = \"All\",\n  Frequent = \"Frequent\",\n  Search = \"Search\",\n}\n\nexport const TRANSLATED_CATEGORIES = {\n  All: i18next.t(\"All\"),\n  Frequent: i18next.t(\"Frequently Used\"),\n  Search: i18next.t(\"Search Results\"),\n  People: i18next.t(\"Smileys & People\"),\n  Nature: i18next.t(\"Animals & Nature\"),\n  Foods: i18next.t(\"Food & Drink\"),\n  Activity: i18next.t(\"Activity\"),\n  Places: i18next.t(\"Travel & Places\"),\n  Objects: i18next.t(\"Objects\"),\n  Symbols: i18next.t(\"Symbols\"),\n  Flags: i18next.t(\"Flags\"),\n};\n\nexport const FREQUENTLY_USED_COUNT = {\n  Get: 24,\n  Track: 30,\n};\n\nconst STORAGE_KEYS = {\n  Base: \"icon-state\",\n  EmojiSkinTone: \"emoji-skintone\",\n  IconsFrequency: \"icons-freq\",\n  EmojisFrequency: \"emojis-freq\",\n  LastIcon: \"last-icon\",\n  LastEmoji: \"last-emoji\",\n};\n\nconst getStorageKey = (key: string) => `${STORAGE_KEYS.Base}.${key}`;\n\nexport const emojiSkinToneKey = getStorageKey(STORAGE_KEYS.EmojiSkinTone);\n\nexport const iconsFreqKey = getStorageKey(STORAGE_KEYS.IconsFrequency);\n\nexport const emojisFreqKey = getStorageKey(STORAGE_KEYS.EmojisFrequency);\n\nexport const lastIconKey = getStorageKey(STORAGE_KEYS.LastIcon);\n\nexport const lastEmojiKey = getStorageKey(STORAGE_KEYS.LastEmoji);\n\nexport const sortFrequencies = (freqs: [string, number][]) =>\n  freqs.sort((a, b) => (a[1] >= b[1] ? -1 : 1));\n","var baseSlice = require('./_baseSlice'),\n    isIterateeCall = require('./_isIterateeCall'),\n    toInteger = require('./toInteger');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeCeil = Math.ceil,\n    nativeMax = Math.max;\n\n/**\n * Creates an array of elements split into groups the length of `size`.\n * If `array` can't be split evenly, the final chunk will be the remaining\n * elements.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Array\n * @param {Array} array The array to process.\n * @param {number} [size=1] The length of each chunk\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {Array} Returns the new array of chunks.\n * @example\n *\n * _.chunk(['a', 'b', 'c', 'd'], 2);\n * // => [['a', 'b'], ['c', 'd']]\n *\n * _.chunk(['a', 'b', 'c', 'd'], 3);\n * // => [['a', 'b', 'c'], ['d']]\n */\nfunction chunk(array, size, guard) {\n  if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {\n    size = 1;\n  } else {\n    size = nativeMax(toInteger(size), 0);\n  }\n  var length = array == null ? 0 : array.length;\n  if (!length || size < 1) {\n    return [];\n  }\n  var index = 0,\n      resIndex = 0,\n      result = Array(nativeCeil(length / size));\n\n  while (index < length) {\n    result[resIndex++] = baseSlice(array, index, (index += size));\n  }\n  return result;\n}\n\nmodule.exports = chunk;\n","import React from \"react\";\nimport { FixedSizeList, ListChildComponentProps } from \"react-window\";\nimport styled from \"styled-components\";\n\ntype Props = {\n  width: number;\n  height: number;\n  data: React.ReactNode[][];\n  columns: number;\n  itemWidth: number;\n};\n\nconst Grid = (\n  { width, height, data, columns, itemWidth }: Props,\n  ref: React.Ref<HTMLDivElement>\n) => (\n  <Container\n    outerRef={ref}\n    width={width}\n    height={height}\n    itemCount={data.length}\n    itemSize={itemWidth}\n    itemData={{ data, columns }}\n  >\n    {Row}\n  </Container>\n);\n\ntype RowProps = {\n  data: React.ReactNode[][];\n  columns: number;\n};\n\nconst Row = ({ index, style, data }: ListChildComponentProps<RowProps>) => {\n  const { data: rows, columns } = data;\n  const row = rows[index];\n\n  return (\n    <RowContainer style={style} columns={columns}>\n      {row}\n    </RowContainer>\n  );\n};\n\nconst Container = styled(FixedSizeList<RowProps>)`\n  padding: 0px 12px;\n  overflow-x: hidden !important;\n\n  // Needed for the absolutely positioned children\n  // to respect the VirtualList's padding\n  & > div {\n    position: relative;\n  }\n`;\n\nconst RowContainer = styled.div<{ columns: number }>`\n  display: grid;\n  grid-template-columns: ${({ columns }) => `repeat(${columns}, 1fr)`};\n  align-content: center;\n`;\n\nexport default React.forwardRef(Grid);\n","import styled from \"styled-components\";\nimport { s, hover } from \"@shared/styles\";\nimport NudeButton from \"~/components/NudeButton\";\n\nexport const IconButton = styled(NudeButton)<{ delay?: number }>`\n  width: 32px;\n  height: 32px;\n  padding: 4px;\n\n  &: ${hover} {\n    background: ${s(\"listItemHoverBackground\")};\n  }\n`;\n","import chunk from \"lodash/chunk\";\nimport compact from \"lodash/compact\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { IconType } from \"@shared/types\";\nimport { IconLibrary } from \"@shared/utils/IconLibrary\";\nimport { Emoji } from \"~/components/Emoji\";\nimport Text from \"~/components/Text\";\nimport { TRANSLATED_CATEGORIES } from \"../utils\";\nimport Grid from \"./Grid\";\nimport { IconButton } from \"./IconButton\";\n\n/**\n * icon/emoji size is 24px; and we add 4px padding on all sides,\n */\nconst BUTTON_SIZE = 32;\n\ntype OutlineNode = {\n  type: IconType.SVG;\n  name: string;\n  color: string;\n  initial: string;\n  delay: number;\n};\n\ntype EmojiNode = {\n  type: IconType.Emoji;\n  id: string;\n  value: string;\n};\n\nexport type DataNode = {\n  category: keyof typeof TRANSLATED_CATEGORIES;\n  icons: (OutlineNode | EmojiNode)[];\n};\n\ntype Props = {\n  width: number;\n  height: number;\n  data: DataNode[];\n  onIconSelect: ({ id, value }: { id: string; value: string }) => void;\n};\n\nconst GridTemplate = (\n  { width, height, data, onIconSelect }: Props,\n  ref: React.Ref<HTMLDivElement>\n) => {\n  // 24px padding for the Grid Container\n  const itemsPerRow = Math.floor((width - 24) / BUTTON_SIZE);\n\n  const gridItems = compact(\n    data.flatMap((node) => {\n      if (node.icons.length === 0) {\n        return [];\n      }\n\n      const category = (\n        <CategoryName\n          key={node.category}\n          type=\"tertiary\"\n          size=\"xsmall\"\n          weight=\"bold\"\n        >\n          {TRANSLATED_CATEGORIES[node.category]}\n        </CategoryName>\n      );\n\n      const items = node.icons.map((item) => {\n        if (item.type === IconType.SVG) {\n          return (\n            <IconButton\n              key={item.name}\n              onClick={() => onIconSelect({ id: item.name, value: item.name })}\n              style={{ \"--delay\": `${item.delay}ms` } as React.CSSProperties}\n            >\n              <Icon as={IconLibrary.getComponent(item.name)} color={item.color}>\n                {item.initial}\n              </Icon>\n            </IconButton>\n          );\n        }\n\n        return (\n          <IconButton\n            key={item.id}\n            onClick={() => onIconSelect({ id: item.id, value: item.value })}\n          >\n            <Emoji width={24} height={24}>\n              {item.value}\n            </Emoji>\n          </IconButton>\n        );\n      });\n\n      const chunks = chunk(items, itemsPerRow);\n      return [[category], ...chunks];\n    })\n  );\n\n  return (\n    <Grid\n      ref={ref}\n      width={width}\n      height={height}\n      data={gridItems}\n      columns={itemsPerRow}\n      itemWidth={BUTTON_SIZE}\n    />\n  );\n};\n\nconst CategoryName = styled(Text)`\n  grid-column: 1 / -1;\n  padding-left: 6px;\n`;\n\nconst Icon = styled.svg`\n  transition: color 150ms ease-in-out, fill 150ms ease-in-out;\n  transition-delay: var(--delay);\n`;\n\nexport default React.forwardRef(GridTemplate);\n","import React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Menu, MenuButton, MenuItem, useMenuState } from \"reakit\";\nimport styled from \"styled-components\";\nimport { depths, s, hover } from \"@shared/styles\";\nimport { EmojiSkinTone } from \"@shared/types\";\nimport { getEmojiVariants } from \"@shared/utils/emoji\";\nimport { Emoji } from \"~/components/Emoji\";\nimport Flex from \"~/components/Flex\";\nimport NudeButton from \"~/components/NudeButton\";\nimport { IconButton } from \"./IconButton\";\n\nconst SkinTonePicker = ({\n  skinTone,\n  onChange,\n}: {\n  skinTone: EmojiSkinTone;\n  onChange: (skin: EmojiSkinTone) => void;\n}) => {\n  const { t } = useTranslation();\n\n  const handEmojiVariants = React.useMemo(\n    () => getEmojiVariants({ id: \"hand\" }),\n    []\n  );\n\n  const menu = useMenuState({\n    placement: \"bottom-end\",\n  });\n\n  const handleSkinClick = React.useCallback(\n    (emojiSkin) => {\n      menu.hide();\n      onChange(emojiSkin);\n    },\n    [menu, onChange]\n  );\n\n  const menuItems = React.useMemo(\n    () =>\n      Object.entries(handEmojiVariants).map(([eskin, emoji]) => (\n        <MenuItem {...menu} key={emoji.value}>\n          {(menuprops) => (\n            <IconButton {...menuprops} onClick={() => handleSkinClick(eskin)}>\n              <Emoji width={24} height={24}>\n                {emoji.value}\n              </Emoji>\n            </IconButton>\n          )}\n        </MenuItem>\n      )),\n    [menu, handEmojiVariants, handleSkinClick]\n  );\n\n  return (\n    <>\n      <MenuButton {...menu}>\n        {(props) => (\n          <StyledMenuButton\n            {...props}\n            aria-label={t(\"Choose default skin tone\")}\n          >\n            {handEmojiVariants[skinTone]!.value}\n          </StyledMenuButton>\n        )}\n      </MenuButton>\n      <Menu {...menu} aria-label={t(\"Choose default skin tone\")}>\n        {(props) => <MenuContainer {...props}>{menuItems}</MenuContainer>}\n      </Menu>\n    </>\n  );\n};\n\nconst MenuContainer = styled(Flex)`\n  z-index: ${depths.menu};\n  padding: 4px;\n  border-radius: 4px;\n  background: ${s(\"menuBackground\")};\n  box-shadow: ${s(\"menuShadow\")};\n`;\n\nconst StyledMenuButton = styled(NudeButton)`\n  width: 32px;\n  height: 32px;\n  border: 1px solid ${s(\"inputBorder\")};\n  padding: 4px;\n\n  &: ${hover} {\n    border: 1px solid ${s(\"inputBorderFocused\")};\n  }\n`;\n\nexport default SkinTonePicker;\n","import concat from \"lodash/concat\";\nimport React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport styled from \"styled-components\";\nimport { EmojiCategory, EmojiSkinTone, IconType } from \"@shared/types\";\nimport { getEmojis, getEmojisWithCategory, search } from \"@shared/utils/emoji\";\nimport Flex from \"~/components/Flex\";\nimport InputSearch from \"~/components/InputSearch\";\nimport usePersistedState from \"~/hooks/usePersistedState\";\nimport {\n  FREQUENTLY_USED_COUNT,\n  DisplayCategory,\n  emojiSkinToneKey,\n  emojisFreqKey,\n  lastEmojiKey,\n  sortFrequencies,\n} from \"../utils\";\nimport GridTemplate, { DataNode } from \"./GridTemplate\";\nimport SkinTonePicker from \"./SkinTonePicker\";\n\nconst GRID_HEIGHT = 410;\n\nconst useEmojiState = () => {\n  const [emojiSkinTone, setEmojiSkinTone] = usePersistedState<EmojiSkinTone>(\n    emojiSkinToneKey,\n    EmojiSkinTone.Default\n  );\n  const [emojisFreq, setEmojisFreq] = usePersistedState<Record<string, number>>(\n    emojisFreqKey,\n    {}\n  );\n  const [lastEmoji, setLastEmoji] = usePersistedState<string | undefined>(\n    lastEmojiKey,\n    undefined\n  );\n\n  const incrementEmojiCount = React.useCallback(\n    (emoji: string) => {\n      emojisFreq[emoji] = (emojisFreq[emoji] ?? 0) + 1;\n      setEmojisFreq({ ...emojisFreq });\n      setLastEmoji(emoji);\n    },\n    [emojisFreq, setEmojisFreq, setLastEmoji]\n  );\n\n  const getFreqEmojis = React.useCallback(() => {\n    const freqs = Object.entries(emojisFreq);\n\n    if (freqs.length > FREQUENTLY_USED_COUNT.Track) {\n      sortFrequencies(freqs).splice(FREQUENTLY_USED_COUNT.Track);\n      setEmojisFreq(Object.fromEntries(freqs));\n    }\n\n    const emojis = sortFrequencies(freqs)\n      .slice(0, FREQUENTLY_USED_COUNT.Get)\n      .map(([emoji, _]) => emoji);\n\n    const isLastPresent = emojis.includes(lastEmoji ?? \"\");\n    if (lastEmoji && !isLastPresent) {\n      emojis.pop();\n      emojis.push(lastEmoji);\n    }\n\n    return emojis;\n  }, [emojisFreq, setEmojisFreq, lastEmoji]);\n\n  return {\n    emojiSkinTone,\n    setEmojiSkinTone,\n    incrementEmojiCount,\n    getFreqEmojis,\n  };\n};\n\ntype Props = {\n  panelWidth: number;\n  query: string;\n  panelActive: boolean;\n  height?: number;\n  onEmojiChange: (emoji: string) => void;\n  onQueryChange: (query: string) => void;\n};\n\nconst EmojiPanel = ({\n  panelWidth,\n  query,\n  panelActive,\n  onEmojiChange,\n  onQueryChange,\n  height = GRID_HEIGHT,\n}: Props) => {\n  const { t } = useTranslation();\n\n  const searchRef = React.useRef<HTMLInputElement | null>(null);\n  const scrollableRef = React.useRef<HTMLDivElement | null>(null);\n\n  const {\n    emojiSkinTone: skinTone,\n    setEmojiSkinTone,\n    incrementEmojiCount,\n    getFreqEmojis,\n  } = useEmojiState();\n\n  const freqEmojis = React.useMemo(() => getFreqEmojis(), [getFreqEmojis]);\n\n  const handleFilter = React.useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      onQueryChange(event.target.value);\n    },\n    [onQueryChange]\n  );\n\n  const handleSkinChange = React.useCallback(\n    (emojiSkinTone: EmojiSkinTone) => {\n      setEmojiSkinTone(emojiSkinTone);\n    },\n    [setEmojiSkinTone]\n  );\n\n  const handleEmojiSelection = React.useCallback(\n    ({ id, value }: { id: string; value: string }) => {\n      onEmojiChange(value);\n      incrementEmojiCount(id);\n    },\n    [onEmojiChange, incrementEmojiCount]\n  );\n\n  const isSearch = query !== \"\";\n  const templateData: DataNode[] = isSearch\n    ? getSearchResults({\n        query,\n        skinTone,\n      })\n    : getAllEmojis({\n        skinTone,\n        freqEmojis,\n      });\n\n  React.useEffect(() => {\n    if (scrollableRef.current) {\n      scrollableRef.current.scrollTop = 0;\n    }\n    searchRef.current?.focus();\n  }, [panelActive]);\n\n  return (\n    <Flex column>\n      <UserInputContainer align=\"center\" gap={12}>\n        <StyledInputSearch\n          ref={searchRef}\n          value={query}\n          placeholder={`${t(\"Search emoji\")}…`}\n          onChange={handleFilter}\n        />\n        <SkinTonePicker skinTone={skinTone} onChange={handleSkinChange} />\n      </UserInputContainer>\n      <GridTemplate\n        ref={scrollableRef}\n        width={panelWidth}\n        height={height - 48}\n        data={templateData}\n        onIconSelect={handleEmojiSelection}\n      />\n    </Flex>\n  );\n};\n\nconst getSearchResults = ({\n  query,\n  skinTone,\n}: {\n  query: string;\n  skinTone: EmojiSkinTone;\n}): DataNode[] => {\n  const emojis = search({ query, skinTone });\n  return [\n    {\n      category: DisplayCategory.Search,\n      icons: emojis.map((emoji) => ({\n        type: IconType.Emoji,\n        id: emoji.id,\n        value: emoji.value,\n      })),\n    },\n  ];\n};\n\nconst getAllEmojis = ({\n  skinTone,\n  freqEmojis,\n}: {\n  skinTone: EmojiSkinTone;\n  freqEmojis: string[];\n}): DataNode[] => {\n  const emojisWithCategory = getEmojisWithCategory({ skinTone });\n\n  const getFrequentEmojis = (): DataNode => {\n    const emojis = getEmojis({ ids: freqEmojis, skinTone });\n    return {\n      category: DisplayCategory.Frequent,\n      icons: emojis.map((emoji) => ({\n        type: IconType.Emoji,\n        id: emoji.id,\n        value: emoji.value,\n      })),\n    };\n  };\n\n  const getCategoryData = (emojiCategory: EmojiCategory): DataNode => {\n    const emojis = emojisWithCategory[emojiCategory] ?? [];\n    return {\n      category: emojiCategory,\n      icons: emojis.map((emoji) => ({\n        type: IconType.Emoji,\n        id: emoji.id,\n        value: emoji.value,\n      })),\n    };\n  };\n\n  return concat(\n    getFrequentEmojis(),\n    getCategoryData(EmojiCategory.People),\n    getCategoryData(EmojiCategory.Nature),\n    getCategoryData(EmojiCategory.Foods),\n    getCategoryData(EmojiCategory.Activity),\n    getCategoryData(EmojiCategory.Places),\n    getCategoryData(EmojiCategory.Objects),\n    getCategoryData(EmojiCategory.Symbols),\n    getCategoryData(EmojiCategory.Flags)\n  );\n};\n\nconst UserInputContainer = styled(Flex)`\n  height: 48px;\n  padding: 6px 12px 0px;\n`;\n\nconst StyledInputSearch = styled(InputSearch)`\n  flex-grow: 1;\n`;\n\nexport default EmojiPanel;\n"],"names":["DisplayCategory","All","Frequent","Search","TRANSLATED_CATEGORIES","i18next","t","People","Nature","Foods","Activity","Places","Objects","Symbols","Flags","FREQUENTLY_USED_COUNT","Get","Track","STORAGE_KEYS","getStorageKey","key","emojiSkinToneKey","iconsFreqKey","emojisFreqKey","lastIconKey","lastEmojiKey","sortFrequencies","freqs","sort","a","b","baseSlice","require$$0","isIterateeCall","require$$1","toInteger","require$$2","nativeCeil","Math","ceil","nativeMax","max","chunk","array","size","guard","length","index","resIndex","result","Array","Row","style","data","rows","columns","row","RowContainer","Container","styled","FixedSizeList","withConfig","componentId","div","Grid$1","React","forwardRef","Grid","width","height","itemWidth","ref","jsx","outerRef","itemCount","itemSize","itemData","IconButton","NudeButton","hover","s","CategoryName","Text","Icon","svg","GridTemplate$1","GridTemplate","onIconSelect","itemsPerRow","floor","gridItems","compact","flatMap","node","icons","category","type","weight","items","map","item","IconType","SVG","onClick","id","name","value","delay","children","as","IconLibrary","getComponent","color","initial","Emoji","SkinTonePicker","skinTone","onChange","useTranslation","handEmojiVariants","useMemo","getEmojiVariants","menu","useMenuState","placement","handleSkinClick","useCallback","emojiSkin","hide","menuItems","Object","entries","eskin","emoji","createElement","MenuItem","menuprops","jsxs","Fragment","MenuButton","props","StyledMenuButton","Menu","MenuContainer","Flex","depths","EmojiPanel","panelWidth","query","panelActive","onEmojiChange","onQueryChange","searchRef","useRef","scrollableRef","emojiSkinTone","setEmojiSkinTone","incrementEmojiCount","getFreqEmojis","useEmojiState","usePersistedState","EmojiSkinTone","Default","emojisFreq","setEmojisFreq","lastEmoji","setLastEmoji","undefined","splice","fromEntries","emojis","slice","_","isLastPresent","includes","pop","push","freqEmojis","handleFilter","event","target","handleSkinChange","handleEmojiSelection","templateData","getSearchResults","getAllEmojis","useEffect","current","scrollTop","focus","column","UserInputContainer","align","gap","StyledInputSearch","placeholder","search","emojisWithCategory","getEmojisWithCategory","getCategoryData","emojiCategory","concat","getFrequentEmojis","getEmojis","ids","EmojiCategory","InputSearch"],"mappings":"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","x_google_ignoreList":[1]}