{"version":3,"file":"Security.4FMzq2Cn.js","sources":["../../../app/scenes/Settings/components/DomainManagement.tsx","../../../app/scenes/Settings/Security.tsx"],"sourcesContent":["import { observer } from \"mobx-react\";\nimport { CloseIcon } from \"outline-icons\";\nimport * as React from \"react\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport { toast } from \"sonner\";\nimport styled from \"styled-components\";\nimport Button from \"~/components/Button\";\nimport Flex from \"~/components/Flex\";\nimport Input from \"~/components/Input\";\nimport NudeButton from \"~/components/NudeButton\";\nimport Tooltip from \"~/components/Tooltip\";\nimport useCurrentTeam from \"~/hooks/useCurrentTeam\";\nimport SettingRow from \"./SettingRow\";\n\ntype Props = {\n  onSuccess: () => void;\n};\n\nfunction DomainManagement({ onSuccess }: Props) {\n  const team = useCurrentTeam();\n  const { t } = useTranslation();\n\n  const [allowedDomains, setAllowedDomains] = React.useState([\n    ...(team.allowedDomains ?? []),\n  ]);\n  const [lastKnownDomainCount, updateLastKnownDomainCount] = React.useState(\n    allowedDomains.length\n  );\n\n  const [existingDomainsTouched, setExistingDomainsTouched] =\n    React.useState(false);\n\n  const handleSaveDomains = React.useCallback(async () => {\n    try {\n      await team.save({ allowedDomains });\n      onSuccess();\n      setExistingDomainsTouched(false);\n      updateLastKnownDomainCount(allowedDomains.length);\n    } catch (err) {\n      toast.error(err.message);\n    }\n  }, [team, allowedDomains, onSuccess]);\n\n  const handleRemoveDomain = async (index: number) => {\n    const newDomains = allowedDomains.filter((_, i) => index !== i);\n\n    setAllowedDomains(newDomains);\n\n    const touchedExistingDomain = index < lastKnownDomainCount;\n    if (touchedExistingDomain) {\n      setExistingDomainsTouched(true);\n    }\n  };\n\n  const handleAddDomain = () => {\n    const newDomains = [...allowedDomains, \"\"];\n\n    setAllowedDomains(newDomains);\n  };\n\n  const createOnDomainChangedHandler =\n    (index: number) => (ev: React.ChangeEvent<HTMLInputElement>) => {\n      const newDomains = allowedDomains.slice();\n\n      newDomains[index] = ev.currentTarget.value;\n      setAllowedDomains(newDomains);\n\n      const touchedExistingDomain = index < lastKnownDomainCount;\n      if (touchedExistingDomain) {\n        setExistingDomainsTouched(true);\n      }\n    };\n\n  const showSaveChanges =\n    existingDomainsTouched ||\n    allowedDomains.filter((value: string) => value !== \"\").length > // New domains were added\n      lastKnownDomainCount;\n\n  return (\n    <SettingRow\n      label={t(\"Allowed domains\")}\n      name=\"allowedDomains\"\n      description={t(\n        \"The domains which should be allowed to create new accounts using SSO. Changing this setting does not affect existing user accounts.\"\n      )}\n    >\n      {allowedDomains.map((domain, index) => (\n        <Flex key={index} gap={4}>\n          <Input\n            key={index}\n            id={`allowedDomains${index}`}\n            value={domain}\n            autoFocus={!domain}\n            placeholder=\"example.com\"\n            required\n            flex\n            onChange={createOnDomainChangedHandler(index)}\n          />\n          <Remove>\n            <Tooltip content={t(\"Remove domain\")} placement=\"top\">\n              <NudeButton onClick={() => handleRemoveDomain(index)}>\n                <CloseIcon />\n              </NudeButton>\n            </Tooltip>\n          </Remove>\n        </Flex>\n      ))}\n\n      <Flex justify=\"space-between\" gap={4} style={{ flexWrap: \"wrap\" }}>\n        {!allowedDomains.length ||\n        allowedDomains[allowedDomains.length - 1] !== \"\" ? (\n          <Button type=\"button\" onClick={handleAddDomain} neutral>\n            {allowedDomains.length ? (\n              <Trans>Add another</Trans>\n            ) : (\n              <Trans>Add a domain</Trans>\n            )}\n          </Button>\n        ) : (\n          <span />\n        )}\n\n        {showSaveChanges && (\n          <Button\n            type=\"button\"\n            onClick={handleSaveDomains}\n            disabled={team.isSaving}\n          >\n            <Trans>Save changes</Trans>\n          </Button>\n        )}\n      </Flex>\n    </SettingRow>\n  );\n}\n\nconst Remove = styled(\"div\")`\n  margin-top: 6px;\n`;\n\nexport default observer(DomainManagement);\n","import debounce from \"lodash/debounce\";\nimport { observer } from \"mobx-react\";\nimport { CheckboxIcon, EmailIcon, PadlockIcon } from \"outline-icons\";\nimport { useState } from \"react\";\nimport * as React from \"react\";\nimport { useTranslation, Trans } from \"react-i18next\";\nimport { toast } from \"sonner\";\nimport { useTheme } from \"styled-components\";\nimport { TeamPreference } from \"@shared/types\";\nimport ConfirmationDialog from \"~/components/ConfirmationDialog\";\nimport Flex from \"~/components/Flex\";\nimport Heading from \"~/components/Heading\";\nimport { InputSelectNew, Option } from \"~/components/InputSelectNew\";\nimport PluginIcon from \"~/components/PluginIcon\";\nimport Scene from \"~/components/Scene\";\nimport Switch from \"~/components/Switch\";\nimport Text from \"~/components/Text\";\nimport env from \"~/env\";\nimport useCurrentTeam from \"~/hooks/useCurrentTeam\";\nimport useRequest from \"~/hooks/useRequest\";\nimport useStores from \"~/hooks/useStores\";\nimport isCloudHosted from \"~/utils/isCloudHosted\";\nimport DomainManagement from \"./components/DomainManagement\";\nimport SettingRow from \"./components/SettingRow\";\n\nfunction Security() {\n  const { authenticationProviders, dialogs } = useStores();\n  const team = useCurrentTeam();\n  const { t } = useTranslation();\n  const theme = useTheme();\n  const [data, setData] = useState({\n    sharing: team.sharing,\n    documentEmbeds: team.documentEmbeds,\n    guestSignin: team.guestSignin,\n    defaultUserRole: team.defaultUserRole,\n    memberCollectionCreate: team.memberCollectionCreate,\n    memberTeamCreate: team.memberTeamCreate,\n    inviteRequired: team.inviteRequired,\n  });\n\n  const {\n    data: providers,\n    loading,\n    request,\n  } = useRequest(authenticationProviders.fetchPage);\n\n  const userRoleOptions: Option[] = React.useMemo(\n    () =>\n      [\n        {\n          type: \"item\",\n          label: t(\"Editor\"),\n          value: \"member\",\n        },\n        {\n          type: \"item\",\n          label: t(\"Viewer\"),\n          value: \"viewer\",\n        },\n      ] satisfies Option[],\n    [t]\n  );\n\n  React.useEffect(() => {\n    if (!providers && !loading) {\n      void request();\n    }\n  }, [loading, providers, request]);\n\n  const showSuccessMessage = React.useMemo(\n    () =>\n      debounce(() => {\n        toast.success(t(\"Settings saved\"));\n      }, 250),\n    [t]\n  );\n\n  const saveData = React.useCallback(\n    async (newData) => {\n      try {\n        setData((prev) => ({ ...prev, ...newData }));\n        await team.save(newData);\n        showSuccessMessage();\n      } catch (err) {\n        toast.error(err.message);\n      }\n    },\n    [team, showSuccessMessage]\n  );\n\n  const handleChange = React.useCallback(\n    async (ev: React.ChangeEvent<HTMLInputElement>) => {\n      await saveData({ [ev.target.id]: ev.target.checked });\n    },\n    [saveData]\n  );\n\n  const handleDefaultRoleChange = React.useCallback(\n    async (newDefaultRole: string) => {\n      await saveData({ defaultUserRole: newDefaultRole });\n    },\n    [saveData]\n  );\n\n  const handlePreferenceChange = React.useCallback(\n    async (ev: React.ChangeEvent<HTMLInputElement>) => {\n      const preferences = {\n        ...team.preferences,\n        [ev.target.id]: ev.target.checked,\n      };\n      await saveData({ preferences });\n    },\n    [saveData, team.preferences]\n  );\n\n  const handleInviteRequiredChange = React.useCallback(\n    async (ev: React.ChangeEvent<HTMLInputElement>) => {\n      const inviteRequired = ev.target.checked;\n      const newData = { ...data, inviteRequired };\n\n      if (inviteRequired) {\n        dialogs.openModal({\n          title: t(\"Are you sure you want to require invites?\"),\n          content: (\n            <ConfirmationDialog\n              onSubmit={async () => {\n                await saveData(newData);\n              }}\n              savingText={`${t(\"Saving\")}â€¦`}\n              danger\n            >\n              <Trans\n                defaults=\"New users will first need to be invited to create an account. <em>Default role</em> and <em>Allowed domains</em> will no longer apply.\"\n                values={{\n                  authenticationMethods: team.signinMethods,\n                }}\n                components={{\n                  em: <strong />,\n                }}\n              />\n            </ConfirmationDialog>\n          ),\n        });\n        return;\n      }\n\n      await saveData(newData);\n    },\n    [data, saveData, t, dialogs, team.signinMethods]\n  );\n\n  return (\n    <Scene title={t(\"Security\")} icon={<PadlockIcon />}>\n      <Heading>{t(\"Security\")}</Heading>\n      <Text as=\"p\" type=\"secondary\">\n        <Trans>\n          Settings that impact the access, security, and content of your\n          workspace.\n        </Trans>\n      </Text>\n\n      <h2>{t(\"Sign In\")}</h2>\n      {authenticationProviders.orderedData\n        // filtering unconnected, until we have ability to connect from this screen\n        .filter((provider) => provider.isConnected)\n        .map((provider) => (\n          <SettingRow\n            key={provider.name}\n            label={\n              <Flex gap={8} align=\"center\">\n                <PluginIcon id={provider.name} /> {provider.displayName}\n              </Flex>\n            }\n            name={provider.name}\n            description={t(\"Allow members to sign-in with {{ authProvider }}\", {\n              authProvider: provider.displayName,\n            })}\n          >\n            <Flex align=\"center\">\n              <CheckboxIcon\n                color={provider.isActive ? theme.accent : undefined}\n                checked={provider.isActive}\n              />{\" \"}\n              <Text as=\"p\" type=\"secondary\">\n                {provider.isActive ? t(\"Connected\") : t(\"Disabled\")}\n              </Text>\n            </Flex>\n          </SettingRow>\n        ))}\n      <SettingRow\n        label={\n          <Flex gap={8} align=\"center\">\n            <EmailIcon /> {t(\"Email\")}\n          </Flex>\n        }\n        name=\"guestSignin\"\n        description={\n          env.EMAIL_ENABLED\n            ? t(\"Allow members to sign-in using their email address\")\n            : t(\"The server must have SMTP configured to enable this setting\")\n        }\n        border={false}\n      >\n        <Switch\n          id=\"guestSignin\"\n          checked={data.guestSignin}\n          onChange={handleChange}\n          disabled={!env.EMAIL_ENABLED}\n        />\n      </SettingRow>\n\n      <h2>{t(\"Access\")}</h2>\n      <SettingRow\n        label={t(\"Allow users to send invites\")}\n        name={TeamPreference.MembersCanInvite}\n        description={t(\"Allow editors to invite other people to the workspace\")}\n      >\n        <Switch\n          id={TeamPreference.MembersCanInvite}\n          checked={team.getPreference(TeamPreference.MembersCanInvite)}\n          onChange={handlePreferenceChange}\n        />\n      </SettingRow>\n      {isCloudHosted && (\n        <SettingRow\n          label={t(\"Require invites\")}\n          name=\"inviteRequired\"\n          description={t(\n            \"Require members to be invited to the workspace before they can create an account using SSO.\"\n          )}\n        >\n          <Switch\n            id=\"inviteRequired\"\n            checked={data.inviteRequired}\n            onChange={handleInviteRequiredChange}\n          />\n        </SettingRow>\n      )}\n\n      {!data.inviteRequired && (\n        <SettingRow\n          label={t(\"Default role\")}\n          name=\"defaultUserRole\"\n          description={t(\n            \"The default user role for new accounts. Changing this setting does not affect existing user accounts.\"\n          )}\n          border={false}\n        >\n          <InputSelectNew\n            value={data.defaultUserRole}\n            options={userRoleOptions}\n            onChange={handleDefaultRoleChange}\n            ariaLabel={t(\"Default role\")}\n            label={t(\"Default role\")}\n            hideLabel\n            short\n          />\n        </SettingRow>\n      )}\n\n      <DomainManagement onSuccess={showSuccessMessage} />\n\n      <h2>{t(\"Behavior\")}</h2>\n      <SettingRow\n        label={t(\"Public document sharing\")}\n        name=\"sharing\"\n        description={t(\n          \"When enabled, documents can be shared publicly on the internet by any member of the workspace\"\n        )}\n      >\n        <Switch id=\"sharing\" checked={data.sharing} onChange={handleChange} />\n      </SettingRow>\n      <SettingRow\n        label={t(\"Viewer document exports\")}\n        name={TeamPreference.ViewersCanExport}\n        description={t(\n          \"When enabled, viewers can see download options for documents\"\n        )}\n      >\n        <Switch\n          id={TeamPreference.ViewersCanExport}\n          checked={team.getPreference(TeamPreference.ViewersCanExport)}\n          onChange={handlePreferenceChange}\n        />\n      </SettingRow>\n      <SettingRow\n        label={t(\"Users can delete account\")}\n        name={TeamPreference.MembersCanDeleteAccount}\n        description={t(\n          \"When enabled, users can delete their own account from the workspace\"\n        )}\n      >\n        <Switch\n          id={TeamPreference.MembersCanDeleteAccount}\n          checked={team.getPreference(TeamPreference.MembersCanDeleteAccount)}\n          onChange={handlePreferenceChange}\n        />\n      </SettingRow>\n      <SettingRow\n        label={t(\"Rich service embeds\")}\n        name=\"documentEmbeds\"\n        description={t(\n          \"Links to supported services are shown as rich embeds within your documents\"\n        )}\n      >\n        <Switch\n          id=\"documentEmbeds\"\n          checked={data.documentEmbeds}\n          onChange={handleChange}\n        />\n      </SettingRow>\n      <SettingRow\n        label={t(\"Collection creation\")}\n        name=\"memberCollectionCreate\"\n        description={t(\n          \"Allow editors to create new collections within the workspace\"\n        )}\n      >\n        <Switch\n          id=\"memberCollectionCreate\"\n          checked={data.memberCollectionCreate}\n          onChange={handleChange}\n        />\n      </SettingRow>\n      {isCloudHosted && (\n        <SettingRow\n          label={t(\"Workspace creation\")}\n          name=\"memberTeamCreate\"\n          description={t(\"Allow editors to create new workspaces\")}\n        >\n          <Switch\n            id=\"memberTeamCreate\"\n            checked={data.memberTeamCreate}\n            onChange={handleChange}\n          />\n        </SettingRow>\n      )}\n    </Scene>\n  );\n}\n\nexport default observer(Security);\n"],"names":["Remove","styled","withConfig","componentId","observer","DomainManagement","onSuccess","team","useCurrentTeam","t","useTranslation","allowedDomains","setAllowedDomains","React","useState","lastKnownDomainCount","updateLastKnownDomainCount","length","existingDomainsTouched","setExistingDomainsTouched","handleSaveDomains","async","save","err","error","message","createOnDomainChangedHandler","index","ev","newDomains","slice","currentTarget","value","showSaveChanges","filter","jsxs","SettingRow","label","name","description","map","domain","Flex","gap","children","jsx","Input","id","autoFocus","placeholder","required","flex","onChange","Tooltip","content","placement","NudeButton","onClick","_","i","handleRemoveDomain","CloseIcon","justify","style","flexWrap","Button","type","handleAddDomain","neutral","Trans","disabled","isSaving","Security","authenticationProviders","dialogs","useStores","theme","useTheme","data","setData","sharing","documentEmbeds","guestSignin","defaultUserRole","memberCollectionCreate","memberTeamCreate","inviteRequired","providers","loading","request","useRequest","fetchPage","userRoleOptions","useMemo","showSuccessMessage","debounce","success","saveData","newData","prev","handleChange","target","checked","handleDefaultRoleChange","newDefaultRole","handlePreferenceChange","preferences","handleInviteRequiredChange","openModal","title","ConfirmationDialog","onSubmit","savingText","danger","defaults","values","authenticationMethods","signinMethods","components","em","Scene","icon","PadlockIcon","Heading","Text","as","orderedData","provider","isConnected","align","PluginIcon","displayName","authProvider","CheckboxIcon","color","isActive","accent","undefined","EmailIcon","env","EMAIL_ENABLED","border","Switch","TeamPreference","MembersCanInvite","getPreference","isCloudHosted","InputSelectNew","options","ariaLabel","hideLabel","short","ViewersCanExport","MembersCanDeleteAccount"],"mappings":"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"}