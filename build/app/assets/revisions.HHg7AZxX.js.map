{"version":3,"file":"revisions.HHg7AZxX.js","sources":["../../../app/actions/definitions/revisions.tsx"],"sourcesContent":["import copy from \"copy-to-clipboard\";\nimport { LinkIcon, RestoreIcon } from \"outline-icons\";\nimport * as React from \"react\";\nimport { matchPath } from \"react-router-dom\";\nimport { toast } from \"sonner\";\nimport stores from \"~/stores\";\nimport { createAction } from \"~/actions\";\nimport { RevisionSection } from \"~/actions/sections\";\nimport history from \"~/utils/history\";\nimport {\n  documentHistoryPath,\n  matchDocumentHistory,\n} from \"~/utils/routeHelpers\";\n\nexport const restoreRevision = createAction({\n  name: ({ t }) => t(\"Restore revision\"),\n  analyticsName: \"Restore revision\",\n  icon: <RestoreIcon />,\n  section: RevisionSection,\n  visible: ({ activeDocumentId }) =>\n    !!activeDocumentId && stores.policies.abilities(activeDocumentId).update,\n  perform: async ({ event, location, activeDocumentId }) => {\n    event?.preventDefault();\n    if (!activeDocumentId) {\n      return;\n    }\n\n    const match = matchPath<{ revisionId: string }>(location.pathname, {\n      path: matchDocumentHistory,\n    });\n    const revisionId = match?.params.revisionId;\n\n    const document = stores.documents.get(activeDocumentId);\n    if (!document) {\n      return;\n    }\n\n    history.push(document.url, {\n      restore: true,\n      revisionId,\n    });\n  },\n});\n\nexport const copyLinkToRevision = createAction({\n  name: ({ t }) => t(\"Copy link\"),\n  analyticsName: \"Copy link to revision\",\n  icon: <LinkIcon />,\n  section: RevisionSection,\n  perform: async ({ activeDocumentId, t }) => {\n    if (!activeDocumentId) {\n      return;\n    }\n\n    const match = matchPath<{ revisionId: string }>(location.pathname, {\n      path: matchDocumentHistory,\n    });\n    const revisionId = match?.params.revisionId;\n    const document = stores.documents.get(activeDocumentId);\n    if (!document) {\n      return;\n    }\n\n    const url = `${window.location.origin}${documentHistoryPath(\n      document,\n      revisionId\n    )}`;\n\n    copy(url, {\n      format: \"text/plain\",\n      onCopy: () => {\n        toast.message(t(\"Link copied\"));\n      },\n    });\n  },\n});\n\nexport const rootRevisionActions = [];\n"],"names":["restoreRevision","createAction","name","t","analyticsName","icon","RestoreIcon","section","RevisionSection","visible","activeDocumentId","stores","policies","abilities","update","perform","async","event","location","preventDefault","match","matchPath","pathname","path","matchDocumentHistory","revisionId","params","document","documents","get","push","url","restore","copyLinkToRevision","LinkIcon","window","origin","documentHistoryPath","copy","format","onCopy","message","rootRevisionActions"],"mappings":"yJAcO,MAAMA,EAAkBC,EAAa,CAC1CC,KAAMA,EAAGC,OAAQA,EAAE,oBACnBC,cAAe,mBACfC,OAAOC,EAAcA,YAAA,IACrBC,QAASC,EACTC,QAASA,EAAGC,wBACRA,GAAoBC,EAAOC,SAASC,UAAUH,GAAkBI,OACpEC,QAASC,OAASC,QAAOC,SAAAA,EAAUR,uBAEjC,GADAO,GAAOE,kBACFT,EACH,OAGIU,MAAAA,EAAQC,EAAkCH,EAASI,SAAU,CACjEC,KAAMC,IAEFC,EAAaL,GAAOM,OAAOD,WAE3BE,EAAWhB,EAAOiB,UAAUC,IAAInB,GACjCiB,GAIGG,EAAAA,KAAKH,EAASI,IAAK,CACzBC,SAAS,EACTP,cACD,IAIQQ,EAAqBhC,EAAa,CAC7CC,KAAMA,EAAGC,OAAQA,EAAE,aACnBC,cAAe,wBACfC,OAAO6B,EAAWA,SAAA,IAClB3B,QAASC,EACTO,QAASC,OAASN,mBAAkBP,QAClC,IAAKO,EACH,OAGIU,MAAAA,EAAQC,EAAkCH,SAASI,SAAU,CACjEC,KAAMC,IAEFC,EAAaL,GAAOM,OAAOD,WAC3BE,EAAWhB,EAAOiB,UAAUC,IAAInB,GACtC,IAAKiB,EACH,OAGII,MAAAA,EAAM,GAAGI,OAAOjB,SAASkB,SAASC,EACtCV,EACAF,KAGFa,EAAKP,EAAK,CACRQ,OAAQ,aACRC,OAAQA,KACAC,EAAAA,QAAQtC,EAAE,eAAc,GAEjC,IAIQuC,EAAsB"}