{"version":3,"file":"Authenticated.TvoiXRmt.js","sources":["../../../app/components/Authenticated.tsx"],"sourcesContent":["import { observer } from \"mobx-react\";\nimport * as React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Redirect } from \"react-router-dom\";\nimport useCurrentUser from \"~/hooks/useCurrentUser\";\nimport useStores from \"~/hooks/useStores\";\nimport { changeLanguage } from \"~/utils/language\";\nimport { logoutPath } from \"~/utils/routeHelpers\";\nimport LoadingIndicator from \"./LoadingIndicator\";\n\ntype Props = {\n  children: JSX.Element;\n};\n\nconst Authenticated = ({ children }: Props) => {\n  const { auth } = useStores();\n  const { i18n } = useTranslation();\n  const user = useCurrentUser({ rejectOnEmpty: false });\n  const language = user?.language;\n\n  // Watching for language changes here as this is the earliest point we might have the user\n  // available and means we can start loading translations faster\n  React.useEffect(() => {\n    void changeLanguage(language, i18n);\n  }, [i18n, language]);\n\n  if (auth.authenticated) {\n    return children;\n  }\n\n  if (auth.isFetching) {\n    return <LoadingIndicator />;\n  }\n\n  void auth.logout(true);\n  return <Redirect to={logoutPath()} />;\n};\n\nexport default observer(Authenticated);\n"],"names":["observer","Authenticated","children","auth","useStores","i18n","useTranslation","user","useCurrentUser","rejectOnEmpty","language","React","changeLanguage","authenticated","isFetching","LoadingIndicator","logout","Redirect","to","logoutPath"],"mappings":"+NAcA,MAwBeA,EAAAA,GAxBOC,EAAGC,eACjB,MAAAC,KAAEA,GAASC,KACXC,KAAEA,GAASC,IACXC,EAAOC,EAAe,CAAEC,eAAe,IACvCC,EAAWH,GAAMG,SAQvB,OAJAC,EAAAA,WAAgB,KACTC,EAAeF,EAAUL,EAAI,GACjC,CAACA,EAAMK,IAENP,EAAKU,cACAX,EAGLC,EAAKW,aACCC,EAAmB,CAAA,IAGxBZ,EAAKa,QAAO,KACTC,EAAA,CAASC,GAAIC,MAAgB"}