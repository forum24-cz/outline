import{p as t}from"./chunk-TMUBEWPD.BM5D5cG8.js";import{I as r}from"./chunk-KFBOBJHC.xQGpqGI8.js";import{E as e,_ as o,d as n,F as a,G as s,H as c,l as i,s as h,g as d,b as m,c as $,q as y,r as l,e as g,x as p,j as x,v as f,I as u}from"./mermaid.core.tHGlKmnM.js";import{p as b}from"./mermaid-parser.core.pzFSGHE_.js";import"./index.mlCxaiYE.js";import"./_baseUniq.jbqE6i7x.js";import"./_basePickBy.pxmUilPg.js";import"./clone.2kJP-XDj.js";var w={NORMAL:0,REVERSE:1,HIGHLIGHT:2,MERGE:3,CHERRY_PICK:4},B=e.gitGraph,E=o((()=>a({...B,...s().gitGraph})),"getConfig"),C=new r((()=>{const t=E(),r=t.mainBranchName,e=t.mainBranchOrder;return{mainBranchName:r,commits:new Map,head:null,branchConfig:new Map([[r,{name:r,order:e}]]),branches:new Map([[r,null]]),currBranch:r,direction:"LR",seq:0,options:{}}}));function getID(){return c({length:7})}function uniqBy(t,r){const e=Object.create(null);return t.reduce(((t,o)=>{const n=r(o);return e[n]||(e[n]=!0,t.push(o)),t}),[])}o(getID,"getID"),o(uniqBy,"uniqBy");var k=o((function(t){C.records.direction=t}),"setDirection"),L=o((function(t){i.debug("options str",t),t=t?.trim(),t=t||"{}";try{C.records.options=JSON.parse(t)}catch(r){i.error("error while parsing gitGraph options",r.message)}}),"setOptions"),T=o((function(){return C.records.options}),"getOptions"),M=o((function(t){let r=t.msg,e=t.id;const o=t.type;let n=t.tags;i.info("commit",r,e,o,n),i.debug("Entering commit:",r,e,o,n);const a=E();e=g.sanitizeText(e,a),r=g.sanitizeText(r,a),n=n?.map((t=>g.sanitizeText(t,a)));const s={id:e||C.records.seq+"-"+getID(),message:r,seq:C.records.seq++,type:o??w.NORMAL,tags:n??[],parents:null==C.records.head?[]:[C.records.head.id],branch:C.records.currBranch};C.records.head=s,i.info("main branch",a.mainBranchName),C.records.commits.set(s.id,s),C.records.branches.set(C.records.currBranch,s.id),i.debug("in pushCommit "+s.id)}),"commit"),v=o((function(t){let r=t.name;const e=t.order;if(r=g.sanitizeText(r,E()),C.records.branches.has(r))throw new Error(`Trying to create an existing branch. (Help: Either use a new name if you want create a new branch or try using "checkout ${r}")`);C.records.branches.set(r,null!=C.records.head?C.records.head.id:null),C.records.branchConfig.set(r,{name:r,order:e}),R(r),i.debug("in createBranch")}),"branch"),P=o((t=>{let r=t.branch,e=t.id;const o=t.type,n=t.tags,a=E();r=g.sanitizeText(r,a),e&&(e=g.sanitizeText(e,a));const s=C.records.branches.get(C.records.currBranch),c=C.records.branches.get(r),h=s?C.records.commits.get(s):void 0,d=c?C.records.commits.get(c):void 0;if(h&&d&&h.branch===r)throw new Error(`Cannot merge branch '${r}' into itself.`);if(C.records.currBranch===r){const t=new Error('Incorrect usage of "merge". Cannot merge a branch to itself');throw t.hash={text:`merge ${r}`,token:`merge ${r}`,expected:["branch abc"]},t}if(void 0===h||!h){const t=new Error(`Incorrect usage of "merge". Current branch (${C.records.currBranch})has no commits`);throw t.hash={text:`merge ${r}`,token:`merge ${r}`,expected:["commit"]},t}if(!C.records.branches.has(r)){const t=new Error('Incorrect usage of "merge". Branch to be merged ('+r+") does not exist");throw t.hash={text:`merge ${r}`,token:`merge ${r}`,expected:[`branch ${r}`]},t}if(void 0===d||!d){const t=new Error('Incorrect usage of "merge". Branch to be merged ('+r+") has no commits");throw t.hash={text:`merge ${r}`,token:`merge ${r}`,expected:['"commit"']},t}if(h===d){const t=new Error('Incorrect usage of "merge". Both branches have same head');throw t.hash={text:`merge ${r}`,token:`merge ${r}`,expected:["branch abc"]},t}if(e&&C.records.commits.has(e)){const t=new Error('Incorrect usage of "merge". Commit with id:'+e+" already exists, use different custom Id");throw t.hash={text:`merge ${r} ${e} ${o} ${n?.join(" ")}`,token:`merge ${r} ${e} ${o} ${n?.join(" ")}`,expected:[`merge ${r} ${e}_UNIQUE ${o} ${n?.join(" ")}`]},t}const m=c||"",$={id:e||`${C.records.seq}-${getID()}`,message:`merged branch ${r} into ${C.records.currBranch}`,seq:C.records.seq++,parents:null==C.records.head?[]:[C.records.head.id,m],branch:C.records.currBranch,type:w.MERGE,customType:o,customId:!!e,tags:n??[]};C.records.head=$,C.records.commits.set($.id,$),C.records.branches.set(C.records.currBranch,$.id),i.debug(C.records.branches),i.debug("in mergeBranch")}),"merge"),I=o((function(t){let r=t.id,e=t.targetId,o=t.tags,n=t.parent;i.debug("Entering cherryPick:",r,e,o);const a=E();if(r=g.sanitizeText(r,a),e=g.sanitizeText(e,a),o=o?.map((t=>g.sanitizeText(t,a))),n=g.sanitizeText(n,a),!r||!C.records.commits.has(r)){const t=new Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');throw t.hash={text:`cherryPick ${r} ${e}`,token:`cherryPick ${r} ${e}`,expected:["cherry-pick abc"]},t}const s=C.records.commits.get(r);if(void 0===s||!s)throw new Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');if(n&&(!Array.isArray(s.parents)||!s.parents.includes(n))){throw new Error("Invalid operation: The specified parent commit is not an immediate parent of the cherry-picked commit.")}const c=s.branch;if(s.type===w.MERGE&&!n){throw new Error("Incorrect usage of cherry-pick: If the source commit is a merge commit, an immediate parent commit must be specified.")}if(!e||!C.records.commits.has(e)){if(c===C.records.currBranch){const t=new Error('Incorrect usage of "cherryPick". Source commit is already on current branch');throw t.hash={text:`cherryPick ${r} ${e}`,token:`cherryPick ${r} ${e}`,expected:["cherry-pick abc"]},t}const t=C.records.branches.get(C.records.currBranch);if(void 0===t||!t){const t=new Error(`Incorrect usage of "cherry-pick". Current branch (${C.records.currBranch})has no commits`);throw t.hash={text:`cherryPick ${r} ${e}`,token:`cherryPick ${r} ${e}`,expected:["cherry-pick abc"]},t}const a=C.records.commits.get(t);if(void 0===a||!a){const t=new Error(`Incorrect usage of "cherry-pick". Current branch (${C.records.currBranch})has no commits`);throw t.hash={text:`cherryPick ${r} ${e}`,token:`cherryPick ${r} ${e}`,expected:["cherry-pick abc"]},t}const h={id:C.records.seq+"-"+getID(),message:`cherry-picked ${s?.message} into ${C.records.currBranch}`,seq:C.records.seq++,parents:null==C.records.head?[]:[C.records.head.id,s.id],branch:C.records.currBranch,type:w.CHERRY_PICK,tags:o?o.filter(Boolean):[`cherry-pick:${s.id}${s.type===w.MERGE?`|parent:${n}`:""}`]};C.records.head=h,C.records.commits.set(h.id,h),C.records.branches.set(C.records.currBranch,h.id),i.debug(C.records.branches),i.debug("in cherryPick")}}),"cherryPick"),R=o((function(t){if(t=g.sanitizeText(t,E()),!C.records.branches.has(t)){const r=new Error(`Trying to checkout branch which is not yet created. (Help try using "branch ${t}")`);throw r.hash={text:`checkout ${t}`,token:`checkout ${t}`,expected:[`branch ${t}`]},r}{C.records.currBranch=t;const r=C.records.branches.get(C.records.currBranch);C.records.head=void 0!==r&&r?C.records.commits.get(r)??null:null}}),"checkout");function upsert(t,r,e){const o=t.indexOf(r);-1===o?t.push(e):t.splice(o,1,e)}function prettyPrintCommitHistory(t){const r=t.reduce(((t,r)=>t.seq>r.seq?t:r),t[0]);let e="";t.forEach((function(t){e+=t===r?"\t*":"\t|"}));const o=[e,r.id,r.seq];for(const n in C.records.branches)C.records.branches.get(n)===r.id&&o.push(n);if(i.debug(o.join(" ")),r.parents&&2==r.parents.length&&r.parents[0]&&r.parents[1]){const e=C.records.commits.get(r.parents[0]);upsert(t,r,e),r.parents[1]&&t.push(C.records.commits.get(r.parents[1]))}else{if(0==r.parents.length)return;if(r.parents[0]){const e=C.records.commits.get(r.parents[0]);upsert(t,r,e)}}prettyPrintCommitHistory(t=uniqBy(t,(t=>t.id)))}o(upsert,"upsert"),o(prettyPrintCommitHistory,"prettyPrintCommitHistory");var A=o((function(){i.debug(C.records.commits);prettyPrintCommitHistory([j()[0]])}),"prettyPrint"),G=o((function(){C.reset(),p()}),"clear"),O=o((function(){return[...C.records.branchConfig.values()].map(((t,r)=>null!==t.order&&void 0!==t.order?t:{...t,order:parseFloat(`0.${r}`)})).sort(((t,r)=>(t.order??0)-(r.order??0))).map((({name:t})=>({name:t})))}),"getBranchesAsObjArray"),q=o((function(){return C.records.branches}),"getBranches"),H=o((function(){return C.records.commits}),"getCommits"),j=o((function(){const t=[...C.records.commits.values()];return t.forEach((function(t){i.debug(t.id)})),t.sort(((t,r)=>t.seq-r.seq)),t}),"getCommitsArray"),z={commitType:w,getConfig:E,setDirection:k,setOptions:L,getOptions:T,commit:M,branch:v,merge:P,cherryPick:I,checkout:R,prettyPrint:A,clear:G,getBranchesAsObjArray:O,getBranches:q,getCommits:H,getCommitsArray:j,getCurrentBranch:o((function(){return C.records.currBranch}),"getCurrentBranch"),getDirection:o((function(){return C.records.direction}),"getDirection"),getHead:o((function(){return C.records.head}),"getHead"),setAccTitle:h,getAccTitle:d,getAccDescription:m,setAccDescription:$,setDiagramTitle:y,getDiagramTitle:l},D=o(((r,e)=>{t(r,e),r.dir&&e.setDirection(r.dir);for(const t of r.statements)S(t,e)}),"populate"),S=o(((t,r)=>{const e={Commit:o((t=>r.commit(N(t))),"Commit"),Branch:o((t=>r.branch(W(t))),"Branch"),Merge:o((t=>r.merge(_(t))),"Merge"),Checkout:o((t=>r.checkout(F(t))),"Checkout"),CherryPicking:o((t=>r.cherryPick(K(t))),"CherryPicking")}[t.$type];e?e(t):i.error(`Unknown statement type: ${t.$type}`)}),"parseStatement"),N=o((t=>({id:t.id,msg:t.message??"",type:void 0!==t.type?w[t.type]:w.NORMAL,tags:t.tags??void 0})),"parseCommit"),W=o((t=>({name:t.name,order:t.order??0})),"parseBranch"),_=o((t=>({branch:t.branch,id:t.id??"",type:void 0!==t.type?w[t.type]:void 0,tags:t.tags??void 0})),"parseMerge"),F=o((t=>t.branch),"parseCheckout"),K=o((t=>({id:t.id,targetId:"",tags:0===t.tags?.length?void 0:t.tags,parent:t.parent})),"parseCherryPicking"),U={parse:o((async t=>{const r=await b("gitGraph",t);i.debug(r),D(r,z)}),"parse")},Y=n(),V=Y?.gitGraph,J=10,Q=40,X=new Map,Z=new Map,tt=new Map,rt=[],et=0,ot="LR",nt=o((()=>{X.clear(),Z.clear(),tt.clear(),et=0,rt=[],ot="LR"}),"clear"),at=o((t=>{const r=document.createElementNS("http://www.w3.org/2000/svg","text");return("string"==typeof t?t.split(/\\n|\n|<br\s*\/?>/gi):t).forEach((t=>{const e=document.createElementNS("http://www.w3.org/2000/svg","tspan");e.setAttributeNS("http://www.w3.org/XML/1998/namespace","xml:space","preserve"),e.setAttribute("dy","1em"),e.setAttribute("x","0"),e.setAttribute("class","row"),e.textContent=t.trim(),r.appendChild(e)})),r}),"drawText"),st=o((t=>{let r,e,n;return"BT"===ot?(e=o(((t,r)=>t<=r),"comparisonFunc"),n=1/0):(e=o(((t,r)=>t>=r),"comparisonFunc"),n=0),t.forEach((t=>{const o="TB"===ot||"BT"==ot?Z.get(t)?.y:Z.get(t)?.x;void 0!==o&&e(o,n)&&(r=t,n=o)})),r}),"findClosestParent"),ct=o((t=>{let r="",e=1/0;return t.forEach((t=>{const o=Z.get(t).y;o<=e&&(r=t,e=o)})),r||void 0}),"findClosestParentBT"),it=o(((t,r,e)=>{let o=e,n=e;const a=[];t.forEach((t=>{const e=r.get(t);if(!e)throw new Error(`Commit not found for key ${t}`);e.parents.length?(o=dt(e),n=Math.max(o,n)):a.push(e),mt(e,o)})),o=n,a.forEach((t=>{$t(t,o,e)})),t.forEach((t=>{const e=r.get(t);if(e?.parents.length){const t=ct(e.parents);o=Z.get(t).y-Q,o<=n&&(n=o);const r=X.get(e.branch).pos,a=o-J;Z.set(e.id,{x:r,y:a})}}))}),"setParallelBTPos"),ht=o((t=>{const r=st(t.parents.filter((t=>null!==t)));if(!r)throw new Error(`Closest parent not found for commit ${t.id}`);const e=Z.get(r)?.y;if(void 0===e)throw new Error(`Closest parent position not found for commit ${t.id}`);return e}),"findClosestParentPos"),dt=o((t=>ht(t)+Q),"calculateCommitPosition"),mt=o(((t,r)=>{const e=X.get(t.branch);if(!e)throw new Error(`Branch not found for commit ${t.id}`);const o=e.pos,n=r+J;return Z.set(t.id,{x:o,y:n}),{x:o,y:n}}),"setCommitPosition"),$t=o(((t,r,e)=>{const o=X.get(t.branch);if(!o)throw new Error(`Branch not found for commit ${t.id}`);const n=r+e,a=o.pos;Z.set(t.id,{x:a,y:n})}),"setRootPosition"),yt=o(((t,r,e,o,n,a)=>{if(a===w.HIGHLIGHT)t.append("rect").attr("x",e.x-10).attr("y",e.y-10).attr("width",20).attr("height",20).attr("class",`commit ${r.id} commit-highlight${n%8} ${o}-outer`),t.append("rect").attr("x",e.x-6).attr("y",e.y-6).attr("width",12).attr("height",12).attr("class",`commit ${r.id} commit${n%8} ${o}-inner`);else if(a===w.CHERRY_PICK)t.append("circle").attr("cx",e.x).attr("cy",e.y).attr("r",10).attr("class",`commit ${r.id} ${o}`),t.append("circle").attr("cx",e.x-3).attr("cy",e.y+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${r.id} ${o}`),t.append("circle").attr("cx",e.x+3).attr("cy",e.y+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${r.id} ${o}`),t.append("line").attr("x1",e.x+3).attr("y1",e.y+1).attr("x2",e.x).attr("y2",e.y-5).attr("stroke","#fff").attr("class",`commit ${r.id} ${o}`),t.append("line").attr("x1",e.x-3).attr("y1",e.y+1).attr("x2",e.x).attr("y2",e.y-5).attr("stroke","#fff").attr("class",`commit ${r.id} ${o}`);else{const s=t.append("circle");if(s.attr("cx",e.x),s.attr("cy",e.y),s.attr("r",r.type===w.MERGE?9:10),s.attr("class",`commit ${r.id} commit${n%8}`),a===w.MERGE){const a=t.append("circle");a.attr("cx",e.x),a.attr("cy",e.y),a.attr("r",6),a.attr("class",`commit ${o} ${r.id} commit${n%8}`)}if(a===w.REVERSE){t.append("path").attr("d",`M ${e.x-5},${e.y-5}L${e.x+5},${e.y+5}M${e.x-5},${e.y+5}L${e.x+5},${e.y-5}`).attr("class",`commit ${o} ${r.id} commit${n%8}`)}}}),"drawCommitBullet"),lt=o(((t,r,e,o)=>{if(r.type!==w.CHERRY_PICK&&(r.customId&&r.type===w.MERGE||r.type!==w.MERGE)&&V?.showCommitLabel){const n=t.append("g"),a=n.insert("rect").attr("class","commit-label-bkg"),s=n.append("text").attr("x",o).attr("y",e.y+25).attr("class","commit-label").text(r.id),c=s.node()?.getBBox();if(c&&(a.attr("x",e.posWithOffset-c.width/2-2).attr("y",e.y+13.5).attr("width",c.width+4).attr("height",c.height+4),"TB"===ot||"BT"===ot?(a.attr("x",e.x-(c.width+16+5)).attr("y",e.y-12),s.attr("x",e.x-(c.width+16)).attr("y",e.y+c.height-12)):s.attr("x",e.posWithOffset-c.width/2),V.rotateCommitLabel))if("TB"===ot||"BT"===ot)s.attr("transform","rotate(-45, "+e.x+", "+e.y+")"),a.attr("transform","rotate(-45, "+e.x+", "+e.y+")");else{const t=-7.5-(c.width+10)/25*9.5,r=10+c.width/25*8.5;n.attr("transform","translate("+t+", "+r+") rotate(-45, "+o+", "+e.y+")")}}}),"drawCommitLabel"),gt=o(((t,r,e,o)=>{if(r.tags.length>0){let n=0,a=0,s=0;const c=[];for(const o of r.tags.reverse()){const r=t.insert("polygon"),i=t.append("circle"),h=t.append("text").attr("y",e.y-16-n).attr("class","tag-label").text(o),d=h.node()?.getBBox();if(!d)throw new Error("Tag bbox not found");a=Math.max(a,d.width),s=Math.max(s,d.height),h.attr("x",e.posWithOffset-d.width/2),c.push({tag:h,hole:i,rect:r,yOffset:n}),n+=20}for(const{tag:t,hole:r,rect:i,yOffset:h}of c){const n=s/2,c=e.y-19.2-h;if(i.attr("class","tag-label-bkg").attr("points",`\n      ${o-a/2-2},${c+2}  \n      ${o-a/2-2},${c-2}\n      ${e.posWithOffset-a/2-4},${c-n-2}\n      ${e.posWithOffset+a/2+4},${c-n-2}\n      ${e.posWithOffset+a/2+4},${c+n+2}\n      ${e.posWithOffset-a/2-4},${c+n+2}`),r.attr("cy",c).attr("cx",o-a/2+2).attr("r",1.5).attr("class","tag-hole"),"TB"===ot||"BT"===ot){const s=o+h;i.attr("class","tag-label-bkg").attr("points",`\n        ${e.x},${s+2}\n        ${e.x},${s-2}\n        ${e.x+J},${s-n-2}\n        ${e.x+J+a+4},${s-n-2}\n        ${e.x+J+a+4},${s+n+2}\n        ${e.x+J},${s+n+2}`).attr("transform","translate(12,12) rotate(45, "+e.x+","+o+")"),r.attr("cx",e.x+2).attr("cy",s).attr("transform","translate(12,12) rotate(45, "+e.x+","+o+")"),t.attr("x",e.x+5).attr("y",s+3).attr("transform","translate(14,14) rotate(45, "+e.x+","+o+")")}}}}),"drawCommitTags"),pt=o((t=>{switch(t.customType??t.type){case w.NORMAL:return"commit-normal";case w.REVERSE:return"commit-reverse";case w.HIGHLIGHT:return"commit-highlight";case w.MERGE:return"commit-merge";case w.CHERRY_PICK:return"commit-cherry-pick";default:return"commit-normal"}}),"getCommitClassType"),xt=o(((t,r,e,o)=>{const n={x:0,y:0};if(!(t.parents.length>0)){if("TB"===r)return 30;if("BT"===r){return(o.get(t.id)??n).y-Q}return 0}{const e=st(t.parents);if(e){const a=o.get(e)??n;if("TB"===r)return a.y+Q;if("BT"===r){return(o.get(t.id)??n).y-Q}return a.x+Q}}return 0}),"calculatePosition"),ft=o(((t,r,e)=>{const o="BT"===ot&&e?r:r+J,n="TB"===ot||"BT"===ot?o:X.get(t.branch)?.pos,a="TB"===ot||"BT"===ot?X.get(t.branch)?.pos:o;if(void 0===a||void 0===n)throw new Error(`Position were undefined for commit ${t.id}`);return{x:a,y:n,posWithOffset:o}}),"getCommitPosition"),ut=o(((t,r,e)=>{if(!V)throw new Error("GitGraph config not found");const n=t.append("g").attr("class","commit-bullets"),a=t.append("g").attr("class","commit-labels");let s="TB"===ot||"BT"===ot?30:0;const c=[...r.keys()],i=V?.parallelCommits??!1,h=o(((t,e)=>{const o=r.get(t)?.seq,n=r.get(e)?.seq;return void 0!==o&&void 0!==n?o-n:0}),"sortKeys");let d=c.sort(h);"BT"===ot&&(i&&it(d,r,s),d=d.reverse()),d.forEach((t=>{const o=r.get(t);if(!o)throw new Error(`Commit not found for key ${t}`);i&&(s=xt(o,ot,s,Z));const c=ft(o,s,i);if(e){const t=pt(o),r=o.customType??o.type,e=X.get(o.branch)?.index??0;yt(n,o,c,t,e,r),lt(a,o,c,s),gt(a,o,c,s)}"TB"===ot||"BT"===ot?Z.set(o.id,{x:c.x,y:c.posWithOffset}):Z.set(o.id,{x:c.posWithOffset,y:c.y}),s="BT"===ot&&i?s+Q:s+Q+J,s>et&&(et=s)}))}),"drawCommits"),bt=o(((t,r,e,n,a)=>{const s=("TB"===ot||"BT"===ot?e.x<n.x:e.y<n.y)?r.branch:t.branch,c=o((t=>t.branch===s),"isOnBranchToGetCurve"),i=o((e=>e.seq>t.seq&&e.seq<r.seq),"isBetweenCommits");return[...a.values()].some((t=>i(t)&&c(t)))}),"shouldRerouteArrow"),wt=o(((t,r,e=0)=>{const o=t+Math.abs(t-r)/2;if(e>5)return o;if(rt.every((t=>Math.abs(t-o)>=10)))return rt.push(o),o;const n=Math.abs(t-r);return wt(t,r-n/5,e+1)}),"findLane"),Bt=o(((t,r,e,o)=>{const n=Z.get(r.id),a=Z.get(e.id);if(void 0===n||void 0===a)throw new Error(`Commit positions not found for commits ${r.id} and ${e.id}`);const s=bt(r,e,n,a,o);let c,i="",h="",d=0,m=0,$=X.get(e.branch)?.index;if(e.type===w.MERGE&&r.id!==e.parents[0]&&($=X.get(r.branch)?.index),s){i="A 10 10, 0, 0, 0,",h="A 10 10, 0, 0, 1,",d=10,m=10;const t=n.y<a.y?wt(n.y,a.y):wt(a.y,n.y),e=n.x<a.x?wt(n.x,a.x):wt(a.x,n.x);"TB"===ot?n.x<a.x?c=`M ${n.x} ${n.y} L ${e-d} ${n.y} ${h} ${e} ${n.y+m} L ${e} ${a.y-d} ${i} ${e+m} ${a.y} L ${a.x} ${a.y}`:($=X.get(r.branch)?.index,c=`M ${n.x} ${n.y} L ${e+d} ${n.y} ${i} ${e} ${n.y+m} L ${e} ${a.y-d} ${h} ${e-m} ${a.y} L ${a.x} ${a.y}`):"BT"===ot?n.x<a.x?c=`M ${n.x} ${n.y} L ${e-d} ${n.y} ${i} ${e} ${n.y-m} L ${e} ${a.y+d} ${h} ${e+m} ${a.y} L ${a.x} ${a.y}`:($=X.get(r.branch)?.index,c=`M ${n.x} ${n.y} L ${e+d} ${n.y} ${h} ${e} ${n.y-m} L ${e} ${a.y+d} ${i} ${e-m} ${a.y} L ${a.x} ${a.y}`):n.y<a.y?c=`M ${n.x} ${n.y} L ${n.x} ${t-d} ${i} ${n.x+m} ${t} L ${a.x-d} ${t} ${h} ${a.x} ${t+m} L ${a.x} ${a.y}`:($=X.get(r.branch)?.index,c=`M ${n.x} ${n.y} L ${n.x} ${t+d} ${h} ${n.x+m} ${t} L ${a.x-d} ${t} ${i} ${a.x} ${t-m} L ${a.x} ${a.y}`)}else i="A 20 20, 0, 0, 0,",h="A 20 20, 0, 0, 1,",d=20,m=20,"TB"===ot?(n.x<a.x&&(c=e.type===w.MERGE&&r.id!==e.parents[0]?`M ${n.x} ${n.y} L ${n.x} ${a.y-d} ${i} ${n.x+m} ${a.y} L ${a.x} ${a.y}`:`M ${n.x} ${n.y} L ${a.x-d} ${n.y} ${h} ${a.x} ${n.y+m} L ${a.x} ${a.y}`),n.x>a.x&&(i="A 20 20, 0, 0, 0,",h="A 20 20, 0, 0, 1,",d=20,m=20,c=e.type===w.MERGE&&r.id!==e.parents[0]?`M ${n.x} ${n.y} L ${n.x} ${a.y-d} ${h} ${n.x-m} ${a.y} L ${a.x} ${a.y}`:`M ${n.x} ${n.y} L ${a.x+d} ${n.y} ${i} ${a.x} ${n.y+m} L ${a.x} ${a.y}`),n.x===a.x&&(c=`M ${n.x} ${n.y} L ${a.x} ${a.y}`)):"BT"===ot?(n.x<a.x&&(c=e.type===w.MERGE&&r.id!==e.parents[0]?`M ${n.x} ${n.y} L ${n.x} ${a.y+d} ${h} ${n.x+m} ${a.y} L ${a.x} ${a.y}`:`M ${n.x} ${n.y} L ${a.x-d} ${n.y} ${i} ${a.x} ${n.y-m} L ${a.x} ${a.y}`),n.x>a.x&&(i="A 20 20, 0, 0, 0,",h="A 20 20, 0, 0, 1,",d=20,m=20,c=e.type===w.MERGE&&r.id!==e.parents[0]?`M ${n.x} ${n.y} L ${n.x} ${a.y+d} ${i} ${n.x-m} ${a.y} L ${a.x} ${a.y}`:`M ${n.x} ${n.y} L ${a.x-d} ${n.y} ${i} ${a.x} ${n.y-m} L ${a.x} ${a.y}`),n.x===a.x&&(c=`M ${n.x} ${n.y} L ${a.x} ${a.y}`)):(n.y<a.y&&(c=e.type===w.MERGE&&r.id!==e.parents[0]?`M ${n.x} ${n.y} L ${a.x-d} ${n.y} ${h} ${a.x} ${n.y+m} L ${a.x} ${a.y}`:`M ${n.x} ${n.y} L ${n.x} ${a.y-d} ${i} ${n.x+m} ${a.y} L ${a.x} ${a.y}`),n.y>a.y&&(c=e.type===w.MERGE&&r.id!==e.parents[0]?`M ${n.x} ${n.y} L ${a.x-d} ${n.y} ${i} ${a.x} ${n.y-m} L ${a.x} ${a.y}`:`M ${n.x} ${n.y} L ${n.x} ${a.y+d} ${h} ${n.x+m} ${a.y} L ${a.x} ${a.y}`),n.y===a.y&&(c=`M ${n.x} ${n.y} L ${a.x} ${a.y}`));if(void 0===c)throw new Error("Line definition not found");t.append("path").attr("d",c).attr("class","arrow arrow"+$%8)}),"drawArrow"),Et=o(((t,r)=>{const e=t.append("g").attr("class","commit-arrows");[...r.keys()].forEach((t=>{const o=r.get(t);o.parents&&o.parents.length>0&&o.parents.forEach((t=>{Bt(e,r.get(t),o,r)}))}))}),"drawArrows"),Ct=o(((t,r)=>{const e=t.append("g");r.forEach(((t,r)=>{const o=r%8,n=X.get(t.name)?.pos;if(void 0===n)throw new Error(`Position not found for branch ${t.name}`);const a=e.append("line");a.attr("x1",0),a.attr("y1",n),a.attr("x2",et),a.attr("y2",n),a.attr("class","branch branch"+o),"TB"===ot?(a.attr("y1",30),a.attr("x1",n),a.attr("y2",et),a.attr("x2",n)):"BT"===ot&&(a.attr("y1",et),a.attr("x1",n),a.attr("y2",30),a.attr("x2",n)),rt.push(n);const s=t.name,c=at(s),i=e.insert("rect"),h=e.insert("g").attr("class","branchLabel").insert("g").attr("class","label branch-label"+o);h.node().appendChild(c);const d=c.getBBox();i.attr("class","branchLabelBkg label"+o).attr("rx",4).attr("ry",4).attr("x",-d.width-4-(!0===V?.rotateCommitLabel?30:0)).attr("y",-d.height/2+8).attr("width",d.width+18).attr("height",d.height+4),h.attr("transform","translate("+(-d.width-14-(!0===V?.rotateCommitLabel?30:0))+", "+(n-d.height/2-1)+")"),"TB"===ot?(i.attr("x",n-d.width/2-10).attr("y",0),h.attr("transform","translate("+(n-d.width/2-5)+", 0)")):"BT"===ot?(i.attr("x",n-d.width/2-10).attr("y",et),h.attr("transform","translate("+(n-d.width/2-5)+", "+et+")")):i.attr("transform","translate(-19, "+(n-d.height/2)+")")}))}),"drawBranches"),kt=o((function(t,r,e,o,n){return X.set(t,{pos:r,index:e}),r+=50+(n?40:0)+("TB"===ot||"BT"===ot?o.width/2:0)}),"setBranchPosition"),Lt={parser:U,db:z,renderer:{draw:o((function(t,r,e,o){if(nt(),i.debug("in gitgraph renderer",t+"\n","id:",r,e),!V)throw new Error("GitGraph config not found");const n=V.rotateCommitLabel??!1,a=o.db;tt=a.getCommits();const s=a.getBranchesAsObjArray();ot=a.getDirection();const c=x(`[id="${r}"]`);let h=0;s.forEach(((t,r)=>{const e=at(t.name),o=c.append("g"),a=o.insert("g").attr("class","branchLabel"),s=a.insert("g").attr("class","label branch-label");s.node()?.appendChild(e);const i=e.getBBox();h=kt(t.name,h,r,i,n),s.remove(),a.remove(),o.remove()})),ut(c,tt,!1),V.showBranches&&Ct(c,s),Et(c,tt),ut(c,tt,!0),f.insertTitle(c,"gitTitleText",V.titleTopMargin??0,a.getDiagramTitle()),u(void 0,c,V.diagramPadding,V.useMaxWidth)}),"draw")},styles:o((t=>`\n  .commit-id,\n  .commit-msg,\n  .branch-label {\n    fill: lightgrey;\n    color: lightgrey;\n    font-family: 'trebuchet ms', verdana, arial, sans-serif;\n    font-family: var(--mermaid-font-family);\n  }\n  ${[0,1,2,3,4,5,6,7].map((r=>`\n        .branch-label${r} { fill: ${t["gitBranchLabel"+r]}; }\n        .commit${r} { stroke: ${t["git"+r]}; fill: ${t["git"+r]}; }\n        .commit-highlight${r} { stroke: ${t["gitInv"+r]}; fill: ${t["gitInv"+r]}; }\n        .label${r}  { fill: ${t["git"+r]}; }\n        .arrow${r} { stroke: ${t["git"+r]}; }\n        `)).join("\n")}\n\n  .branch {\n    stroke-width: 1;\n    stroke: ${t.lineColor};\n    stroke-dasharray: 2;\n  }\n  .commit-label { font-size: ${t.commitLabelFontSize}; fill: ${t.commitLabelColor};}\n  .commit-label-bkg { font-size: ${t.commitLabelFontSize}; fill: ${t.commitLabelBackground}; opacity: 0.5; }\n  .tag-label { font-size: ${t.tagLabelFontSize}; fill: ${t.tagLabelColor};}\n  .tag-label-bkg { fill: ${t.tagLabelBackground}; stroke: ${t.tagLabelBorder}; }\n  .tag-hole { fill: ${t.textColor}; }\n\n  .commit-merge {\n    stroke: ${t.primaryColor};\n    fill: ${t.primaryColor};\n  }\n  .commit-reverse {\n    stroke: ${t.primaryColor};\n    fill: ${t.primaryColor};\n    stroke-width: 3;\n  }\n  .commit-highlight-outer {\n  }\n  .commit-highlight-inner {\n    stroke: ${t.primaryColor};\n    fill: ${t.primaryColor};\n  }\n\n  .arrow { stroke-width: 8; stroke-linecap: round; fill: none}\n  .gitTitleText {\n    text-anchor: middle;\n    font-size: 18px;\n    fill: ${t.textColor};\n  }\n`),"getStyles")};export{Lt as diagram};
