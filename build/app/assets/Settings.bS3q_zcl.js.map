{"version":3,"file":"Settings.bS3q_zcl.js","sources":["../../../plugins/slack/shared/SlackUtils.ts","../../../plugins/slack/client/components/SlackButton.tsx","../../../plugins/slack/client/components/SlackListItem.tsx","../../../plugins/slack/client/Settings.tsx"],"sourcesContent":["import env from \"@shared/env\";\nimport { IntegrationType } from \"@shared/types\";\nimport { integrationSettingsPath } from \"@shared/utils/routeHelpers\";\n\nexport class SlackUtils {\n  private static authBaseUrl = \"https://slack.com/oauth/authorize\";\n\n  /**\n   * Create a state string for use in OAuth flows\n   *\n   * @param teamId The team ID\n   * @param type The integration type\n   * @param data Additional data to include in the state\n   * @returns A state string\n   */\n  static createState(\n    teamId: string,\n    type: IntegrationType,\n    data?: Record<string, any>\n  ) {\n    return JSON.stringify({ type, teamId, ...data });\n  }\n\n  /**\n   * Parse a state string from an OAuth flow\n   *\n   * @param state The state string\n   * @returns The parsed state\n   */\n  static parseState<T>(\n    state: string\n  ): { teamId: string; type: IntegrationType } & T {\n    return JSON.parse(state);\n  }\n\n  static callbackUrl(\n    { baseUrl, params }: { baseUrl: string; params?: string } = {\n      baseUrl: `${env.URL}`,\n      params: undefined,\n    }\n  ) {\n    return params\n      ? `${baseUrl}/auth/slack.callback?${params}`\n      : `${baseUrl}/auth/slack.callback`;\n  }\n\n  static connectUrl(\n    { baseUrl, params }: { baseUrl: string; params?: string } = {\n      baseUrl: `${env.URL}`,\n      params: undefined,\n    }\n  ) {\n    return params\n      ? `${baseUrl}/auth/slack.post?${params}`\n      : `${baseUrl}/auth/slack.post`;\n  }\n\n  static errorUrl(err: string) {\n    return integrationSettingsPath(`slack?error=${err}`);\n  }\n\n  static get url() {\n    return integrationSettingsPath(\"slack\");\n  }\n\n  static authUrl(\n    state: string,\n    scopes: string[] = [\n      \"identity.email\",\n      \"identity.basic\",\n      \"identity.avatar\",\n      \"identity.team\",\n    ],\n    redirectUri = SlackUtils.callbackUrl()\n  ): string {\n    const baseUrl = SlackUtils.authBaseUrl;\n    const params: Record<string, string> = {\n      client_id: env.SLACK_CLIENT_ID,\n      scope: scopes ? scopes.join(\" \") : \"\",\n      redirect_uri: redirectUri,\n      state,\n    };\n    const urlParams = Object.keys(params)\n      .map((key) => `${key}=${encodeURIComponent(params[key])}`)\n      .join(\"&\");\n    return `${baseUrl}?${urlParams}`;\n  }\n}\n","import * as React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport Button from \"~/components/Button\";\nimport { SlackUtils } from \"../../shared/SlackUtils\";\n\ntype Props = {\n  scopes?: string[];\n  redirectUri: string;\n  icon?: React.ReactNode;\n  state?: string;\n  label?: string;\n};\n\nfunction SlackButton({ state = \"\", scopes, redirectUri, label, icon }: Props) {\n  const { t } = useTranslation();\n\n  const handleClick = () => {\n    window.location.href = SlackUtils.authUrl(state, scopes, redirectUri);\n  };\n\n  return (\n    <Button onClick={handleClick} icon={icon} neutral>\n      {label || t(\"Add to Slack\")}\n    </Button>\n  );\n}\n\nexport default SlackButton;\n","import uniq from \"lodash/uniq\";\nimport { observer } from \"mobx-react\";\nimport * as React from \"react\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport { usePopoverState, PopoverDisclosure } from \"reakit/Popover\";\nimport { toast } from \"sonner\";\nimport styled from \"styled-components\";\nimport { s } from \"@shared/styles\";\nimport { IntegrationType } from \"@shared/types\";\nimport Collection from \"~/models/Collection\";\nimport Integration from \"~/models/Integration\";\nimport { ConnectedButton } from \"~/scenes/Settings/components/ConnectedButton\";\nimport ButtonLink from \"~/components/ButtonLink\";\nimport Flex from \"~/components/Flex\";\nimport CollectionIcon from \"~/components/Icons/CollectionIcon\";\nimport ListItem from \"~/components/List/Item\";\nimport Popover from \"~/components/Popover\";\nimport Switch from \"~/components/Switch\";\nimport Text from \"~/components/Text\";\n\ntype Props = {\n  integration: Integration<IntegrationType.Post>;\n  collection: Collection;\n};\n\nfunction SlackListItem({ integration, collection }: Props) {\n  const { t } = useTranslation();\n\n  const handleChange = async (ev: React.ChangeEvent<HTMLInputElement>) => {\n    if (ev.target.checked) {\n      integration.events = uniq([...integration.events, ev.target.name]);\n    } else {\n      integration.events = integration.events.filter(\n        (n) => n !== ev.target.name\n      );\n    }\n\n    await integration.save();\n\n    toast.success(t(\"Settings saved\"));\n  };\n\n  const mapping: Record<string, string> = {\n    \"documents.publish\": t(\"document published\"),\n    \"documents.update\": t(\"document updated\"),\n  };\n\n  const popover = usePopoverState({\n    gutter: 0,\n    placement: \"bottom-start\",\n  });\n\n  return (\n    <ListItem\n      key={integration.id}\n      title={\n        <Flex align=\"center\" gap={6}>\n          <CollectionIcon collection={collection} /> {collection.name}\n        </Flex>\n      }\n      subtitle={\n        <>\n          <Trans\n            defaults={`Posting to the <em>{{ channelName }}</em> channel on`}\n            values={{\n              channelName: integration.settings.channel,\n              events: integration.events.map((ev) => mapping[ev]).join(\", \"),\n            }}\n            components={{\n              em: <strong />,\n            }}\n          />{\" \"}\n          <PopoverDisclosure {...popover}>\n            {(props) => (\n              <ButtonLink {...props}>\n                {integration.events.map((ev) => mapping[ev]).join(\", \")}\n              </ButtonLink>\n            )}\n          </PopoverDisclosure>\n          <Popover {...popover} aria-label={t(\"Settings\")}>\n            <Events>\n              <h3>{t(\"Notifications\")}</h3>\n              <Text as=\"p\" type=\"secondary\">\n                {t(\"These events should be posted to Slack\")}\n              </Text>\n              <Switch\n                label={t(\"Document published\")}\n                name=\"documents.publish\"\n                checked={integration.events.includes(\"documents.publish\")}\n                onChange={handleChange}\n              />\n              <Switch\n                label={t(\"Document updated\")}\n                name=\"documents.update\"\n                checked={integration.events.includes(\"documents.update\")}\n                onChange={handleChange}\n              />\n            </Events>\n          </Popover>\n        </>\n      }\n      actions={\n        <ConnectedButton\n          onClick={integration.delete}\n          confirmationMessage={t(\n            \"This will prevent any future updates from being posted to this Slack channel. Are you sure?\"\n          )}\n        />\n      }\n    />\n  );\n}\n\nconst Events = styled.div`\n  color: ${s(\"text\")};\n  margin-top: -12px;\n`;\n\nexport default observer(SlackListItem);\n","import { observer } from \"mobx-react\";\nimport * as React from \"react\";\nimport { useTranslation, Trans } from \"react-i18next\";\nimport styled from \"styled-components\";\nimport { IntegrationService, IntegrationType } from \"@shared/types\";\nimport Collection from \"~/models/Collection\";\nimport Integration from \"~/models/Integration\";\nimport { ConnectedButton } from \"~/scenes/Settings/components/ConnectedButton\";\nimport SettingRow from \"~/scenes/Settings/components/SettingRow\";\nimport Flex from \"~/components/Flex\";\nimport Heading from \"~/components/Heading\";\nimport CollectionIcon from \"~/components/Icons/CollectionIcon\";\nimport List from \"~/components/List\";\nimport ListItem from \"~/components/List/Item\";\nimport Notice from \"~/components/Notice\";\nimport Scene from \"~/components/Scene\";\nimport Text from \"~/components/Text\";\nimport env from \"~/env\";\nimport useCurrentTeam from \"~/hooks/useCurrentTeam\";\nimport usePolicy from \"~/hooks/usePolicy\";\nimport useQuery from \"~/hooks/useQuery\";\nimport useStores from \"~/hooks/useStores\";\nimport { SlackUtils } from \"../shared/SlackUtils\";\nimport SlackIcon from \"./Icon\";\nimport SlackButton from \"./components/SlackButton\";\nimport SlackListItem from \"./components/SlackListItem\";\n\nfunction Slack() {\n  const team = useCurrentTeam();\n  const { collections, integrations } = useStores();\n  const { t } = useTranslation();\n  const query = useQuery();\n  const can = usePolicy(team);\n  const error = query.get(\"error\");\n\n  React.useEffect(() => {\n    void collections.fetchPage({\n      limit: 100,\n    });\n    void integrations.fetchPage({\n      service: IntegrationService.Slack,\n      limit: 100,\n    });\n  }, [collections, integrations]);\n\n  const commandIntegration = integrations.find({\n    type: IntegrationType.Command,\n    service: IntegrationService.Slack,\n  });\n\n  const linkedAccountIntegration = integrations.find({\n    type: IntegrationType.LinkedAccount,\n    service: IntegrationService.Slack,\n  });\n\n  const groupedCollections = collections.orderedData\n    .map<[Collection, Integration | undefined]>((collection) => {\n      const integration = integrations.find({\n        service: IntegrationService.Slack,\n        collectionId: collection.id,\n      });\n\n      return [collection, integration];\n    })\n    .sort((a) => (a[1] ? -1 : 1));\n\n  const appName = env.APP_NAME;\n\n  return (\n    <Scene title=\"Slack\" icon={<SlackIcon />}>\n      <Heading>Slack</Heading>\n\n      {error === \"access_denied\" && (\n        <Notice>\n          <Trans>\n            Whoops, you need to accept the permissions in Slack to connect{\" \"}\n            {{ appName }} to your workspace. Try again?\n          </Trans>\n        </Notice>\n      )}\n      {error === \"unauthenticated\" && (\n        <Notice>\n          <Trans>\n            Something went wrong while authenticating your request. Please try\n            logging in again.\n          </Trans>\n        </Notice>\n      )}\n\n      <SettingRow\n        name=\"link\"\n        label={t(\"Personal account\")}\n        description={\n          <Trans>\n            Link your {{ appName }} account to Slack to enable searching and\n            previewing the documents you have access to, directly within chat.\n          </Trans>\n        }\n      >\n        <Flex align=\"flex-end\" column>\n          {linkedAccountIntegration ? (\n            <ConnectedButton\n              onClick={linkedAccountIntegration.delete}\n              confirmationMessage={t(\n                \"Disconnecting your personal account will prevent searching for documents from Slack. Are you sure?\"\n              )}\n            />\n          ) : (\n            <SlackButton\n              redirectUri={SlackUtils.connectUrl()}\n              state={SlackUtils.createState(\n                team.id,\n                IntegrationType.LinkedAccount\n              )}\n              label={t(\"Connect\")}\n            />\n          )}\n        </Flex>\n      </SettingRow>\n\n      {can.update && (\n        <>\n          <SettingRow\n            name=\"slash\"\n            border={false}\n            label={t(\"Slash command\")}\n            description={\n              <Trans\n                defaults=\"Get rich previews of {{ appName }} links shared in Slack and use the <em>{{ command }}</em> slash command to search for documents without leaving your chat.\"\n                values={{\n                  command: \"/outline\",\n                  appName,\n                }}\n                components={{\n                  em: <Code />,\n                }}\n              />\n            }\n          >\n            <Flex align=\"flex-end\" column>\n              {commandIntegration ? (\n                <ConnectedButton\n                  onClick={commandIntegration.delete}\n                  confirmationMessage={t(\n                    \"This will remove the Outline slash command from your Slack workspace. Are you sure?\"\n                  )}\n                />\n              ) : (\n                <SlackButton\n                  scopes={[\"commands\", \"links:read\", \"links:write\"]}\n                  redirectUri={SlackUtils.connectUrl()}\n                  state={SlackUtils.createState(\n                    team.id,\n                    IntegrationType.Command\n                  )}\n                  icon={<SlackIcon />}\n                />\n              )}\n            </Flex>\n          </SettingRow>\n\n          <Heading as=\"h2\">{t(\"Collections\")}</Heading>\n          <Text as=\"p\" type=\"secondary\">\n            <Trans>\n              Connect {{ appName }} collections to Slack channels. Messages will\n              be automatically posted to Slack when documents are published or\n              updated.\n            </Trans>\n          </Text>\n\n          <List>\n            {groupedCollections.map(([collection, integration]) => {\n              if (integration) {\n                return (\n                  <SlackListItem\n                    key={integration.id}\n                    collection={collection}\n                    integration={\n                      integration as Integration<IntegrationType.Post>\n                    }\n                  />\n                );\n              }\n\n              return (\n                <ListItem\n                  key={collection.id}\n                  title={collection.name}\n                  image={<CollectionIcon collection={collection} />}\n                  actions={\n                    <SlackButton\n                      scopes={[\"incoming-webhook\"]}\n                      redirectUri={SlackUtils.connectUrl()}\n                      state={SlackUtils.createState(\n                        team.id,\n                        IntegrationType.Post,\n                        { collectionId: collection.id }\n                      )}\n                      label={t(\"Connect\")}\n                    />\n                  }\n                />\n              );\n            })}\n          </List>\n        </>\n      )}\n    </Scene>\n  );\n}\n\nconst Code = styled.code`\n  padding: 4px 6px;\n  margin: 0 2px;\n  background: ${(props) => props.theme.codeBackground};\n  border-radius: 4px;\n  font-size: 80%;\n`;\n\nexport default observer(Slack);\n"],"names":["SlackUtils","createState","teamId","type","data","JSON","stringify","parseState","state","parse","callbackUrl","baseUrl","params","env","URL","undefined","connectUrl","errorUrl","err","integrationSettingsPath","url","authUrl","scopes","redirectUri","authBaseUrl","client_id","SLACK_CLIENT_ID","scope","join","redirect_uri","Object","keys","map","key","encodeURIComponent","_SlackUtils","SlackButton","label","icon","t","useTranslation","jsx","Button","onClick","handleClick","window","location","href","neutral","Events","styled","div","withConfig","componentId","s","observer","SlackListItem","integration","collection","handleChange","async","ev","target","checked","events","uniq","name","filter","n","save","success","mapping","popover","usePopoverState","gutter","placement","ListItem","title","jsxs","Flex","align","gap","children","CollectionIcon","subtitle","Fragment","Trans","defaults","values","channelName","settings","channel","components","em","PopoverDisclosure","props","ButtonLink","Popover","Text","as","Switch","includes","onChange","actions","ConnectedButton","delete","confirmationMessage","id","Code","code","theme","codeBackground","Slack","team","useCurrentTeam","collections","integrations","useStores","query","useQuery","can","usePolicy","error","get","React","fetchPage","limit","service","IntegrationService","commandIntegration","find","IntegrationType","Command","linkedAccountIntegration","LinkedAccount","groupedCollections","orderedData","collectionId","sort","a","appName","APP_NAME","Scene","SlackIcon","Heading","Notice","SettingRow","description","column","update","border","command","List","image","Post"],"mappings":"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"}