{"version":3,"file":"Profile.I-u9yjlz.js","sources":["../../../app/scenes/Settings/Profile.tsx"],"sourcesContent":["import { observer } from \"mobx-react\";\nimport { ProfileIcon } from \"outline-icons\";\nimport * as React from \"react\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport { toast } from \"sonner\";\nimport Button from \"~/components/Button\";\nimport Heading from \"~/components/Heading\";\nimport Input from \"~/components/Input\";\nimport Scene from \"~/components/Scene\";\nimport Text from \"~/components/Text\";\nimport { UserChangeEmailDialog } from \"~/components/UserDialogs\";\nimport env from \"~/env\";\nimport useCurrentUser from \"~/hooks/useCurrentUser\";\nimport useStores from \"~/hooks/useStores\";\nimport ImageInput from \"./components/ImageInput\";\nimport SettingRow from \"./components/SettingRow\";\n\nconst Profile = () => {\n  const user = useCurrentUser();\n  const { dialogs } = useStores();\n  const form = React.useRef<HTMLFormElement>(null);\n  const [name, setName] = React.useState<string>(user.name);\n  const { t } = useTranslation();\n\n  const handleSubmit = async (ev: React.SyntheticEvent) => {\n    ev.preventDefault();\n\n    try {\n      await user.save({ name });\n      toast.success(t(\"Profile saved\"));\n    } catch (err) {\n      toast.error(err.message);\n    }\n  };\n\n  const handleChangeEmail = () => {\n    dialogs.openModal({\n      title: t(\"Change email\"),\n      content: (\n        <UserChangeEmailDialog user={user} onSubmit={dialogs.closeAllModals} />\n      ),\n    });\n  };\n\n  const handleNameChange = (ev: React.ChangeEvent<HTMLInputElement>) => {\n    setName(ev.target.value);\n  };\n\n  const handleAvatarChange = async (avatarUrl: string) => {\n    await user.save({ avatarUrl });\n    toast.success(t(\"Profile picture updated\"));\n  };\n\n  const handleAvatarError = (error: string | null | undefined) => {\n    toast.error(error || t(\"Unable to upload new profile picture\"));\n  };\n\n  const isValid = form.current?.checkValidity();\n  const { isSaving } = user;\n\n  return (\n    <Scene title={t(\"Profile\")} icon={<ProfileIcon />}>\n      <Heading>{t(\"Profile\")}</Heading>\n      <Text as=\"p\" type=\"secondary\">\n        <Trans>Manage how you appear to other members of the workspace.</Trans>\n      </Text>\n\n      <form onSubmit={handleSubmit} ref={form}>\n        <SettingRow\n          label={t(\"Photo\")}\n          name=\"avatarUrl\"\n          description={t(\"Choose a photo or image to represent yourself.\")}\n        >\n          <ImageInput\n            onSuccess={handleAvatarChange}\n            onError={handleAvatarError}\n            model={user}\n          />\n        </SettingRow>\n        <SettingRow\n          border={env.EMAIL_ENABLED}\n          label={t(\"Name\")}\n          name=\"name\"\n          description={t(\n            \"This could be your real name, or a nickname — however you’d like people to refer to you.\"\n          )}\n        >\n          <Input\n            id=\"name\"\n            autoComplete=\"name\"\n            value={name}\n            onChange={handleNameChange}\n            required\n          />\n        </SettingRow>\n\n        {env.EMAIL_ENABLED && (\n          <SettingRow border={false} label={t(\"Email address\")} name=\"email\">\n            <Input\n              type=\"email\"\n              value={user.email}\n              readOnly\n              onClick={handleChangeEmail}\n            />\n          </SettingRow>\n        )}\n\n        <Button type=\"submit\" disabled={isSaving || !isValid}>\n          {isSaving ? `${t(\"Saving\")}…` : t(\"Save\")}\n        </Button>\n      </form>\n    </Scene>\n  );\n};\n\nexport default observer(Profile);\n"],"names":["observer","Profile","user","useCurrentUser","dialogs","useStores","form","React","name","setName","t","useTranslation","isValid","current","checkValidity","isSaving","jsxs","Scene","title","icon","jsx","ProfileIcon","children","Heading","Text","as","type","Trans","onSubmit","async","ev","preventDefault","save","success","err","error","message","ref","SettingRow","label","description","ImageInput","onSuccess","avatarUrl","onError","toast","model","border","env","EMAIL_ENABLED","Input","id","autoComplete","value","onChange","target","required","email","readOnly","onClick","handleChangeEmail","openModal","content","UserChangeEmailDialog","closeAllModals","Button","disabled"],"mappings":"i+BAiBA,MAkGeA,EAAAA,GAlGCC,KACd,MAAMC,EAAOC,KACPC,QAAEA,GAAYC,IACdC,EAAOC,SAA8B,OACpCC,EAAMC,GAAWF,EAAAA,SAAuBL,EAAKM,OAC9CE,EAAEA,GAAMC,IAmCRC,EAAUN,EAAKO,SAASC,iBACxBC,SAAEA,GAAab,EAGnB,OAACc,EAAAC,GAAMC,MAAOR,EAAE,WAAYS,KAAOC,EAAAC,EAAAA,YAAA,IACjCC,SAAA,GAACC,EAAA,CAASb,SAAEA,EAAA,aACXU,EAAAI,GAAKC,GAAG,IAAIC,KAAK,YAChBJ,SAAAF,EAACO,EAAM,CAAAL,SAAA,iEAGR,OAAA,CAAKM,SA3CWC,MAAOC,IAC1BA,EAAGC,iBAEC,UACI7B,EAAK8B,KAAK,CAAExB,SACZyB,EAAAA,QAAQvB,EAAE,wBACTwB,GACDC,EAAAA,MAAMD,EAAIE,QAClB,GAmCgCC,IAAK/B,EACjCgB,SAAA,CAAAF,EAACkB,GACCC,MAAO7B,EAAE,SACTF,KAAK,YACLgC,YAAa9B,EAAE,kDAEfY,SAAAF,EAACqB,GACCC,UA1BiBb,MAAOc,UAC1BzC,EAAK8B,KAAK,CAAEW,cACZV,EAAAA,QAAQvB,EAAE,2BAA0B,EAyBlCkC,QAtBiBT,IACzBU,EAAMV,MAAMA,GAASzB,EAAE,wCAAuC,EAsBtDoC,MAAO5C,MAGVkB,EAAAkB,EACC,CAAAS,OAAQC,EAAIC,cACZV,MAAO7B,EAAE,QACTF,KAAK,OACLgC,YAAa9B,EACX,4FAGFY,SAACF,EAAA8B,EAAA,CACCC,GAAG,OACHC,aAAa,OACbC,MAAO7C,EACP8C,SA/CgBxB,IAChBA,EAAAA,EAAGyB,OAAOF,MAAK,EA+CfG,UAAQ,MAIXR,EAAIC,eACF7B,EAAAkB,EAAA,CAAWS,QAAQ,EAAOR,MAAO7B,EAAE,iBAAkBF,KAAK,QACzDc,SAACF,EAAA8B,EAAA,CACCxB,KAAK,QACL2B,MAAOnD,EAAKuD,MACZC,UAAQ,EACRC,QAnEcC,KACxBxD,EAAQyD,UAAU,CAChB3C,MAAOR,EAAE,gBACToD,UACGC,EAAA,CAAsB7D,OAAY0B,SAAUxB,EAAQ4D,kBAExD,QAkEIC,EAAO,CAAAvC,KAAK,SAASwC,SAAUnD,IAAaH,EAC1CG,SAAWA,EAAA,GAAGL,EAAE,aAAeA,EAAE,eAGxC"}