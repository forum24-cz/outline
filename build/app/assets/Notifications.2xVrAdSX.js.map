{"version":3,"file":"Notifications.2xVrAdSX.js","sources":["../../../app/scenes/Settings/Notifications.tsx"],"sourcesContent":["import debounce from \"lodash/debounce\";\nimport { observer } from \"mobx-react\";\nimport {\n  AcademicCapIcon,\n  CheckboxIcon,\n  CollectionIcon,\n  CommentIcon,\n  DocumentIcon,\n  DoneIcon,\n  EditIcon,\n  EmailIcon,\n  PublishIcon,\n  StarredIcon,\n  UserIcon,\n} from \"outline-icons\";\nimport * as React from \"react\";\nimport { useTranslation, Trans } from \"react-i18next\";\nimport { toast } from \"sonner\";\nimport { NotificationEventType } from \"@shared/types\";\nimport Flex from \"~/components/Flex\";\nimport Heading from \"~/components/Heading\";\nimport Notice from \"~/components/Notice\";\nimport Scene from \"~/components/Scene\";\nimport Switch from \"~/components/Switch\";\nimport Text from \"~/components/Text\";\nimport env from \"~/env\";\nimport useCurrentTeam from \"~/hooks/useCurrentTeam\";\nimport useCurrentUser from \"~/hooks/useCurrentUser\";\nimport usePolicy from \"~/hooks/usePolicy\";\nimport isCloudHosted from \"~/utils/isCloudHosted\";\nimport SettingRow from \"./components/SettingRow\";\n\nfunction Notifications() {\n  const user = useCurrentUser();\n  const team = useCurrentTeam();\n  const { t } = useTranslation();\n  const can = usePolicy(team.id);\n\n  const options = [\n    {\n      event: NotificationEventType.PublishDocument,\n      icon: <PublishIcon />,\n      title: t(\"Document published\"),\n      description: t(\n        \"Receive a notification whenever a new document is published\"\n      ),\n    },\n    {\n      event: NotificationEventType.UpdateDocument,\n      icon: <EditIcon />,\n      title: t(\"Document updated\"),\n      description: t(\n        \"Receive a notification when a document you are subscribed to is edited\"\n      ),\n    },\n    {\n      event: NotificationEventType.CreateComment,\n      icon: <CommentIcon />,\n      title: t(\"Comment posted\"),\n      description: t(\n        \"Receive a notification when a document you are subscribed to or a thread you participated in receives a comment\"\n      ),\n    },\n    {\n      event: NotificationEventType.MentionedInComment,\n      icon: <EmailIcon />,\n      title: t(\"Mentioned\"),\n      description: t(\n        \"Receive a notification when someone mentions you in a document or comment\"\n      ),\n    },\n    {\n      event: NotificationEventType.ResolveComment,\n      icon: <DoneIcon />,\n      title: t(\"Resolved\"),\n      description: t(\n        \"Receive a notification when a comment thread you were involved in is resolved\"\n      ),\n    },\n    {\n      event: NotificationEventType.CreateCollection,\n      icon: <CollectionIcon />,\n      title: t(\"Collection created\"),\n      description: t(\n        \"Receive a notification whenever a new collection is created\"\n      ),\n    },\n    {\n      event: NotificationEventType.InviteAccepted,\n      icon: <UserIcon />,\n      title: t(\"Invite accepted\"),\n      description: t(\n        \"Receive a notification when someone you invited creates an account\"\n      ),\n    },\n    {\n      event: NotificationEventType.AddUserToDocument,\n      icon: <DocumentIcon />,\n      title: t(\"Invited to document\"),\n      description: t(\n        \"Receive a notification when a document is shared with you\"\n      ),\n    },\n    {\n      event: NotificationEventType.AddUserToCollection,\n      icon: <CollectionIcon />,\n      title: t(\"Invited to collection\"),\n      description: t(\n        \"Receive a notification when you are given access to a collection\"\n      ),\n    },\n    {\n      event: NotificationEventType.ExportCompleted,\n      icon: <CheckboxIcon checked />,\n      title: t(\"Export completed\"),\n      description: t(\n        \"Receive a notification when an export you requested has been completed\"\n      ),\n    },\n    {\n      visible: isCloudHosted,\n      icon: <AcademicCapIcon />,\n      event: NotificationEventType.Onboarding,\n      title: t(\"Getting started\"),\n      description: t(\"Tips on getting started with features and functionality\"),\n    },\n    {\n      visible: isCloudHosted,\n      icon: <StarredIcon />,\n      event: NotificationEventType.Features,\n      title: t(\"New features\"),\n      description: t(\"Receive an email when new features of note are added\"),\n    },\n  ];\n\n  const showSuccessMessage = debounce(() => {\n    toast.success(t(\"Notifications saved\"));\n  }, 500);\n\n  const handleChange = React.useCallback(\n    async (ev: React.ChangeEvent<HTMLInputElement>) => {\n      await user.setNotificationEventType(\n        ev.target.name as NotificationEventType,\n        ev.target.checked\n      );\n      showSuccessMessage();\n    },\n    [user, showSuccessMessage]\n  );\n  const showSuccessNotice = window.location.search === \"?success\";\n\n  return (\n    <Scene title={t(\"Notifications\")} icon={<EmailIcon />}>\n      <Heading>{t(\"Notifications\")}</Heading>\n\n      {showSuccessNotice && (\n        <Notice>\n          <Trans>\n            Unsubscription successful. Your notification settings were updated\n          </Trans>\n        </Notice>\n      )}\n      <Text as=\"p\" type=\"secondary\">\n        <Trans>Manage when and where you receive email notifications.</Trans>\n      </Text>\n\n      {env.EMAIL_ENABLED && can.manage && (\n        <Notice>\n          <Trans>\n            The email integration is currently disabled. Please set the\n            associated environment variables and restart the server to enable\n            notifications.\n          </Trans>\n        </Notice>\n      )}\n\n      <h2>{t(\"Notifications\")}</h2>\n\n      {options.map((option) => {\n        const setting = user.subscribedToEventType(option.event);\n\n        return (\n          <SettingRow\n            key={option.event}\n            visible={option.visible}\n            label={\n              <Flex align=\"center\" gap={4}>\n                {option.icon} {option.title}\n              </Flex>\n            }\n            name={option.event}\n            description={option.description}\n          >\n            <Switch\n              key={option.event}\n              id={option.event}\n              name={option.event}\n              checked={!!setting}\n              onChange={handleChange}\n            />\n          </SettingRow>\n        );\n      })}\n    </Scene>\n  );\n}\n\nexport default observer(Notifications);\n"],"names":["observer","Notifications","user","useCurrentUser","team","useCurrentTeam","t","useTranslation","can","usePolicy","id","options","event","NotificationEventType","PublishDocument","icon","PublishIcon","title","description","UpdateDocument","EditIcon","CreateComment","CommentIcon","MentionedInComment","EmailIcon","ResolveComment","DoneIcon","CreateCollection","CollectionIcon","InviteAccepted","UserIcon","AddUserToDocument","DocumentIcon","AddUserToCollection","ExportCompleted","CheckboxIcon","checked","visible","isCloudHosted","AcademicCapIcon","Onboarding","StarredIcon","Features","showSuccessMessage","debounce","success","handleChange","React","async","ev","setNotificationEventType","target","name","showSuccessNotice","window","location","search","jsxs","Scene","jsx","children","Heading","Notice","Trans","Text","as","type","env","EMAIL_ENABLED","manage","map","option","setting","subscribedToEventType","SettingRow","label","Flex","align","gap","Switch","onChange"],"mappings":"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"}