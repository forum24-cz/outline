{"version":3,"file":"index.POXXwzjj.js","sources":["../../../plugins/notion/shared/NotionUtils.ts","../../../plugins/notion/client/components/ImportDialog.tsx","../../../plugins/notion/client/Imports.tsx","../../../plugins/notion/client/index.tsx"],"sourcesContent":["import queryString from \"query-string\";\nimport env from \"@shared/env\";\nimport { IntegrationService } from \"@shared/types\";\nimport { settingsPath } from \"@shared/utils/routeHelpers\";\n\nexport type OAuthState = {\n  teamId: string;\n};\n\nexport class NotionUtils {\n  public static tokenUrl = \"https://api.notion.com/v1/oauth/token\";\n  private static authBaseUrl = \"https://api.notion.com/v1/oauth/authorize\";\n\n  private static settingsUrl = settingsPath(\"import\");\n\n  static parseState(state: string): OAuthState {\n    return JSON.parse(state);\n  }\n\n  static successUrl(integrationId: string) {\n    const params = {\n      success: \"\",\n      service: IntegrationService.Notion,\n      integrationId,\n    };\n    return `${this.settingsUrl}?${queryString.stringify(params)}`;\n  }\n\n  static errorUrl(error: string) {\n    const params = {\n      error,\n      service: IntegrationService.Notion,\n    };\n    return `${this.settingsUrl}?${queryString.stringify(params)}`;\n  }\n\n  static callbackUrl(\n    { baseUrl, params }: { baseUrl: string; params?: string } = {\n      baseUrl: `${env.URL}`,\n      params: undefined,\n    }\n  ) {\n    return params\n      ? `${baseUrl}/api/notion.callback?${params}`\n      : `${baseUrl}/api/notion.callback`;\n  }\n\n  static authUrl({ state }: { state: OAuthState }) {\n    const params = {\n      client_id: env.NOTION_CLIENT_ID,\n      redirect_uri: this.callbackUrl(),\n      state: JSON.stringify(state),\n      response_type: \"code\",\n      owner: \"user\",\n    };\n    return `${this.authBaseUrl}?${queryString.stringify(params)}`;\n  }\n}\n","import React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { toast } from \"sonner\";\nimport { ImportInput } from \"@shared/schema\";\nimport { CollectionPermission, IntegrationService } from \"@shared/types\";\nimport Button from \"~/components/Button\";\nimport Flex from \"~/components/Flex\";\nimport InputSelectPermission from \"~/components/InputSelectPermission\";\nimport Text from \"~/components/Text\";\nimport useBoolean from \"~/hooks/useBoolean\";\nimport useStores from \"~/hooks/useStores\";\nimport { EmptySelectValue } from \"~/types\";\n\ntype Props = {\n  /** The integrationId associated with this import flow. */\n  integrationId: string;\n  /** Callback to handle import creation. */\n  onSubmit: () => void;\n};\n\nexport function ImportDialog({ integrationId, onSubmit }: Props) {\n  const { t } = useTranslation();\n  const { imports } = useStores();\n  const [submitting, setSubmitting, resetSubmitting] = useBoolean();\n  const [permission, setPermission] = React.useState<CollectionPermission>();\n\n  const handlePermissionChange = React.useCallback(\n    (value: CollectionPermission | typeof EmptySelectValue) => {\n      setPermission(value === EmptySelectValue ? undefined : value);\n    },\n    []\n  );\n\n  const handleStartImport = React.useCallback(async () => {\n    setSubmitting();\n\n    // TODO: This can send the page info + permission once we overcome the search timeout issues.\n    const input: ImportInput<IntegrationService.Notion> = [{ permission }];\n\n    try {\n      await imports.create(\n        { service: IntegrationService.Notion },\n        { integrationId, input }\n      );\n\n      toast.success(\n        t(\"Your import is being processed, you can safely leave this page\")\n      );\n\n      onSubmit();\n    } catch (err) {\n      toast.error(err.message);\n      resetSubmitting();\n    }\n  }, [permission, onSubmit]);\n\n  return (\n    <Flex column gap={12}>\n      <div>\n        <InputSelectPermission\n          value={permission}\n          onChange={handlePermissionChange}\n        />\n        <Text as=\"span\" type=\"secondary\">\n          {t(\n            \"Set the default permission level for collections created from the import\"\n          )}\n          .\n        </Text>\n      </div>\n      <Flex justify=\"flex-end\">\n        <Button onClick={handleStartImport} disabled={submitting}>\n          {t(\"Start import\")}\n        </Button>\n      </Flex>\n    </Flex>\n  );\n}\n","import { observer } from \"mobx-react\";\nimport React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { toast } from \"sonner\";\nimport env from \"@shared/env\";\nimport { IntegrationService } from \"@shared/types\";\nimport Button from \"~/components/Button\";\nimport useCurrentTeam from \"~/hooks/useCurrentTeam\";\nimport useQuery from \"~/hooks/useQuery\";\nimport useStores from \"~/hooks/useStores\";\nimport { redirectTo } from \"~/utils/urls\";\nimport { NotionUtils } from \"../shared/NotionUtils\";\nimport { ImportDialog } from \"./components/ImportDialog\";\n\nexport const Notion = observer(() => {\n  const { t } = useTranslation();\n  const { dialogs } = useStores();\n  const team = useCurrentTeam();\n  const history = useHistory();\n  const location = useLocation();\n  const queryParams = useQuery();\n\n  const appName = env.APP_NAME;\n  const authUrl = NotionUtils.authUrl({ state: { teamId: team.id } });\n\n  const service = queryParams.get(\"service\");\n  const oauthSuccess = queryParams.get(\"success\") === \"\";\n  const oauthError = queryParams.get(\"error\");\n  const integrationId = queryParams.get(\"integrationId\");\n\n  const clearQueryParams = React.useCallback(() => {\n    history.replace({\n      pathname: location.pathname,\n      search: \"\",\n    });\n  }, [history, location]);\n\n  const handleSubmit = React.useCallback(() => {\n    dialogs.closeAllModals();\n    clearQueryParams();\n  }, [dialogs, clearQueryParams]);\n\n  React.useEffect(() => {\n    if (\n      integrationId &&\n      oauthSuccess &&\n      service === IntegrationService.Notion\n    ) {\n      dialogs.openModal({\n        title: t(\"Import data\"),\n        content: (\n          <ImportDialog integrationId={integrationId} onSubmit={handleSubmit} />\n        ),\n        onClose: clearQueryParams,\n      });\n    }\n  }, [t, dialogs, oauthSuccess, service, clearQueryParams]);\n\n  React.useEffect(() => {\n    if (!oauthError) {\n      return;\n    }\n\n    if (oauthError === \"access_denied\") {\n      toast.error(\n        t(\n          \"Whoops, you need to accept the permissions in Notion to connect {{ appName }} to your workspace. Try again?\",\n          {\n            appName,\n          }\n        )\n      );\n    } else {\n      toast.error(\n        t(\n          \"Something went wrong while authenticating your request. Please try logging in again.\"\n        )\n      );\n    }\n  }, [t, appName, oauthError]);\n\n  return (\n    <Button\n      type=\"submit\"\n      onClick={() => redirectTo(authUrl)}\n      disabled={!env.NOTION_CLIENT_ID}\n      neutral\n    >\n      {t(\"Import\")}â€¦\n    </Button>\n  );\n});\n","import { t } from \"i18next\";\nimport * as React from \"react\";\nimport { cdnPath } from \"@shared/utils/urls\";\nimport { Hook, PluginManager } from \"~/utils/PluginManager\";\nimport config from \"../plugin.json\";\nimport { Notion } from \"./Imports\";\n\nPluginManager.add([\n  {\n    ...config,\n    type: Hook.Imports,\n    value: {\n      title: \"Notion\",\n      subtitle: t(\"Import pages from Notion\"),\n      icon: <img src={cdnPath(\"/images/notion.png\")} width={28} />,\n      action: <Notion />,\n    },\n  },\n]);\n"],"names":["NotionUtils","parseState","state","JSON","parse","successUrl","integrationId","params","success","service","IntegrationService","Notion","this","settingsUrl","queryString","stringify","errorUrl","error","callbackUrl","baseUrl","env","URL","undefined","authUrl","client_id","NOTION_CLIENT_ID","redirect_uri","response_type","owner","authBaseUrl","_NotionUtils","tokenUrl","settingsPath","ImportDialog","onSubmit","t","useTranslation","imports","useStores","submitting","setSubmitting","resetSubmitting","useBoolean","permission","setPermission","React","useState","handlePermissionChange","useCallback","value","EmptySelectValue","handleStartImport","async","input","create","err","message","Flex","column","gap","children","jsxs","InputSelectPermission","onChange","Text","as","type","justify","Button","onClick","disabled","observer","dialogs","team","useCurrentTeam","history","useHistory","location","useLocation","queryParams","useQuery","appName","APP_NAME","teamId","id","get","oauthSuccess","oauthError","clearQueryParams","replace","pathname","search","handleSubmit","closeAllModals","useEffect","openModal","title","content","jsx","onClose","redirectTo","neutral","PluginManager","add","config","Hook","Imports","subtitle","icon","src","cdnPath","width","action"],"mappings":"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"}