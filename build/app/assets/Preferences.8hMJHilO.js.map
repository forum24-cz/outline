{"version":3,"file":"Preferences.8hMJHilO.js","sources":["../../../app/scenes/UserDelete.tsx","../../../app/scenes/Settings/Preferences.tsx"],"sourcesContent":["import { observer } from \"mobx-react\";\nimport * as React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useTranslation, Trans } from \"react-i18next\";\nimport { toast } from \"sonner\";\nimport Button from \"~/components/Button\";\nimport Flex from \"~/components/Flex\";\nimport Input from \"~/components/Input\";\nimport Text from \"~/components/Text\";\nimport env from \"~/env\";\nimport useStores from \"~/hooks/useStores\";\n\ntype FormData = {\n  code: string;\n};\n\ntype Props = {\n  /** Callback to close the dialog when user deletion completes. */\n  onSubmit: () => void;\n};\n\nfunction UserDelete({ onSubmit }: Props) {\n  const [isWaitingCode, setWaitingCode] = React.useState(false);\n  const { auth } = useStores();\n  const { t } = useTranslation();\n  const {\n    register,\n    handleSubmit: formHandleSubmit,\n    formState,\n  } = useForm<FormData>();\n\n  const handleRequestDelete = React.useCallback(\n    async (ev: React.SyntheticEvent) => {\n      ev.preventDefault();\n\n      try {\n        await auth.requestDeleteUser();\n        setWaitingCode(true);\n      } catch (err) {\n        toast.error(err.message);\n      }\n    },\n    [auth]\n  );\n\n  const handleSubmit = React.useCallback(\n    async (data: FormData) => {\n      try {\n        await auth.deleteUser(data);\n        await auth.logout();\n        onSubmit();\n      } catch (err) {\n        toast.error(err.message);\n      }\n    },\n    [auth, onSubmit]\n  );\n\n  const inputProps = register(\"code\", {\n    required: env.EMAIL_ENABLED,\n  });\n  const appName = env.APP_NAME;\n\n  return (\n    <form onSubmit={formHandleSubmit(handleSubmit)}>\n      {isWaitingCode ? (\n        <>\n          <Text as=\"p\" type=\"secondary\">\n            <Trans>\n              A confirmation code has been sent to your email address, please\n              enter the code below to permanently destroy your account.\n            </Trans>\n          </Text>\n          <Input\n            placeholder={t(\"Confirmation code\")}\n            autoComplete=\"off\"\n            autoFocus\n            maxLength={8}\n            required\n            {...inputProps}\n          />\n        </>\n      ) : (\n        <>\n          <Text as=\"p\" type=\"secondary\">\n            <Trans>\n              Are you sure? Deleting your account will destroy identifying data\n              associated with your user and cannot be undone. You will be\n              immediately logged out of {{ appName }} and all your API tokens\n              will be revoked.\n            </Trans>\n          </Text>\n        </>\n      )}\n      <Flex justify=\"flex-end\">\n        {env.EMAIL_ENABLED && !isWaitingCode ? (\n          <Button type=\"submit\" onClick={handleRequestDelete} neutral>\n            {t(\"Continue\")}…\n          </Button>\n        ) : (\n          <Button\n            type=\"submit\"\n            disabled={formState.isSubmitting || !formState.isValid}\n            danger\n          >\n            {formState.isSubmitting\n              ? `${t(\"Deleting\")}…`\n              : t(\"Delete my account\")}\n          </Button>\n        )}\n      </Flex>\n    </form>\n  );\n}\n\nexport default observer(UserDelete);\n","import { observer } from \"mobx-react\";\nimport { SettingsIcon } from \"outline-icons\";\nimport * as React from \"react\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport { toast } from \"sonner\";\nimport { languageOptions as availableLanguages } from \"@shared/i18n\";\nimport { TeamPreference, UserPreference } from \"@shared/types\";\nimport { Theme } from \"~/stores/UiStore\";\nimport Button from \"~/components/Button\";\nimport Heading from \"~/components/Heading\";\nimport { InputSelectNew, Option } from \"~/components/InputSelectNew\";\nimport Scene from \"~/components/Scene\";\nimport Switch from \"~/components/Switch\";\nimport Text from \"~/components/Text\";\nimport useCurrentTeam from \"~/hooks/useCurrentTeam\";\nimport useCurrentUser from \"~/hooks/useCurrentUser\";\nimport usePolicy from \"~/hooks/usePolicy\";\nimport useStores from \"~/hooks/useStores\";\nimport UserDelete from \"../UserDelete\";\nimport SettingRow from \"./components/SettingRow\";\n\nfunction Preferences() {\n  const { t } = useTranslation();\n  const { ui, dialogs } = useStores();\n  const user = useCurrentUser();\n  const team = useCurrentTeam();\n  const can = usePolicy(user.id);\n\n  const languageOptions: Option[] = React.useMemo(\n    () =>\n      availableLanguages.map(\n        (lang) =>\n          ({\n            type: \"item\",\n            label: lang.label,\n            value: lang.value,\n          } satisfies Option)\n      ),\n    []\n  );\n\n  const themeOptions: Option[] = React.useMemo(\n    () =>\n      [\n        { type: \"item\", label: t(\"Light\"), value: Theme.Light },\n        { type: \"item\", label: t(\"Dark\"), value: Theme.Dark },\n        { type: \"item\", label: t(\"System\"), value: Theme.System },\n      ] satisfies Option[],\n    [t]\n  );\n\n  const handlePreferenceChange =\n    (inverted = false) =>\n    async (ev: React.ChangeEvent<HTMLInputElement>) => {\n      user.setPreference(\n        ev.target.name as UserPreference,\n        inverted ? !ev.target.checked : ev.target.checked\n      );\n      await user.save();\n      toast.success(t(\"Preferences saved\"));\n    };\n\n  const handleLanguageChange = React.useCallback(\n    async (language: string) => {\n      await user.save({ language });\n      toast.success(t(\"Preferences saved\"));\n    },\n    [t, user]\n  );\n\n  const handleThemeChange = React.useCallback(\n    (theme) => {\n      ui.setTheme(theme as Theme);\n      toast.success(t(\"Preferences saved\"));\n    },\n    [t, ui]\n  );\n\n  const showDeleteAccount = () => {\n    dialogs.openModal({\n      title: t(\"Delete account\"),\n      content: <UserDelete onSubmit={dialogs.closeAllModals} />,\n    });\n  };\n\n  return (\n    <Scene title={t(\"Preferences\")} icon={<SettingsIcon />}>\n      <Heading>{t(\"Preferences\")}</Heading>\n      <Text as=\"p\" type=\"secondary\">\n        <Trans>Manage settings that affect your personal experience.</Trans>\n      </Text>\n\n      <Heading as=\"h2\">{t(\"Display\")}</Heading>\n      <SettingRow\n        label={t(\"Language\")}\n        name=\"language\"\n        description={\n          <>\n            <Trans>\n              Choose the interface language. Community translations are accepted\n              though our{\" \"}\n              <a\n                href=\"https://translate.getoutline.com\"\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                translation portal\n              </a>\n              .\n            </Trans>\n          </>\n        }\n      >\n        <InputSelectNew\n          options={languageOptions}\n          value={user.language}\n          onChange={handleLanguageChange}\n          ariaLabel={t(\"Language\")}\n          label={t(\"Language\")}\n          hideLabel\n        />\n      </SettingRow>\n      <SettingRow\n        name=\"theme\"\n        label={t(\"Appearance\")}\n        description={t(\"Choose your preferred interface color scheme.\")}\n      >\n        <InputSelectNew\n          options={themeOptions}\n          value={ui.theme}\n          onChange={handleThemeChange}\n          ariaLabel={t(\"Appearance\")}\n          label={t(\"Appearance\")}\n          hideLabel\n        />\n      </SettingRow>\n      <SettingRow\n        name={UserPreference.UseCursorPointer}\n        label={t(\"Use pointer cursor\")}\n        description={t(\n          \"Show a hand cursor when hovering over interactive elements.\"\n        )}\n      >\n        <Switch\n          id={UserPreference.UseCursorPointer}\n          name={UserPreference.UseCursorPointer}\n          checked={user.getPreference(UserPreference.UseCursorPointer)}\n          onChange={handlePreferenceChange(false)}\n        />\n      </SettingRow>\n      <SettingRow\n        name={UserPreference.CodeBlockLineNumers}\n        label={t(\"Show line numbers\")}\n        description={t(\"Show line numbers on code blocks in documents.\")}\n        border={false}\n      >\n        <Switch\n          id={UserPreference.CodeBlockLineNumers}\n          name={UserPreference.CodeBlockLineNumers}\n          checked={user.getPreference(UserPreference.CodeBlockLineNumers)}\n          onChange={handlePreferenceChange(false)}\n        />\n      </SettingRow>\n\n      <Heading as=\"h2\">{t(\"Behavior\")}</Heading>\n      <SettingRow\n        name={UserPreference.SeamlessEdit}\n        label={t(\"Separate editing\")}\n        description={t(\n          `When enabled, documents have a separate editing mode. When disabled, documents are always editable when you have permission.`\n        )}\n      >\n        <Switch\n          id={UserPreference.SeamlessEdit}\n          name={UserPreference.SeamlessEdit}\n          checked={\n            !user.getPreference(\n              UserPreference.SeamlessEdit,\n              team.getPreference(TeamPreference.SeamlessEdit)\n            )\n          }\n          onChange={handlePreferenceChange(true)}\n        />\n      </SettingRow>\n      <SettingRow\n        name={UserPreference.RememberLastPath}\n        label={t(\"Remember previous location\")}\n        description={t(\n          \"Automatically return to the document you were last viewing when the app is re-opened.\"\n        )}\n      >\n        <Switch\n          id={UserPreference.RememberLastPath}\n          name={UserPreference.RememberLastPath}\n          checked={!!user.getPreference(UserPreference.RememberLastPath)}\n          onChange={handlePreferenceChange(false)}\n        />\n      </SettingRow>\n      <SettingRow\n        border={false}\n        name={UserPreference.EnableSmartText}\n        label={t(\"Smart text replacements\")}\n        description={t(\n          \"Auto-format text by replacing shortcuts with symbols, dashes, smart quotes, and other typographical elements.\"\n        )}\n      >\n        <Switch\n          id={UserPreference.EnableSmartText}\n          name={UserPreference.EnableSmartText}\n          checked={!!user.getPreference(UserPreference.EnableSmartText)}\n          onChange={handlePreferenceChange(false)}\n        />\n      </SettingRow>\n\n      {can.delete && (\n        <>\n          <Heading as=\"h2\">{t(\"Danger\")}</Heading>\n          <SettingRow\n            name=\"delete\"\n            label={t(\"Delete account\")}\n            description={t(\n              \"You may delete your account at any time, note that this is unrecoverable\"\n            )}\n          >\n            <span>\n              <Button onClick={showDeleteAccount} neutral>\n                {t(\"Delete account\")}…\n              </Button>\n            </span>\n          </SettingRow>\n        </>\n      )}\n    </Scene>\n  );\n}\n\nexport default observer(Preferences);\n"],"names":["observer","UserDelete","onSubmit","isWaitingCode","setWaitingCode","React","auth","useStores","t","useTranslation","register","handleSubmit","formHandleSubmit","formState","useForm","handleRequestDelete","async","ev","preventDefault","requestDeleteUser","err","error","message","data","deleteUser","logout","inputProps","required","env","EMAIL_ENABLED","appName","APP_NAME","jsxs","Fragment","children","jsx","Text","as","type","Trans","Input","placeholder","autoComplete","autoFocus","maxLength","Flex","justify","Button","onClick","neutral","disabled","isSubmitting","isValid","danger","Preferences","ui","dialogs","user","useCurrentUser","team","useCurrentTeam","can","usePolicy","id","languageOptions","availableLanguages","map","lang","label","value","themeOptions","useMemo","Theme","Light","Dark","System","handlePreferenceChange","inverted","setPreference","target","name","checked","save","success","handleLanguageChange","language","handleThemeChange","theme","setTheme","Scene","title","icon","SettingsIcon","Heading","SettingRow","description","href","rel","InputSelectNew","options","onChange","ariaLabel","hideLabel","UserPreference","UseCursorPointer","Switch","getPreference","CodeBlockLineNumers","border","SeamlessEdit","TeamPreference","RememberLastPath","EnableSmartText","delete","showDeleteAccount","openModal","content","closeAllModals"],"mappings":"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"}