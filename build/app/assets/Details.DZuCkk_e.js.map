{"version":3,"mappings":"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","names":["Object","defineProperty","exports","value","default","isHexColor","str","_assertString","hexcolor","test","_interopRequireDefault","obj","__esModule","require$$0","module","isHexColorValidator","DefaultCollectionInputSelect","onSelectCollection","defaultCollectionId","t","useTranslation","collections","useStores","fetching","setFetching","useState","fetchError","setFetchError","React","useEffect","async","fetchData","isLoaded","fetchPage","limit","error","options","useMemo","nonPrivate","reduce","acc","collection","type","label","name","id","icon","jsx","CollectionIcon","HomeIcon","InputSelectNew","onChange","ariaLabel","hideLabel","short","InputColor","rest","menu","useMenuState","modal","placement","Relative","children","Input","event","target","replace","placeholder","maxLength","MenuButton","props","SwatchButton","$background","ContextMenu","React.Suspense","fallback","DelayedMount","Text","StyledColorPicker","disableAlpha","color","hex","styled","NudeButton","withConfig","componentId","s","lazyWithRetry","import","__VITE_PRELOAD__","observer","TeamDelete","onSubmit","isWaitingCode","setWaitingCode","auth","team","useCurrentTeam","rejectOnEmpty","register","handleSubmit","formHandleSubmit","formState","useForm","handleRequestDelete","ev","preventDefault","requestDeleteTeam","message","data","deleteTeam","logout","inputProps","required","env","EMAIL_ENABLED","appName","APP_NAME","workspaceName","jsxs","Fragment","as","Trans","autoComplete","autoFocus","Flex","justify","Button","onClick","neutral","disabled","isSubmitting","isValid","danger","ActionRow","div","transparentize","theme","background","breakpoint","Details","dialogs","ui","useTheme","can","usePolicy","form","useRef","accent","setAccent","preferences","customTheme","accentText","setAccentText","setName","subdomain","setSubdomain","publicBranding","setPublicBranding","setDefaultCollectionId","pickBy","tocPosition","setTocPosition","getPreference","TeamPreference","TocPosition","tocPositionOptions","TOCPosition","Left","Right","handleTocPositionChange","position","save","success","err","handleNameChange","handleSubdomainChange","toLowerCase","handleAvatarError","toast","current","checkValidity","newTheme","resolvedTheme","buildLightTheme","buildDarkTheme","ThemeProvider","Scene","title","TeamIcon","Heading","ref","SettingRow","description","ImageInput","onSuccess","avatarUrl","onError","model","borderRadius","ButtonLink","flex","PublicBranding","Switch","checked","border","visible","isCloudHosted","getBaseDomain","minLength","isSaving","delete","showDeleteWorkspace","openModal","content","closeAllModals"],"ignoreList":[0,1],"sources":["../../../node_modules/validator/lib/isHexColor.js","../../../node_modules/class-validator/esm5/decorator/string/IsHexColor.js","../../../app/components/DefaultCollectionInputSelect.tsx","../../../app/components/InputColor.tsx","../../../app/scenes/TeamDelete.tsx","../../../app/scenes/Settings/components/ActionRow.tsx","../../../app/scenes/Settings/Details.tsx"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isHexColor;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\nvar hexcolor = /^#?([0-9A-F]{3}|[0-9A-F]{4}|[0-9A-F]{6}|[0-9A-F]{8})$/i;\nfunction isHexColor(str) {\n  (0, _assertString.default)(str);\n  return hexcolor.test(str);\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;","import { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isHexColorValidator from 'validator/lib/isHexColor';\nexport var IS_HEX_COLOR = 'isHexColor';\n/**\n * Checks if the string is a hexadecimal color.\n * If given value is not a string, then it returns false.\n */\nexport function isHexColor(value) {\n    return typeof value === 'string' && isHexColorValidator(value);\n}\n/**\n * Checks if the string is a hexadecimal color.\n * If given value is not a string, then it returns false.\n */\nexport function IsHexColor(validationOptions) {\n    return ValidateBy({\n        name: IS_HEX_COLOR,\n        validator: {\n            validate: function (value, args) { return isHexColor(value); },\n            defaultMessage: buildMessage(function (eachPrefix) { return eachPrefix + '$property must be a hexadecimal color'; }, validationOptions),\n        },\n    }, validationOptions);\n}\n//# sourceMappingURL=IsHexColor.js.map","import { HomeIcon } from \"outline-icons\";\nimport React, { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { toast } from \"sonner\";\nimport CollectionIcon from \"~/components/Icons/CollectionIcon\";\nimport { InputSelectNew, Option } from \"~/components/InputSelectNew\";\nimport useStores from \"~/hooks/useStores\";\n\ntype DefaultCollectionInputSelectProps = {\n  onSelectCollection: (collection: string) => void;\n  defaultCollectionId: string | null;\n};\n\nconst DefaultCollectionInputSelect = ({\n  onSelectCollection,\n  defaultCollectionId,\n}: DefaultCollectionInputSelectProps) => {\n  const { t } = useTranslation();\n  const { collections } = useStores();\n  const [fetching, setFetching] = useState(false);\n  const [fetchError, setFetchError] = useState();\n\n  React.useEffect(() => {\n    async function fetchData() {\n      if (!collections.isLoaded && !fetching && !fetchError) {\n        try {\n          setFetching(true);\n          await collections.fetchPage({\n            limit: 100,\n          });\n        } catch (error) {\n          toast.error(\n            t(\"Collections could not be loaded, please reload the app\")\n          );\n          setFetchError(error);\n        } finally {\n          setFetching(false);\n        }\n      }\n    }\n    void fetchData();\n  }, [fetchError, t, fetching, collections]);\n\n  const options: Option[] = React.useMemo(\n    () =>\n      collections.nonPrivate.reduce(\n        (acc, collection) => [\n          ...acc,\n          {\n            type: \"item\",\n            label: collection.name,\n            value: collection.id,\n            icon: <CollectionIcon collection={collection} />,\n          },\n        ],\n        [\n          {\n            type: \"item\",\n            label: t(\"Home\"),\n            value: \"home\",\n            icon: <HomeIcon />,\n          },\n        ] satisfies Option[]\n      ),\n    [collections.nonPrivate, t]\n  );\n\n  if (fetching) {\n    return null;\n  }\n\n  return (\n    <InputSelectNew\n      options={options}\n      value={defaultCollectionId ?? \"home\"}\n      onChange={onSelectCollection}\n      ariaLabel={t(\"Default collection\")}\n      label={t(\"Start view\")}\n      hideLabel\n      short\n    />\n  );\n};\n\nexport default DefaultCollectionInputSelect;\n","import * as React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { MenuButton, useMenuState } from \"reakit/Menu\";\nimport styled from \"styled-components\";\nimport { s } from \"@shared/styles\";\nimport lazyWithRetry from \"~/utils/lazyWithRetry\";\nimport ContextMenu from \"./ContextMenu\";\nimport DelayedMount from \"./DelayedMount\";\nimport Input, { Props as InputProps } from \"./Input\";\nimport NudeButton from \"./NudeButton\";\nimport Relative from \"./Sidebar/components/Relative\";\nimport Text from \"./Text\";\n\ntype Props = Omit<InputProps, \"onChange\"> & {\n  value: string | undefined;\n  onChange: (value: string) => void;\n};\n\nconst InputColor: React.FC<Props> = ({ value, onChange, ...rest }: Props) => {\n  const { t } = useTranslation();\n  const menu = useMenuState({\n    modal: true,\n    placement: \"bottom-end\",\n  });\n\n  return (\n    <Relative>\n      <Input\n        value={value}\n        onChange={(event) => onChange(event.target.value.replace(/^#?/, \"#\"))}\n        placeholder=\"#\"\n        maxLength={7}\n        {...rest}\n      />\n      <MenuButton {...menu}>\n        {(props) => (\n          <SwatchButton\n            aria-label={t(\"Show menu\")}\n            {...props}\n            $background={value}\n          />\n        )}\n      </MenuButton>\n      <ContextMenu {...menu} aria-label={t(\"Select a color\")}>\n        <React.Suspense\n          fallback={\n            <DelayedMount>\n              <Text>{t(\"Loading\")}…</Text>\n            </DelayedMount>\n          }\n        >\n          <StyledColorPicker\n            disableAlpha\n            color={value}\n            onChange={(color) => onChange(color.hex)}\n          />\n        </React.Suspense>\n      </ContextMenu>\n    </Relative>\n  );\n};\n\nconst SwatchButton = styled(NudeButton)<{ $background: string | undefined }>`\n  background: ${(props) => props.$background};\n  border: 1px solid ${s(\"inputBorder\")};\n  border-radius: 50%;\n  position: absolute;\n  bottom: 20px;\n  right: 6px;\n`;\n\nconst ColorPicker = lazyWithRetry(\n  () => import(\"react-color/lib/components/chrome/Chrome\")\n);\n\nconst StyledColorPicker = styled(ColorPicker)`\n  background: inherit !important;\n  box-shadow: none !important;\n  border: 0 !important;\n  border-radius: 0 !important;\n  user-select: none;\n\n  input {\n    user-select: text;\n    color: ${s(\"text\")} !important;\n  }\n`;\n\nexport default InputColor;\n","import { observer } from \"mobx-react\";\nimport * as React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useTranslation, Trans } from \"react-i18next\";\nimport { toast } from \"sonner\";\nimport Button from \"~/components/Button\";\nimport Flex from \"~/components/Flex\";\nimport Input from \"~/components/Input\";\nimport Text from \"~/components/Text\";\nimport env from \"~/env\";\nimport useCurrentTeam from \"~/hooks/useCurrentTeam\";\nimport useStores from \"~/hooks/useStores\";\n\ntype FormData = {\n  code: string;\n};\n\ntype Props = {\n  onSubmit: () => void;\n};\n\nfunction TeamDelete({ onSubmit }: Props) {\n  const [isWaitingCode, setWaitingCode] = React.useState(false);\n  const { auth } = useStores();\n  const team = useCurrentTeam({ rejectOnEmpty: false });\n  const { t } = useTranslation();\n  const {\n    register,\n    handleSubmit: formHandleSubmit,\n    formState,\n  } = useForm<FormData>();\n\n  const handleRequestDelete = React.useCallback(\n    async (ev: React.SyntheticEvent) => {\n      ev.preventDefault();\n\n      try {\n        await auth.requestDeleteTeam();\n        setWaitingCode(true);\n      } catch (error) {\n        toast.error(error.message);\n      }\n    },\n    [auth]\n  );\n\n  const handleSubmit = React.useCallback(\n    async (data: FormData) => {\n      try {\n        await auth.deleteTeam(data);\n        await auth.logout();\n        onSubmit();\n      } catch (error) {\n        toast.error(error.message);\n      }\n    },\n    [auth, onSubmit]\n  );\n\n  const inputProps = register(\"code\", {\n    required: env.EMAIL_ENABLED,\n  });\n  const appName = env.APP_NAME;\n  const workspaceName = team?.name;\n\n  return (\n    <form onSubmit={formHandleSubmit(handleSubmit)}>\n      {isWaitingCode ? (\n        <>\n          <Text as=\"p\" type=\"secondary\">\n            <Trans>\n              A confirmation code has been sent to your email address, please\n              enter the code below to permanently destroy this workspace.\n            </Trans>\n          </Text>\n          <Input\n            placeholder={t(\"Confirmation code\")}\n            autoComplete=\"off\"\n            autoFocus\n            maxLength={8}\n            required\n            {...inputProps}\n          />\n        </>\n      ) : (\n        <>\n          <Text as=\"p\" type=\"secondary\">\n            <Trans>\n              Deleting the <strong>{{ workspaceName }}</strong> workspace will\n              destroy all collections, documents, users, and associated data.\n              You will be immediately logged out of {{ appName }}.\n            </Trans>\n          </Text>\n        </>\n      )}\n\n      <Flex justify=\"flex-end\">\n        {env.EMAIL_ENABLED && !isWaitingCode ? (\n          <Button type=\"submit\" onClick={handleRequestDelete} neutral>\n            {t(\"Continue\")}…\n          </Button>\n        ) : (\n          <Button\n            type=\"submit\"\n            disabled={formState.isSubmitting || !formState.isValid}\n            danger\n          >\n            {formState.isSubmitting\n              ? `${t(\"Deleting\")}…`\n              : t(\"Delete workspace\")}\n          </Button>\n        )}\n      </Flex>\n    </form>\n  );\n}\n\nexport default observer(TeamDelete);\n","import { transparentize } from \"polished\";\nimport styled from \"styled-components\";\nimport breakpoint from \"styled-components-breakpoint\";\nimport { s } from \"@shared/styles\";\n\n/**\n * A sticky container for action buttons such as \"Save\" on settings screens.\n */\nexport const ActionRow = styled.div`\n  position: sticky;\n  bottom: 0;\n  width: 100vw;\n  padding: 16px 12px;\n  margin-left: -12px;\n\n  background: ${s(\"background\")};\n\n  @supports (backdrop-filter: blur(20px)) {\n    backdrop-filter: blur(20px);\n    background: ${(props) => transparentize(0.2, props.theme.background)};\n  }\n\n  ${breakpoint(\"tablet\")`\n    width: auto;\n  `}\n`;\n","import { isHexColor } from \"class-validator\";\nimport pickBy from \"lodash/pickBy\";\nimport { observer } from \"mobx-react\";\nimport { TeamIcon } from \"outline-icons\";\nimport { useRef, useState } from \"react\";\nimport * as React from \"react\";\nimport { useTranslation, Trans } from \"react-i18next\";\nimport { toast } from \"sonner\";\nimport { ThemeProvider, useTheme } from \"styled-components\";\nimport { buildDarkTheme, buildLightTheme } from \"@shared/styles/theme\";\nimport { CustomTheme, TOCPosition, TeamPreference } from \"@shared/types\";\nimport { getBaseDomain } from \"@shared/utils/domains\";\nimport Button from \"~/components/Button\";\nimport ButtonLink from \"~/components/ButtonLink\";\nimport DefaultCollectionInputSelect from \"~/components/DefaultCollectionInputSelect\";\nimport Heading from \"~/components/Heading\";\nimport Input from \"~/components/Input\";\nimport InputColor from \"~/components/InputColor\";\nimport { InputSelectNew, Option } from \"~/components/InputSelectNew\";\nimport Scene from \"~/components/Scene\";\nimport Switch from \"~/components/Switch\";\nimport Text from \"~/components/Text\";\nimport useCurrentTeam from \"~/hooks/useCurrentTeam\";\nimport usePolicy from \"~/hooks/usePolicy\";\nimport useStores from \"~/hooks/useStores\";\nimport isCloudHosted from \"~/utils/isCloudHosted\";\nimport TeamDelete from \"../TeamDelete\";\nimport { ActionRow } from \"./components/ActionRow\";\nimport ImageInput from \"./components/ImageInput\";\nimport SettingRow from \"./components/SettingRow\";\n\nfunction Details() {\n  const { dialogs, ui } = useStores();\n  const { t } = useTranslation();\n  const team = useCurrentTeam();\n  const theme = useTheme();\n  const can = usePolicy(team);\n\n  const form = useRef<HTMLFormElement>(null);\n  const [accent, setAccent] = useState<null | undefined | string>(\n    team.preferences?.customTheme?.accent\n  );\n  const [accentText, setAccentText] = useState<null | undefined | string>(\n    team.preferences?.customTheme?.accentText\n  );\n  const [name, setName] = useState(team.name);\n  const [subdomain, setSubdomain] = useState(team.subdomain);\n  const [publicBranding, setPublicBranding] = useState(\n    team.preferences?.publicBranding\n  );\n  const [defaultCollectionId, setDefaultCollectionId] = useState<string | null>(\n    team.defaultCollectionId\n  );\n\n  const customTheme: Partial<CustomTheme> = pickBy(\n    {\n      accent,\n      accentText,\n    },\n    isHexColor\n  );\n\n  const [tocPosition, setTocPosition] = useState(\n    team.getPreference(TeamPreference.TocPosition) as TOCPosition\n  );\n\n  const tocPositionOptions: Option[] = React.useMemo(\n    () =>\n      [\n        {\n          type: \"item\",\n          label: t(\"Left\"),\n          value: TOCPosition.Left,\n        },\n        {\n          type: \"item\",\n          label: t(\"Right\"),\n          value: TOCPosition.Right,\n        },\n      ] satisfies Option[],\n    [t]\n  );\n\n  const handleTocPositionChange = React.useCallback((position: string) => {\n    setTocPosition(position as TOCPosition);\n  }, []);\n\n  const handleSubmit = React.useCallback(\n    async (event?: React.SyntheticEvent) => {\n      if (event) {\n        event.preventDefault();\n      }\n\n      try {\n        await team.save({\n          name,\n          subdomain,\n          defaultCollectionId,\n          preferences: {\n            ...team.preferences,\n            publicBranding,\n            customTheme,\n            tocPosition,\n          },\n        });\n        toast.success(t(\"Settings saved\"));\n      } catch (err) {\n        toast.error(err.message);\n      }\n    },\n    [team, name, subdomain, defaultCollectionId, publicBranding, customTheme, t]\n  );\n\n  const handleNameChange = React.useCallback(\n    (ev: React.ChangeEvent<HTMLInputElement>) => {\n      setName(ev.target.value);\n    },\n    []\n  );\n\n  const handleSubdomainChange = React.useCallback(\n    (ev: React.ChangeEvent<HTMLInputElement>) => {\n      setSubdomain(ev.target.value.toLowerCase());\n    },\n    []\n  );\n\n  const handleAvatarChange = async (avatarUrl: string | null) => {\n    await team.save({ avatarUrl });\n    toast.success(t(\"Logo updated\"));\n  };\n\n  const handleAvatarError = React.useCallback(\n    (error: string | null | undefined) => {\n      toast.error(error || t(\"Unable to upload new logo\"));\n    },\n    [t]\n  );\n\n  const showDeleteWorkspace = () => {\n    dialogs.openModal({\n      title: t(\"Delete workspace\"),\n      content: <TeamDelete onSubmit={dialogs.closeAllModals} />,\n    });\n  };\n\n  const onSelectCollection = React.useCallback((value: string) => {\n    const selectedValue = value === \"home\" ? null : value;\n    setDefaultCollectionId(selectedValue);\n  }, []);\n\n  const isValid = form.current?.checkValidity();\n\n  const newTheme = React.useMemo(\n    () =>\n      ui.resolvedTheme === \"light\"\n        ? buildLightTheme(customTheme)\n        : buildDarkTheme(customTheme),\n    [customTheme, ui.resolvedTheme]\n  );\n\n  return (\n    <ThemeProvider theme={newTheme}>\n      <Scene title={t(\"Details\")} icon={<TeamIcon />}>\n        <Heading>{t(\"Details\")}</Heading>\n        <Text as=\"p\" type=\"secondary\">\n          <Trans>\n            These settings affect the way that your workspace appears to\n            everyone on the team.\n          </Trans>\n        </Text>\n\n        <form onSubmit={handleSubmit} ref={form}>\n          <Heading as=\"h2\">{t(\"Display\")}</Heading>\n          <SettingRow\n            label={t(\"Logo\")}\n            name=\"avatarUrl\"\n            description={t(\n              \"The logo is displayed at the top left of the application.\"\n            )}\n          >\n            <ImageInput\n              onSuccess={handleAvatarChange}\n              onError={handleAvatarError}\n              model={team}\n              borderRadius={0}\n            />\n          </SettingRow>\n          <SettingRow\n            label={t(\"Name\")}\n            name=\"name\"\n            description={t(\n              \"The workspace name, usually the same as your company name.\"\n            )}\n          >\n            <Input\n              id=\"name\"\n              autoComplete=\"organization\"\n              value={name}\n              onChange={handleNameChange}\n              required\n            />\n          </SettingRow>\n          <SettingRow\n            label={t(\"Theme\")}\n            name=\"accent\"\n            description={\n              <>\n                {t(\"Customize the interface look and feel.\")}{\" \"}\n                {accent && (\n                  <>\n                    <ButtonLink\n                      onClick={() => {\n                        setAccent(null);\n                        setAccentText(null);\n                      }}\n                    >\n                      {t(\"Reset theme\")}\n                    </ButtonLink>\n                  </>\n                )}\n              </>\n            }\n          >\n            <InputColor\n              id=\"accent\"\n              value={accent ?? theme.accent}\n              label={t(\"Accent color\")}\n              onChange={setAccent}\n              flex\n            />\n            <InputColor\n              id=\"accentText\"\n              value={accentText ?? theme.accentText}\n              label={t(\"Accent text color\")}\n              onChange={setAccentText}\n              flex\n            />\n          </SettingRow>\n          {team.avatarUrl && (\n            <SettingRow\n              name={TeamPreference.PublicBranding}\n              label={t(\"Public branding\")}\n              description={t(\n                \"Show your team’s logo on public pages like login and shared documents.\"\n              )}\n            >\n              <Switch\n                id={TeamPreference.PublicBranding}\n                name={TeamPreference.PublicBranding}\n                checked={publicBranding}\n                onChange={(event: React.ChangeEvent<HTMLInputElement>) =>\n                  setPublicBranding(event.target.checked)\n                }\n              />\n            </SettingRow>\n          )}\n          <SettingRow\n            border={false}\n            label={t(\"Table of contents position\")}\n            name=\"tocPosition\"\n            description={t(\n              \"The side to display the table of contents in relation to the main content.\"\n            )}\n          >\n            <InputSelectNew\n              options={tocPositionOptions}\n              value={tocPosition}\n              onChange={handleTocPositionChange}\n              ariaLabel={t(\"Table of contents position\")}\n              label={t(\"Table of contents position\")}\n              hideLabel\n            />\n          </SettingRow>\n\n          <Heading as=\"h2\">{t(\"Behavior\")}</Heading>\n\n          <SettingRow\n            visible={isCloudHosted}\n            label={t(\"Subdomain\")}\n            name=\"subdomain\"\n            description={\n              subdomain ? (\n                <>\n                  <Trans>Your workspace will be accessible at</Trans>{\" \"}\n                  <strong>\n                    {subdomain}.{getBaseDomain()}\n                  </strong>\n                </>\n              ) : (\n                t(\n                  \"Choose a subdomain to enable a login page just for your team.\"\n                )\n              )\n            }\n          >\n            <Input\n              id=\"subdomain\"\n              value={subdomain || \"\"}\n              onChange={handleSubdomainChange}\n              autoComplete=\"off\"\n              minLength={4}\n              maxLength={32}\n            />\n          </SettingRow>\n          <SettingRow\n            border={false}\n            label={t(\"Start view\")}\n            name=\"defaultCollectionId\"\n            description={t(\n              \"This is the screen that workspace members will first see when they sign in.\"\n            )}\n          >\n            <DefaultCollectionInputSelect\n              onSelectCollection={onSelectCollection}\n              defaultCollectionId={defaultCollectionId}\n            />\n          </SettingRow>\n\n          <ActionRow>\n            <Button type=\"submit\" disabled={team.isSaving || !isValid}>\n              {team.isSaving ? `${t(\"Saving\")}…` : t(\"Save\")}\n            </Button>\n          </ActionRow>\n\n          {can.delete && (\n            <>\n              <p>&nbsp;</p>\n\n              <Heading as=\"h2\">{t(\"Danger\")}</Heading>\n              <SettingRow\n                name=\"delete\"\n                border={false}\n                label={t(\"Delete workspace\")}\n                description={t(\n                  \"You can delete this entire workspace including collections, documents, and users.\"\n                )}\n              >\n                <span>\n                  <Button onClick={showDeleteWorkspace} neutral>\n                    {t(\"Delete workspace\")}…\n                  </Button>\n                </span>\n              </SettingRow>\n            </>\n          )}\n        </form>\n      </Scene>\n    </ThemeProvider>\n  );\n}\n\nexport default observer(Details);\n"],"file":"assets/Details.DZuCkk_e.js"}