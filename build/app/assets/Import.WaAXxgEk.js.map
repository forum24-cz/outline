{"version":3,"file":"Import.WaAXxgEk.js","sources":["../../../app/scenes/Settings/components/DropToImport.tsx","../../../app/scenes/Settings/components/HelpDisclosure.tsx","../../../app/scenes/Settings/components/ImportJSONDialog.tsx","../../../app/menus/ImportMenu.tsx","../../../app/scenes/Settings/components/ImportListItem.tsx","../../../app/scenes/Settings/components/ImportMarkdownDialog.tsx","../../../app/scenes/Settings/Import.tsx"],"sourcesContent":["import { observer } from \"mobx-react\";\nimport { NewDocumentIcon } from \"outline-icons\";\nimport * as React from \"react\";\nimport Dropzone from \"react-dropzone\";\nimport { useTranslation } from \"react-i18next\";\nimport { toast } from \"sonner\";\nimport styled from \"styled-components\";\nimport { s } from \"@shared/styles\";\nimport { AttachmentPreset, CollectionPermission } from \"@shared/types\";\nimport { bytesToHumanReadable } from \"@shared/utils/files\";\nimport Button from \"~/components/Button\";\nimport Flex from \"~/components/Flex\";\nimport InputSelectPermission from \"~/components/InputSelectPermission\";\nimport LoadingIndicator from \"~/components/LoadingIndicator\";\nimport Text from \"~/components/Text\";\nimport useStores from \"~/hooks/useStores\";\nimport { EmptySelectValue } from \"~/types\";\nimport { uploadFile } from \"~/utils/files\";\n\ntype Props = {\n  children: JSX.Element;\n  format?: string;\n  disabled?: boolean;\n  activeClassName?: string;\n  onSubmit: () => void;\n};\n\nfunction DropToImport({ disabled, onSubmit, children, format }: Props) {\n  const { t } = useTranslation();\n  const { collections } = useStores();\n  const [file, setFile] = React.useState<File | null>(null);\n  const [isImporting, setImporting] = React.useState(false);\n  const [permission, setPermission] =\n    React.useState<CollectionPermission | null>(CollectionPermission.ReadWrite);\n\n  const handleFiles = (files: File[]) => {\n    if (files.length > 1) {\n      toast.error(t(\"Please choose a single file to import\"));\n      return;\n    }\n    setFile(files[0]);\n  };\n\n  const handleStartImport = async () => {\n    if (!file) {\n      return;\n    }\n    setImporting(true);\n\n    try {\n      const attachment = await uploadFile(file, {\n        name: file.name,\n        preset: AttachmentPreset.WorkspaceImport,\n      });\n      await collections.import(attachment.id, { format, permission });\n      onSubmit();\n      toast.message(file.name, {\n        description: t(\n          \"Your import is being processed, you can safely leave this page\"\n        ),\n      });\n    } catch (err) {\n      toast.error(err.message);\n    } finally {\n      setImporting(false);\n    }\n  };\n\n  const handleRejection = React.useCallback(() => {\n    toast.error(t(\"File not supported â€“ please upload a valid ZIP file\"));\n  }, [t]);\n\n  if (disabled) {\n    return children;\n  }\n\n  return (\n    <Flex gap={8} column>\n      {isImporting && <LoadingIndicator />}\n      <Text as=\"p\" type=\"secondary\">\n        <Dropzone\n          accept=\"application/zip, application/x-zip-compressed\"\n          onDropAccepted={handleFiles}\n          onDropRejected={handleRejection}\n          disabled={isImporting}\n        >\n          {({ getRootProps, getInputProps, isDragActive }) => (\n            <DropzoneContainer\n              {...getRootProps()}\n              $disabled={isImporting}\n              $isDragActive={isDragActive}\n              tabIndex={-1}\n            >\n              <input {...getInputProps()} />\n              <Flex align=\"center\" gap={4} column>\n                <Icon size={32} color=\"#fff\" />\n                {file\n                  ? t(`${file.name} (${bytesToHumanReadable(file.size)})`)\n                  : children}\n              </Flex>\n            </DropzoneContainer>\n          )}\n        </Dropzone>\n      </Text>\n      <div>\n        <InputSelectPermission\n          value={permission}\n          onChange={(value: CollectionPermission | typeof EmptySelectValue) => {\n            setPermission(value === EmptySelectValue ? null : value);\n          }}\n        />\n        <Text as=\"span\" type=\"secondary\">\n          {t(\n            \"Set the default permission level for collections created from the import\"\n          )}\n          .\n        </Text>\n      </div>\n      <Flex justify=\"flex-end\">\n        <Button disabled={!file} onClick={handleStartImport}>\n          {t(\"Start import\")}\n        </Button>\n      </Flex>\n    </Flex>\n  );\n}\n\nconst Icon = styled(NewDocumentIcon)`\n  padding: 4px;\n  border-radius: 50%;\n  background: ${(props) => props.theme.brand.blue};\n  color: white;\n`;\n\nconst DropzoneContainer = styled.div<{\n  $disabled: boolean;\n  $isDragActive: boolean;\n}>`\n  background: ${(props) =>\n    props.$isDragActive\n      ? props.theme.backgroundSecondary\n      : props.theme.background};\n  border-radius: 8px;\n  border: 1px dashed ${s(\"divider\")};\n  padding: 52px;\n  text-align: center;\n  font-size: 15px;\n  cursor: var(--pointer);\n  opacity: ${(props) => (props.$disabled ? 0.5 : 1)};\n\n  &:hover {\n    background: ${s(\"backgroundSecondary\")};\n  }\n`;\n\nexport default observer(DropToImport);\n","import { QuestionMarkIcon } from \"outline-icons\";\nimport * as React from \"react\";\nimport {\n  useDisclosureState,\n  Disclosure,\n  DisclosureContent,\n} from \"reakit/Disclosure\";\nimport styled, { useTheme } from \"styled-components\";\nimport Button from \"~/components/Button\";\nimport Text from \"~/components/Text\";\n\ntype Props = {\n  children?: React.ReactNode;\n  title: React.ReactNode;\n};\n\nconst HelpDisclosure: React.FC<Props> = ({ title, children }: Props) => {\n  const disclosure = useDisclosureState({ animated: true });\n  const theme = useTheme();\n\n  return (\n    <>\n      <Disclosure {...disclosure}>\n        {(props) => (\n          <StyledButton\n            icon={<QuestionMarkIcon color={theme.textSecondary} />}\n            neutral\n            aria-label={title}\n            borderOnHover\n            {...props}\n          />\n        )}\n      </Disclosure>\n      <HelpContent {...disclosure}>\n        <Text as=\"p\" type=\"secondary\">\n          {children}\n        </Text>\n      </HelpContent>\n    </>\n  );\n};\n\nconst StyledButton = styled(Button)`\n  position: absolute;\n  top: 20px;\n  right: 50px;\n`;\n\nconst HelpContent = styled(DisclosureContent)`\n  transition: opacity 250ms ease-in-out;\n  opacity: 0;\n\n  &[data-enter] {\n    opacity: 1;\n  }\n`;\n\nexport default HelpDisclosure;\n","import * as React from \"react\";\nimport { Trans } from \"react-i18next\";\nimport { FileOperationFormat } from \"@shared/types\";\nimport env from \"~/env\";\nimport useStores from \"~/hooks/useStores\";\nimport DropToImport from \"./DropToImport\";\nimport HelpDisclosure from \"./HelpDisclosure\";\n\nfunction ImportJSONDialog() {\n  const { dialogs } = useStores();\n  const appName = env.APP_NAME;\n\n  return (\n    <>\n      <HelpDisclosure title={<Trans>How does this work?</Trans>}>\n        <Trans\n          defaults=\"You can import a zip file that was previously exported from the JSON option in another instance. In {{ appName }}, open <em>Export</em> in the Settings sidebar and click on <em>Export Data</em>.\"\n          values={{ appName }}\n          components={{\n            em: <strong />,\n          }}\n        />\n      </HelpDisclosure>\n      <DropToImport\n        onSubmit={dialogs.closeAllModals}\n        format={FileOperationFormat.JSON}\n      >\n        <Trans>\n          Drag and drop the zip file from the JSON export option in{\" \"}\n          {{ appName }}, or click to upload\n        </Trans>\n      </DropToImport>\n    </>\n  );\n}\n\nexport default ImportJSONDialog;\n","import { observer } from \"mobx-react\";\nimport { CrossIcon, TrashIcon } from \"outline-icons\";\nimport * as React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useMenuState } from \"reakit/Menu\";\nimport Import from \"~/models/Import\";\nimport ContextMenu from \"~/components/ContextMenu\";\nimport OverflowMenuButton from \"~/components/ContextMenu/OverflowMenuButton\";\nimport Template from \"~/components/ContextMenu/Template\";\nimport usePolicy from \"~/hooks/usePolicy\";\nimport { MenuItem } from \"~/types\";\n\ntype Props = {\n  /** Import to which actions will be applied. */\n  importModel: Import;\n  /** Callback to handle import cancellation. */\n  onCancel: () => Promise<void>;\n  /** Callback to handle import deletion. */\n  onDelete: () => Promise<void>;\n};\n\nexport const ImportMenu = observer(\n  ({ importModel, onCancel, onDelete }: Props) => {\n    const { t } = useTranslation();\n    const can = usePolicy(importModel);\n    const menu = useMenuState({\n      modal: true,\n    });\n\n    const items = React.useMemo(\n      () =>\n        [\n          {\n            type: \"button\",\n            title: t(\"Cancel\"),\n            visible: can.cancel,\n            icon: <CrossIcon />,\n            dangerous: true,\n            onClick: onCancel,\n          },\n          {\n            type: \"button\",\n            title: t(\"Delete\"),\n            visible: can.delete,\n            icon: <TrashIcon />,\n            dangerous: true,\n            onClick: onDelete,\n          },\n        ] satisfies MenuItem[],\n      [t, can.delete, can.cancel, onCancel, onDelete]\n    );\n\n    return (\n      <>\n        <OverflowMenuButton aria-label={t(\"Show menu\")} {...menu} />\n        <ContextMenu {...menu} aria-label={t(\"Import menu options\")}>\n          <Template {...menu} items={items} />\n        </ContextMenu>\n      </>\n    );\n  }\n);\n","import capitalize from \"lodash/capitalize\";\nimport { observer } from \"mobx-react\";\nimport { CrossIcon, DoneIcon, WarningIcon } from \"outline-icons\";\nimport React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { toast } from \"sonner\";\nimport { useTheme } from \"styled-components\";\nimport { ImportState } from \"@shared/types\";\nimport Import from \"~/models/Import\";\nimport { Action } from \"~/components/Actions\";\nimport ConfirmationDialog from \"~/components/ConfirmationDialog\";\nimport ListItem from \"~/components/List/Item\";\nimport Spinner from \"~/components/Spinner\";\nimport Time from \"~/components/Time\";\nimport useCurrentUser from \"~/hooks/useCurrentUser\";\nimport useStores from \"~/hooks/useStores\";\nimport { ImportMenu } from \"~/menus/ImportMenu\";\nimport isCloudHosted from \"~/utils/isCloudHosted\";\n\ntype Props = {\n  /** Import that's displayed as list item. */\n  importModel: Import;\n};\n\nexport const ImportListItem = observer(({ importModel }: Props) => {\n  const { t } = useTranslation();\n  const { dialogs } = useStores();\n  const user = useCurrentUser();\n  const theme = useTheme();\n  const showProgress =\n    importModel.state !== ImportState.Canceled &&\n    importModel.state !== ImportState.Errored;\n  const showErrorInfo =\n    !isCloudHosted &&\n    importModel.state === ImportState.Errored &&\n    !!importModel.error;\n\n  const stateMap = React.useMemo(\n    () => ({\n      [ImportState.Created]: t(\"Processing\"),\n      [ImportState.InProgress]: t(\"Processing\"),\n      [ImportState.Processed]: t(\"Processing\"),\n      [ImportState.Completed]: t(\"Completed\"),\n      [ImportState.Errored]: t(\"Failed\"),\n      [ImportState.Canceled]: t(\"Canceled\"),\n    }),\n    [t]\n  );\n\n  const iconMap = React.useMemo(\n    () => ({\n      [ImportState.Created]: <Spinner />,\n      [ImportState.InProgress]: <Spinner />,\n      [ImportState.Processed]: <Spinner />,\n      [ImportState.Completed]: <DoneIcon color={theme.accent} />,\n      [ImportState.Errored]: <WarningIcon color={theme.danger} />,\n      [ImportState.Canceled]: <CrossIcon color={theme.textTertiary} />,\n    }),\n    [theme]\n  );\n\n  const handleCancel = React.useCallback(async () => {\n    const onCancel = async () => {\n      try {\n        await importModel.cancel();\n        toast.success(t(\"Import canceled\"));\n      } catch (err) {\n        toast.error(err.message);\n      }\n    };\n\n    dialogs.openModal({\n      title: t(\"Are you sure you want to cancel this import?\"),\n      content: (\n        <ConfirmationDialog\n          onSubmit={onCancel}\n          submitText={t(\"Cancel\")}\n          savingText={`${t(\"Canceling\")}â€¦`}\n          danger\n        >\n          {t(\n            \"Canceling this import will discard any progress made. This cannot be undone.\"\n          )}\n        </ConfirmationDialog>\n      ),\n    });\n  }, [t, dialogs, importModel]);\n\n  const handleDelete = React.useCallback(async () => {\n    const onDelete = async () => {\n      try {\n        await importModel.delete();\n        toast.success(t(\"Import deleted\"));\n      } catch (err) {\n        toast.error(err.message);\n      }\n    };\n\n    dialogs.openModal({\n      title: t(\"Are you sure you want to delete this import?\"),\n      content: (\n        <ConfirmationDialog\n          onSubmit={onDelete}\n          savingText={`${t(\"Deleting\")}â€¦`}\n          danger\n        >\n          {t(\n            \"Deleting this import will also delete all collections and documents that were created from it. This cannot be undone.\"\n          )}\n        </ConfirmationDialog>\n      ),\n    });\n  }, [t, dialogs, importModel]);\n\n  return (\n    <ListItem\n      title={importModel.name}\n      image={iconMap[importModel.state]}\n      subtitle={\n        <>\n          {stateMap[importModel.state]}&nbsp;â€¢&nbsp;\n          {showErrorInfo && (\n            <>\n              {importModel.error}\n              {`. ${t(\"Check server logs for more details.\")}`}&nbsp;â€¢&nbsp;\n            </>\n          )}\n          {t(`{{userName}} requested`, {\n            userName:\n              user.id === importModel.createdBy.id\n                ? t(\"You\")\n                : importModel.createdBy.name,\n          })}\n          &nbsp;\n          <Time dateTime={importModel.createdAt} addSuffix shorten />\n          &nbsp;â€¢&nbsp;\n          {capitalize(importModel.service)}\n          {showProgress && (\n            <>\n              &nbsp;â€¢&nbsp;\n              {t(\"{{ count }} document imported\", {\n                count: importModel.documentCount,\n              })}\n            </>\n          )}\n        </>\n      }\n      actions={\n        <Action>\n          <ImportMenu\n            importModel={importModel}\n            onCancel={handleCancel}\n            onDelete={handleDelete}\n          />\n        </Action>\n      }\n    />\n  );\n});\n","import * as React from \"react\";\nimport { Trans } from \"react-i18next\";\nimport { FileOperationFormat } from \"@shared/types\";\nimport env from \"~/env\";\nimport useStores from \"~/hooks/useStores\";\nimport DropToImport from \"./DropToImport\";\nimport HelpDisclosure from \"./HelpDisclosure\";\n\nfunction ImportMarkdownDialog() {\n  const { dialogs } = useStores();\n  const appName = env.APP_NAME;\n\n  return (\n    <>\n      <HelpDisclosure title={<Trans>How does this work?</Trans>}>\n        <Trans\n          defaults=\"You can import a zip file that was previously exported from an Outline installation â€“ collections, documents, and images will be imported. In Outline, open <em>Export</em> in the Settings sidebar and click on <em>Export Data</em>.\"\n          components={{\n            em: <strong />,\n          }}\n        />\n      </HelpDisclosure>\n      <DropToImport\n        onSubmit={dialogs.closeAllModals}\n        format={FileOperationFormat.MarkdownZip}\n      >\n        <Trans>\n          Drag and drop the zip file from the Markdown export option in{\" \"}\n          {{ appName }}, or click to upload\n        </Trans>\n      </DropToImport>\n    </>\n  );\n}\n\nexport default ImportMarkdownDialog;\n","import orderBy from \"lodash/orderBy\";\nimport { observer } from \"mobx-react\";\nimport { NewDocumentIcon } from \"outline-icons\";\nimport * as React from \"react\";\nimport { useTranslation, Trans } from \"react-i18next\";\nimport { Pagination } from \"@shared/constants\";\nimport { FileOperationType } from \"@shared/types\";\nimport { cdnPath } from \"@shared/utils/urls\";\nimport FileOperation from \"~/models/FileOperation\";\nimport ImportModel from \"~/models/Import\";\nimport Button from \"~/components/Button\";\nimport Heading from \"~/components/Heading\";\nimport MarkdownIcon from \"~/components/Icons/MarkdownIcon\";\nimport OutlineIcon from \"~/components/Icons/OutlineIcon\";\nimport Item from \"~/components/List/Item\";\nimport PaginatedList from \"~/components/PaginatedList\";\nimport Scene from \"~/components/Scene\";\nimport Text from \"~/components/Text\";\nimport env from \"~/env\";\nimport useStores from \"~/hooks/useStores\";\nimport { Hook, PluginManager } from \"~/utils/PluginManager\";\nimport FileOperationListItem from \"./components/FileOperationListItem\";\nimport ImportJSONDialog from \"./components/ImportJSONDialog\";\nimport { ImportListItem } from \"./components/ImportListItem\";\nimport ImportMarkdownDialog from \"./components/ImportMarkdownDialog\";\n\ntype Config = {\n  /** The title of the import. */\n  title: string;\n  /** The auxiliary descriptive text of the import. */\n  subtitle: string;\n  /** An icon to denote the kind of import. */\n  icon: React.ReactElement;\n  /** Trigger for the import. */\n  action: React.ReactElement;\n};\n\nfunction useImportsConfig() {\n  const { t } = useTranslation();\n  const { dialogs } = useStores();\n  const appName = env.APP_NAME;\n\n  return React.useMemo(() => {\n    const items: Config[] = [\n      {\n        title: t(\"Markdown\"),\n        subtitle: t(\n          \"Import a zip file of Markdown documents (exported from version 0.67.0 or earlier)\"\n        ),\n        icon: <MarkdownIcon size={28} />,\n        action: (\n          <Button\n            type=\"submit\"\n            onClick={() => {\n              dialogs.openModal({\n                title: t(\"Import data\"),\n                content: <ImportMarkdownDialog />,\n              });\n            }}\n            neutral\n          >\n            {t(\"Import\")}â€¦\n          </Button>\n        ),\n      },\n      {\n        title: \"JSON\",\n        subtitle: t(\n          \"Import a JSON data file exported from another {{ appName }} instance\",\n          {\n            appName,\n          }\n        ),\n        icon: <OutlineIcon size={28} cover />,\n        action: (\n          <Button\n            type=\"submit\"\n            onClick={() => {\n              dialogs.openModal({\n                title: t(\"Import data\"),\n                content: <ImportJSONDialog />,\n              });\n            }}\n            neutral\n          >\n            {t(\"Import\")}â€¦\n          </Button>\n        ),\n      },\n    ];\n\n    PluginManager.getHooks(Hook.Imports).forEach((plugin) => {\n      items.push({ ...plugin.value });\n    });\n\n    items.push({\n      title: \"Confluence\",\n      subtitle: t(\"Import pages from a Confluence instance\"),\n      icon: <img src={cdnPath(\"/images/confluence.png\")} width={28} />,\n      action: (\n        <Button type=\"submit\" disabled neutral>\n          {t(\"Enterprise\")}\n        </Button>\n      ),\n    });\n\n    return items;\n  }, [t, dialogs, appName]);\n}\n\nfunction Import() {\n  const { t } = useTranslation();\n  const { fileOperations, imports } = useStores();\n  const configs = useImportsConfig();\n  const appName = env.APP_NAME;\n\n  const [, setForceRender] = React.useState(0);\n  const offset = React.useMemo(() => ({ imports: 0, fileOperations: 0 }), []);\n\n  const fetchImports = React.useCallback(async () => {\n    const [importsArr, fileOpsArr] = await Promise.all([\n      imports.fetchPage({\n        offset: offset.imports,\n        limit: Pagination.defaultLimit,\n      }),\n      fileOperations.fetchPage({\n        type: FileOperationType.Import,\n        offset: offset.fileOperations,\n        limit: Pagination.defaultLimit,\n      }),\n    ]);\n\n    const pageImports = orderBy(\n      [...importsArr, ...fileOpsArr],\n      \"createdAt\",\n      \"desc\"\n    ).slice(0, Pagination.defaultLimit);\n\n    const apiImportsCount = pageImports.filter(\n      (item) => item instanceof ImportModel\n    ).length;\n\n    offset.imports += apiImportsCount;\n    offset.fileOperations += pageImports.length - apiImportsCount;\n\n    // needed to re-render after mobx store and offset is updated\n    setForceRender((s) => ++s);\n\n    return pageImports;\n  }, [imports, fileOperations, offset]);\n\n  const allImports = orderBy(\n    [\n      ...imports.orderedData,\n      ...fileOperations.filter({ type: FileOperationType.Import }),\n    ],\n    \"createdAt\",\n    \"desc\"\n  ).slice(0, offset.imports + offset.fileOperations);\n\n  return (\n    <Scene title={t(\"Import\")} icon={<NewDocumentIcon />}>\n      <Heading>{t(\"Import\")}</Heading>\n      <Text as=\"p\" type=\"secondary\">\n        <Trans>\n          Quickly transfer your existing documents, pages, and files from other\n          tools and services into {{ appName }}. You can also drag and drop any\n          HTML, Markdown, and text documents directly into Collections in the\n          app.\n        </Trans>\n      </Text>\n\n      <div>\n        {configs.map((config) => (\n          <Item\n            key={config.title}\n            title={config.title}\n            subtitle={config.subtitle}\n            image={config.icon}\n            actions={config.action}\n            border={false}\n          />\n        ))}\n      </div>\n      <br />\n      <PaginatedList\n        items={allImports}\n        fetch={fetchImports}\n        heading={\n          <h2>\n            <Trans>Recent imports</Trans>\n          </h2>\n        }\n        renderItem={(item: ImportModel | FileOperation) =>\n          item instanceof ImportModel ? (\n            <ImportListItem key={item.id} importModel={item} />\n          ) : (\n            <FileOperationListItem key={item.id} fileOperation={item} />\n          )\n        }\n      />\n    </Scene>\n  );\n}\n\nexport default observer(Import);\n"],"names":["Icon","styled","NewDocumentIcon","withConfig","componentId","props","theme","brand","blue","DropzoneContainer","div","$isDragActive","backgroundSecondary","background","s","$disabled","observer","DropToImport","disabled","onSubmit","children","format","t","useTranslation","collections","useStores","file","setFile","React","isImporting","setImporting","permission","setPermission","CollectionPermission","ReadWrite","handleRejection","error","Flex","gap","column","LoadingIndicator","Text","as","type","jsx","Dropzone","accept","onDropAccepted","files","length","onDropRejected","getRootProps","getInputProps","isDragActive","jsxs","tabIndex","align","size","color","name","bytesToHumanReadable","InputSelectPermission","value","onChange","EmptySelectValue","justify","Button","onClick","async","attachment","uploadFile","preset","AttachmentPreset","WorkspaceImport","import","id","message","description","err","HelpDisclosure","title","disclosure","useDisclosureState","animated","useTheme","Fragment","Disclosure","StyledButton","icon","QuestionMarkIcon","textSecondary","neutral","borderOnHover","HelpContent","DisclosureContent","ImportJSONDialog","dialogs","appName","env","APP_NAME","Trans","defaults","values","components","em","closeAllModals","FileOperationFormat","JSON","ImportMenu","importModel","onCancel","onDelete","can","usePolicy","menu","useMenuState","modal","items","useMemo","visible","cancel","CrossIcon","dangerous","delete","TrashIcon","OverflowMenuButton","ContextMenu","Template","ImportListItem","user","useCurrentUser","showProgress","state","ImportState","Canceled","Errored","showErrorInfo","isCloudHosted","stateMap","Created","InProgress","Processed","Completed","iconMap","Spinner","DoneIcon","accent","WarningIcon","danger","textTertiary","handleCancel","useCallback","openModal","content","ConfirmationDialog","success","submitText","savingText","handleDelete","ListItem","image","subtitle","userName","createdBy","Time","dateTime","createdAt","addSuffix","shorten","capitalize","service","count","documentCount","actions","Action","ImportMarkdownDialog","MarkdownZip","Import","fileOperations","imports","configs","useImportsConfig","MarkdownIcon","action","OutlineIcon","cover","PluginManager","getHooks","Hook","Imports","forEach","plugin","push","src","cdnPath","width","setForceRender","offset","fetchImports","importsArr","fileOpsArr","Promise","all","fetchPage","limit","Pagination","defaultLimit","FileOperationType","pageImports","orderBy","slice","apiImportsCount","filter","item","ImportModel","allImports","orderedData","Scene","Heading","map","config","Item","border","PaginatedList","fetch","heading","renderItem","FileOperationListItem","fileOperation"],"mappings":"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"}