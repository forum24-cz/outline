{"version":3,"file":"layout.9OyZaRTR.js","sources":["../../../node_modules/lodash-es/now.js","../../../node_modules/lodash-es/_baseGt.js","../../../node_modules/lodash-es/mapValues.js","../../../node_modules/lodash-es/max.js","../../../node_modules/lodash-es/minBy.js","../../../node_modules/lodash-es/_compareAscending.js","../../../node_modules/lodash-es/_baseOrderBy.js","../../../node_modules/lodash-es/_baseSortBy.js","../../../node_modules/lodash-es/_compareMultiple.js","../../../node_modules/lodash-es/pick.js","../../../node_modules/lodash-es/_flatRest.js","../../../node_modules/lodash-es/_basePick.js","../../../node_modules/lodash-es/_baseRange.js","../../../node_modules/lodash-es/range.js","../../../node_modules/lodash-es/_createRange.js","../../../node_modules/lodash-es/sortBy.js","../../../node_modules/lodash-es/uniqueId.js","../../../node_modules/dagre-d3-es/src/dagre/data/list.js","../../../node_modules/dagre-d3-es/src/dagre/greedy-fas.js","../../../node_modules/dagre-d3-es/src/dagre/acyclic.js","../../../node_modules/dagre-d3-es/src/dagre/util.js","../../../node_modules/dagre-d3-es/src/dagre/add-border-segments.js","../../../node_modules/dagre-d3-es/src/dagre/coordinate-system.js","../../../node_modules/dagre-d3-es/src/dagre/normalize.js","../../../node_modules/dagre-d3-es/src/dagre/rank/util.js","../../../node_modules/dagre-d3-es/src/dagre/rank/feasible-tree.js","../../../node_modules/dagre-d3-es/src/graphlib/alg/dfs.js","../../../node_modules/dagre-d3-es/src/dagre/rank/network-simplex.js","../../../node_modules/dagre-d3-es/src/graphlib/alg/postorder.js","../../../node_modules/dagre-d3-es/src/graphlib/alg/preorder.js","../../../node_modules/dagre-d3-es/src/dagre/rank/index.js","../../../node_modules/dagre-d3-es/src/graphlib/alg/topsort.js","../../../node_modules/dagre-d3-es/src/dagre/nesting-graph.js","../../../node_modules/dagre-d3-es/src/dagre/order/build-layer-graph.js","../../../node_modules/dagre-d3-es/src/dagre/order/cross-count.js","../../../node_modules/lodash-es/zipObject.js","../../../node_modules/lodash-es/_baseZipObject.js","../../../node_modules/dagre-d3-es/src/dagre/order/resolve-conflicts.js","../../../node_modules/dagre-d3-es/src/dagre/order/sort.js","../../../node_modules/dagre-d3-es/src/dagre/order/sort-subgraph.js","../../../node_modules/dagre-d3-es/src/dagre/order/barycenter.js","../../../node_modules/dagre-d3-es/src/dagre/order/index.js","../../../node_modules/dagre-d3-es/src/dagre/order/init-order.js","../../../node_modules/lodash-es/cloneDeep.js","../../../node_modules/dagre-d3-es/src/dagre/order/add-subgraph-constraints.js","../../../node_modules/dagre-d3-es/src/dagre/parent-dummy-chains.js","../../../node_modules/dagre-d3-es/src/dagre/position/bk.js","../../../node_modules/lodash-es/forIn.js","../../../node_modules/dagre-d3-es/src/dagre/position/index.js","../../../node_modules/lodash-es/forOwn.js","../../../node_modules/dagre-d3-es/src/dagre/layout.js"],"sourcesContent":["import root from './_root.js';\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\nexport default now;\n","/**\n * The base implementation of `_.gt` which doesn't coerce arguments.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if `value` is greater than `other`,\n *  else `false`.\n */\nfunction baseGt(value, other) {\n  return value > other;\n}\n\nexport default baseGt;\n","import baseAssignValue from './_baseAssignValue.js';\nimport baseForOwn from './_baseForOwn.js';\nimport baseIteratee from './_baseIteratee.js';\n\n/**\n * Creates an object with the same keys as `object` and values generated\n * by running each own enumerable string keyed property of `object` thru\n * `iteratee`. The iteratee is invoked with three arguments:\n * (value, key, object).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Object\n * @param {Object} object The object to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Object} Returns the new mapped object.\n * @see _.mapKeys\n * @example\n *\n * var users = {\n *   'fred':    { 'user': 'fred',    'age': 40 },\n *   'pebbles': { 'user': 'pebbles', 'age': 1 }\n * };\n *\n * _.mapValues(users, function(o) { return o.age; });\n * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n *\n * // The `_.property` iteratee shorthand.\n * _.mapValues(users, 'age');\n * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n */\nfunction mapValues(object, iteratee) {\n  var result = {};\n  iteratee = baseIteratee(iteratee, 3);\n\n  baseForOwn(object, function(value, key, object) {\n    baseAssignValue(result, key, iteratee(value, key, object));\n  });\n  return result;\n}\n\nexport default mapValues;\n","import baseExtremum from './_baseExtremum.js';\nimport baseGt from './_baseGt.js';\nimport identity from './identity.js';\n\n/**\n * Computes the maximum value of `array`. If `array` is empty or falsey,\n * `undefined` is returned.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Math\n * @param {Array} array The array to iterate over.\n * @returns {*} Returns the maximum value.\n * @example\n *\n * _.max([4, 2, 8, 6]);\n * // => 8\n *\n * _.max([]);\n * // => undefined\n */\nfunction max(array) {\n  return (array && array.length)\n    ? baseExtremum(array, identity, baseGt)\n    : undefined;\n}\n\nexport default max;\n","import baseExtremum from './_baseExtremum.js';\nimport baseIteratee from './_baseIteratee.js';\nimport baseLt from './_baseLt.js';\n\n/**\n * This method is like `_.min` except that it accepts `iteratee` which is\n * invoked for each element in `array` to generate the criterion by which\n * the value is ranked. The iteratee is invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Math\n * @param {Array} array The array to iterate over.\n * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n * @returns {*} Returns the minimum value.\n * @example\n *\n * var objects = [{ 'n': 1 }, { 'n': 2 }];\n *\n * _.minBy(objects, function(o) { return o.n; });\n * // => { 'n': 1 }\n *\n * // The `_.property` iteratee shorthand.\n * _.minBy(objects, 'n');\n * // => { 'n': 1 }\n */\nfunction minBy(array, iteratee) {\n  return (array && array.length)\n    ? baseExtremum(array, baseIteratee(iteratee, 2), baseLt)\n    : undefined;\n}\n\nexport default minBy;\n","import isSymbol from './isSymbol.js';\n\n/**\n * Compares values to sort them in ascending order.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {number} Returns the sort order indicator for `value`.\n */\nfunction compareAscending(value, other) {\n  if (value !== other) {\n    var valIsDefined = value !== undefined,\n        valIsNull = value === null,\n        valIsReflexive = value === value,\n        valIsSymbol = isSymbol(value);\n\n    var othIsDefined = other !== undefined,\n        othIsNull = other === null,\n        othIsReflexive = other === other,\n        othIsSymbol = isSymbol(other);\n\n    if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||\n        (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||\n        (valIsNull && othIsDefined && othIsReflexive) ||\n        (!valIsDefined && othIsReflexive) ||\n        !valIsReflexive) {\n      return 1;\n    }\n    if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||\n        (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||\n        (othIsNull && valIsDefined && valIsReflexive) ||\n        (!othIsDefined && valIsReflexive) ||\n        !othIsReflexive) {\n      return -1;\n    }\n  }\n  return 0;\n}\n\nexport default compareAscending;\n","import arrayMap from './_arrayMap.js';\nimport baseGet from './_baseGet.js';\nimport baseIteratee from './_baseIteratee.js';\nimport baseMap from './_baseMap.js';\nimport baseSortBy from './_baseSortBy.js';\nimport baseUnary from './_baseUnary.js';\nimport compareMultiple from './_compareMultiple.js';\nimport identity from './identity.js';\nimport isArray from './isArray.js';\n\n/**\n * The base implementation of `_.orderBy` without param guards.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\n * @param {string[]} orders The sort orders of `iteratees`.\n * @returns {Array} Returns the new sorted array.\n */\nfunction baseOrderBy(collection, iteratees, orders) {\n  if (iteratees.length) {\n    iteratees = arrayMap(iteratees, function(iteratee) {\n      if (isArray(iteratee)) {\n        return function(value) {\n          return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);\n        }\n      }\n      return iteratee;\n    });\n  } else {\n    iteratees = [identity];\n  }\n\n  var index = -1;\n  iteratees = arrayMap(iteratees, baseUnary(baseIteratee));\n\n  var result = baseMap(collection, function(value, key, collection) {\n    var criteria = arrayMap(iteratees, function(iteratee) {\n      return iteratee(value);\n    });\n    return { 'criteria': criteria, 'index': ++index, 'value': value };\n  });\n\n  return baseSortBy(result, function(object, other) {\n    return compareMultiple(object, other, orders);\n  });\n}\n\nexport default baseOrderBy;\n","/**\n * The base implementation of `_.sortBy` which uses `comparer` to define the\n * sort order of `array` and replaces criteria objects with their corresponding\n * values.\n *\n * @private\n * @param {Array} array The array to sort.\n * @param {Function} comparer The function to define sort order.\n * @returns {Array} Returns `array`.\n */\nfunction baseSortBy(array, comparer) {\n  var length = array.length;\n\n  array.sort(comparer);\n  while (length--) {\n    array[length] = array[length].value;\n  }\n  return array;\n}\n\nexport default baseSortBy;\n","import compareAscending from './_compareAscending.js';\n\n/**\n * Used by `_.orderBy` to compare multiple properties of a value to another\n * and stable sort them.\n *\n * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\n * specify an order of \"desc\" for descending or \"asc\" for ascending sort order\n * of corresponding values.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {boolean[]|string[]} orders The order to sort by for each property.\n * @returns {number} Returns the sort order indicator for `object`.\n */\nfunction compareMultiple(object, other, orders) {\n  var index = -1,\n      objCriteria = object.criteria,\n      othCriteria = other.criteria,\n      length = objCriteria.length,\n      ordersLength = orders.length;\n\n  while (++index < length) {\n    var result = compareAscending(objCriteria[index], othCriteria[index]);\n    if (result) {\n      if (index >= ordersLength) {\n        return result;\n      }\n      var order = orders[index];\n      return result * (order == 'desc' ? -1 : 1);\n    }\n  }\n  // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications\n  // that causes it, under certain circumstances, to provide the same value for\n  // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\n  // for more details.\n  //\n  // This also ensures a stable sort in V8 and other engines.\n  // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\n  return object.index - other.index;\n}\n\nexport default compareMultiple;\n","import basePick from './_basePick.js';\nimport flatRest from './_flatRest.js';\n\n/**\n * Creates an object composed of the picked `object` properties.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The source object.\n * @param {...(string|string[])} [paths] The property paths to pick.\n * @returns {Object} Returns the new object.\n * @example\n *\n * var object = { 'a': 1, 'b': '2', 'c': 3 };\n *\n * _.pick(object, ['a', 'c']);\n * // => { 'a': 1, 'c': 3 }\n */\nvar pick = flatRest(function(object, paths) {\n  return object == null ? {} : basePick(object, paths);\n});\n\nexport default pick;\n","import flatten from './flatten.js';\nimport overRest from './_overRest.js';\nimport setToString from './_setToString.js';\n\n/**\n * A specialized version of `baseRest` which flattens the rest array.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @returns {Function} Returns the new function.\n */\nfunction flatRest(func) {\n  return setToString(overRest(func, undefined, flatten), func + '');\n}\n\nexport default flatRest;\n","import basePickBy from './_basePickBy.js';\nimport hasIn from './hasIn.js';\n\n/**\n * The base implementation of `_.pick` without support for individual\n * property identifiers.\n *\n * @private\n * @param {Object} object The source object.\n * @param {string[]} paths The property paths to pick.\n * @returns {Object} Returns the new object.\n */\nfunction basePick(object, paths) {\n  return basePickBy(object, paths, function(value, path) {\n    return hasIn(object, path);\n  });\n}\n\nexport default basePick;\n","/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeCeil = Math.ceil,\n    nativeMax = Math.max;\n\n/**\n * The base implementation of `_.range` and `_.rangeRight` which doesn't\n * coerce arguments.\n *\n * @private\n * @param {number} start The start of the range.\n * @param {number} end The end of the range.\n * @param {number} step The value to increment or decrement by.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Array} Returns the range of numbers.\n */\nfunction baseRange(start, end, step, fromRight) {\n  var index = -1,\n      length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),\n      result = Array(length);\n\n  while (length--) {\n    result[fromRight ? length : ++index] = start;\n    start += step;\n  }\n  return result;\n}\n\nexport default baseRange;\n","import createRange from './_createRange.js';\n\n/**\n * Creates an array of numbers (positive and/or negative) progressing from\n * `start` up to, but not including, `end`. A step of `-1` is used if a negative\n * `start` is specified without an `end` or `step`. If `end` is not specified,\n * it's set to `start` with `start` then set to `0`.\n *\n * **Note:** JavaScript follows the IEEE-754 standard for resolving\n * floating-point values which can produce unexpected results.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {number} [start=0] The start of the range.\n * @param {number} end The end of the range.\n * @param {number} [step=1] The value to increment or decrement by.\n * @returns {Array} Returns the range of numbers.\n * @see _.inRange, _.rangeRight\n * @example\n *\n * _.range(4);\n * // => [0, 1, 2, 3]\n *\n * _.range(-4);\n * // => [0, -1, -2, -3]\n *\n * _.range(1, 5);\n * // => [1, 2, 3, 4]\n *\n * _.range(0, 20, 5);\n * // => [0, 5, 10, 15]\n *\n * _.range(0, -4, -1);\n * // => [0, -1, -2, -3]\n *\n * _.range(1, 4, 0);\n * // => [1, 1, 1]\n *\n * _.range(0);\n * // => []\n */\nvar range = createRange();\n\nexport default range;\n","import baseRange from './_baseRange.js';\nimport isIterateeCall from './_isIterateeCall.js';\nimport toFinite from './toFinite.js';\n\n/**\n * Creates a `_.range` or `_.rangeRight` function.\n *\n * @private\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new range function.\n */\nfunction createRange(fromRight) {\n  return function(start, end, step) {\n    if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {\n      end = step = undefined;\n    }\n    // Ensure the sign of `-0` is preserved.\n    start = toFinite(start);\n    if (end === undefined) {\n      end = start;\n      start = 0;\n    } else {\n      end = toFinite(end);\n    }\n    step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);\n    return baseRange(start, end, step, fromRight);\n  };\n}\n\nexport default createRange;\n","import baseFlatten from './_baseFlatten.js';\nimport baseOrderBy from './_baseOrderBy.js';\nimport baseRest from './_baseRest.js';\nimport isIterateeCall from './_isIterateeCall.js';\n\n/**\n * Creates an array of elements, sorted in ascending order by the results of\n * running each element in a collection thru each iteratee. This method\n * performs a stable sort, that is, it preserves the original sort order of\n * equal elements. The iteratees are invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {...(Function|Function[])} [iteratees=[_.identity]]\n *  The iteratees to sort by.\n * @returns {Array} Returns the new sorted array.\n * @example\n *\n * var users = [\n *   { 'user': 'fred',   'age': 48 },\n *   { 'user': 'barney', 'age': 36 },\n *   { 'user': 'fred',   'age': 30 },\n *   { 'user': 'barney', 'age': 34 }\n * ];\n *\n * _.sortBy(users, [function(o) { return o.user; }]);\n * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]\n *\n * _.sortBy(users, ['user', 'age']);\n * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]\n */\nvar sortBy = baseRest(function(collection, iteratees) {\n  if (collection == null) {\n    return [];\n  }\n  var length = iteratees.length;\n  if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {\n    iteratees = [];\n  } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {\n    iteratees = [iteratees[0]];\n  }\n  return baseOrderBy(collection, baseFlatten(iteratees, 1), []);\n});\n\nexport default sortBy;\n","import toString from './toString.js';\n\n/** Used to generate unique IDs. */\nvar idCounter = 0;\n\n/**\n * Generates a unique ID. If `prefix` is given, the ID is appended to it.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {string} [prefix=''] The value to prefix the ID with.\n * @returns {string} Returns the unique ID.\n * @example\n *\n * _.uniqueId('contact_');\n * // => 'contact_104'\n *\n * _.uniqueId();\n * // => '105'\n */\nfunction uniqueId(prefix) {\n  var id = ++idCounter;\n  return toString(prefix) + id;\n}\n\nexport default uniqueId;\n","/*\n * Simple doubly linked list implementation derived from Cormen, et al.,\n * \"Introduction to Algorithms\".\n */\n\nexport { List };\n\nclass List {\n  constructor() {\n    var sentinel = {};\n    sentinel._next = sentinel._prev = sentinel;\n    this._sentinel = sentinel;\n  }\n  dequeue() {\n    var sentinel = this._sentinel;\n    var entry = sentinel._prev;\n    if (entry !== sentinel) {\n      unlink(entry);\n      return entry;\n    }\n  }\n  enqueue(entry) {\n    var sentinel = this._sentinel;\n    if (entry._prev && entry._next) {\n      unlink(entry);\n    }\n    entry._next = sentinel._next;\n    sentinel._next._prev = entry;\n    sentinel._next = entry;\n    entry._prev = sentinel;\n  }\n  toString() {\n    var strs = [];\n    var sentinel = this._sentinel;\n    var curr = sentinel._prev;\n    while (curr !== sentinel) {\n      strs.push(JSON.stringify(curr, filterOutLinks));\n      curr = curr._prev;\n    }\n    return '[' + strs.join(', ') + ']';\n  }\n}\n\nfunction unlink(entry) {\n  entry._prev._next = entry._next;\n  entry._next._prev = entry._prev;\n  delete entry._next;\n  delete entry._prev;\n}\n\nfunction filterOutLinks(k, v) {\n  if (k !== '_next' && k !== '_prev') {\n    return v;\n  }\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../graphlib/index.js';\nimport { List } from './data/list.js';\n\n/*\n * A greedy heuristic for finding a feedback arc set for a graph. A feedback\n * arc set is a set of edges that can be removed to make a graph acyclic.\n * The algorithm comes from: P. Eades, X. Lin, and W. F. Smyth, \"A fast and\n * effective heuristic for the feedback arc set problem.\" This implementation\n * adjusts that from the paper to allow for weighted edges.\n */\nexport { greedyFAS };\n\nvar DEFAULT_WEIGHT_FN = _.constant(1);\n\nfunction greedyFAS(g, weightFn) {\n  if (g.nodeCount() <= 1) {\n    return [];\n  }\n  var state = buildState(g, weightFn || DEFAULT_WEIGHT_FN);\n  var results = doGreedyFAS(state.graph, state.buckets, state.zeroIdx);\n\n  // Expand multi-edges\n  return _.flatten(\n    _.map(results, function (e) {\n      return g.outEdges(e.v, e.w);\n    }),\n  );\n}\n\nfunction doGreedyFAS(g, buckets, zeroIdx) {\n  var results = [];\n  var sources = buckets[buckets.length - 1];\n  var sinks = buckets[0];\n\n  var entry;\n  while (g.nodeCount()) {\n    while ((entry = sinks.dequeue())) {\n      removeNode(g, buckets, zeroIdx, entry);\n    }\n    while ((entry = sources.dequeue())) {\n      removeNode(g, buckets, zeroIdx, entry);\n    }\n    if (g.nodeCount()) {\n      for (var i = buckets.length - 2; i > 0; --i) {\n        entry = buckets[i].dequeue();\n        if (entry) {\n          results = results.concat(removeNode(g, buckets, zeroIdx, entry, true));\n          break;\n        }\n      }\n    }\n  }\n\n  return results;\n}\n\nfunction removeNode(g, buckets, zeroIdx, entry, collectPredecessors) {\n  var results = collectPredecessors ? [] : undefined;\n\n  _.forEach(g.inEdges(entry.v), function (edge) {\n    var weight = g.edge(edge);\n    var uEntry = g.node(edge.v);\n\n    if (collectPredecessors) {\n      results.push({ v: edge.v, w: edge.w });\n    }\n\n    uEntry.out -= weight;\n    assignBucket(buckets, zeroIdx, uEntry);\n  });\n\n  _.forEach(g.outEdges(entry.v), function (edge) {\n    var weight = g.edge(edge);\n    var w = edge.w;\n    var wEntry = g.node(w);\n    wEntry['in'] -= weight;\n    assignBucket(buckets, zeroIdx, wEntry);\n  });\n\n  g.removeNode(entry.v);\n\n  return results;\n}\n\nfunction buildState(g, weightFn) {\n  var fasGraph = new Graph();\n  var maxIn = 0;\n  var maxOut = 0;\n\n  _.forEach(g.nodes(), function (v) {\n    fasGraph.setNode(v, { v: v, in: 0, out: 0 });\n  });\n\n  // Aggregate weights on nodes, but also sum the weights across multi-edges\n  // into a single edge for the fasGraph.\n  _.forEach(g.edges(), function (e) {\n    var prevWeight = fasGraph.edge(e.v, e.w) || 0;\n    var weight = weightFn(e);\n    var edgeWeight = prevWeight + weight;\n    fasGraph.setEdge(e.v, e.w, edgeWeight);\n    maxOut = Math.max(maxOut, (fasGraph.node(e.v).out += weight));\n    maxIn = Math.max(maxIn, (fasGraph.node(e.w)['in'] += weight));\n  });\n\n  var buckets = _.range(maxOut + maxIn + 3).map(function () {\n    return new List();\n  });\n  var zeroIdx = maxIn + 1;\n\n  _.forEach(fasGraph.nodes(), function (v) {\n    assignBucket(buckets, zeroIdx, fasGraph.node(v));\n  });\n\n  return { graph: fasGraph, buckets: buckets, zeroIdx: zeroIdx };\n}\n\nfunction assignBucket(buckets, zeroIdx, entry) {\n  if (!entry.out) {\n    buckets[0].enqueue(entry);\n  } else if (!entry['in']) {\n    buckets[buckets.length - 1].enqueue(entry);\n  } else {\n    buckets[entry.out - entry['in'] + zeroIdx].enqueue(entry);\n  }\n}\n","import * as _ from 'lodash-es';\nimport { greedyFAS } from './greedy-fas.js';\n\nexport { run, undo };\n\nfunction run(g) {\n  var fas = g.graph().acyclicer === 'greedy' ? greedyFAS(g, weightFn(g)) : dfsFAS(g);\n  _.forEach(fas, function (e) {\n    var label = g.edge(e);\n    g.removeEdge(e);\n    label.forwardName = e.name;\n    label.reversed = true;\n    g.setEdge(e.w, e.v, label, _.uniqueId('rev'));\n  });\n\n  function weightFn(g) {\n    return function (e) {\n      return g.edge(e).weight;\n    };\n  }\n}\n\nfunction dfsFAS(g) {\n  var fas = [];\n  var stack = {};\n  var visited = {};\n\n  function dfs(v) {\n    if (Object.prototype.hasOwnProperty.call(visited, v)) {\n      return;\n    }\n    visited[v] = true;\n    stack[v] = true;\n    _.forEach(g.outEdges(v), function (e) {\n      if (Object.prototype.hasOwnProperty.call(stack, e.w)) {\n        fas.push(e);\n      } else {\n        dfs(e.w);\n      }\n    });\n    delete stack[v];\n  }\n\n  _.forEach(g.nodes(), dfs);\n  return fas;\n}\n\nfunction undo(g) {\n  _.forEach(g.edges(), function (e) {\n    var label = g.edge(e);\n    if (label.reversed) {\n      g.removeEdge(e);\n\n      var forwardName = label.forwardName;\n      delete label.reversed;\n      delete label.forwardName;\n      g.setEdge(e.w, e.v, label, forwardName);\n    }\n  });\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../graphlib/index.js';\n\nexport {\n  addDummyNode,\n  simplify,\n  asNonCompoundGraph,\n  successorWeights,\n  predecessorWeights,\n  intersectRect,\n  buildLayerMatrix,\n  normalizeRanks,\n  removeEmptyRanks,\n  addBorderNode,\n  maxRank,\n  partition,\n  time,\n  notime,\n};\n\n/*\n * Adds a dummy node to the graph and return v.\n */\nfunction addDummyNode(g, type, attrs, name) {\n  var v;\n  do {\n    v = _.uniqueId(name);\n  } while (g.hasNode(v));\n\n  attrs.dummy = type;\n  g.setNode(v, attrs);\n  return v;\n}\n\n/*\n * Returns a new graph with only simple edges. Handles aggregation of data\n * associated with multi-edges.\n */\nfunction simplify(g) {\n  var simplified = new Graph().setGraph(g.graph());\n  _.forEach(g.nodes(), function (v) {\n    simplified.setNode(v, g.node(v));\n  });\n  _.forEach(g.edges(), function (e) {\n    var simpleLabel = simplified.edge(e.v, e.w) || { weight: 0, minlen: 1 };\n    var label = g.edge(e);\n    simplified.setEdge(e.v, e.w, {\n      weight: simpleLabel.weight + label.weight,\n      minlen: Math.max(simpleLabel.minlen, label.minlen),\n    });\n  });\n  return simplified;\n}\n\nfunction asNonCompoundGraph(g) {\n  var simplified = new Graph({ multigraph: g.isMultigraph() }).setGraph(g.graph());\n  _.forEach(g.nodes(), function (v) {\n    if (!g.children(v).length) {\n      simplified.setNode(v, g.node(v));\n    }\n  });\n  _.forEach(g.edges(), function (e) {\n    simplified.setEdge(e, g.edge(e));\n  });\n  return simplified;\n}\n\nfunction successorWeights(g) {\n  var weightMap = _.map(g.nodes(), function (v) {\n    var sucs = {};\n    _.forEach(g.outEdges(v), function (e) {\n      sucs[e.w] = (sucs[e.w] || 0) + g.edge(e).weight;\n    });\n    return sucs;\n  });\n  return _.zipObject(g.nodes(), weightMap);\n}\n\nfunction predecessorWeights(g) {\n  var weightMap = _.map(g.nodes(), function (v) {\n    var preds = {};\n    _.forEach(g.inEdges(v), function (e) {\n      preds[e.v] = (preds[e.v] || 0) + g.edge(e).weight;\n    });\n    return preds;\n  });\n  return _.zipObject(g.nodes(), weightMap);\n}\n\n/*\n * Finds where a line starting at point ({x, y}) would intersect a rectangle\n * ({x, y, width, height}) if it were pointing at the rectangle's center.\n */\nfunction intersectRect(rect, point) {\n  var x = rect.x;\n  var y = rect.y;\n\n  // Rectangle intersection algorithm from:\n  // http://math.stackexchange.com/questions/108113/find-edge-between-two-boxes\n  var dx = point.x - x;\n  var dy = point.y - y;\n  var w = rect.width / 2;\n  var h = rect.height / 2;\n\n  if (!dx && !dy) {\n    throw new Error('Not possible to find intersection inside of the rectangle');\n  }\n\n  var sx, sy;\n  if (Math.abs(dy) * w > Math.abs(dx) * h) {\n    // Intersection is top or bottom of rect.\n    if (dy < 0) {\n      h = -h;\n    }\n    sx = (h * dx) / dy;\n    sy = h;\n  } else {\n    // Intersection is left or right of rect.\n    if (dx < 0) {\n      w = -w;\n    }\n    sx = w;\n    sy = (w * dy) / dx;\n  }\n\n  return { x: x + sx, y: y + sy };\n}\n\n/*\n * Given a DAG with each node assigned \"rank\" and \"order\" properties, this\n * function will produce a matrix with the ids of each node.\n */\nfunction buildLayerMatrix(g) {\n  var layering = _.map(_.range(maxRank(g) + 1), function () {\n    return [];\n  });\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    var rank = node.rank;\n    if (!_.isUndefined(rank)) {\n      layering[rank][node.order] = v;\n    }\n  });\n  return layering;\n}\n\n/*\n * Adjusts the ranks for all nodes in the graph such that all nodes v have\n * rank(v) >= 0 and at least one node w has rank(w) = 0.\n */\nfunction normalizeRanks(g) {\n  var min = _.min(\n    _.map(g.nodes(), function (v) {\n      return g.node(v).rank;\n    }),\n  );\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    if (_.has(node, 'rank')) {\n      node.rank -= min;\n    }\n  });\n}\n\nfunction removeEmptyRanks(g) {\n  // Ranks may not start at 0, so we need to offset them\n  var offset = _.min(\n    _.map(g.nodes(), function (v) {\n      return g.node(v).rank;\n    }),\n  );\n\n  var layers = [];\n  _.forEach(g.nodes(), function (v) {\n    var rank = g.node(v).rank - offset;\n    if (!layers[rank]) {\n      layers[rank] = [];\n    }\n    layers[rank].push(v);\n  });\n\n  var delta = 0;\n  var nodeRankFactor = g.graph().nodeRankFactor;\n  _.forEach(layers, function (vs, i) {\n    if (_.isUndefined(vs) && i % nodeRankFactor !== 0) {\n      --delta;\n    } else if (delta) {\n      _.forEach(vs, function (v) {\n        g.node(v).rank += delta;\n      });\n    }\n  });\n}\n\nfunction addBorderNode(g, prefix, rank, order) {\n  var node = {\n    width: 0,\n    height: 0,\n  };\n  if (arguments.length >= 4) {\n    node.rank = rank;\n    node.order = order;\n  }\n  return addDummyNode(g, 'border', node, prefix);\n}\n\nfunction maxRank(g) {\n  return _.max(\n    _.map(g.nodes(), function (v) {\n      var rank = g.node(v).rank;\n      if (!_.isUndefined(rank)) {\n        return rank;\n      }\n    }),\n  );\n}\n\n/*\n * Partition a collection into two groups: `lhs` and `rhs`. If the supplied\n * function returns true for an entry it goes into `lhs`. Otherwise it goes\n * into `rhs.\n */\nfunction partition(collection, fn) {\n  var result = { lhs: [], rhs: [] };\n  _.forEach(collection, function (value) {\n    if (fn(value)) {\n      result.lhs.push(value);\n    } else {\n      result.rhs.push(value);\n    }\n  });\n  return result;\n}\n\n/*\n * Returns a new function that wraps `fn` with a timer. The wrapper logs the\n * time it takes to execute the function.\n */\nfunction time(name, fn) {\n  var start = _.now();\n  try {\n    return fn();\n  } finally {\n    console.log(name + ' time: ' + (_.now() - start) + 'ms');\n  }\n}\n\nfunction notime(name, fn) {\n  return fn();\n}\n","import * as _ from 'lodash-es';\nimport * as util from './util.js';\n\nexport { addBorderSegments };\n\nfunction addBorderSegments(g) {\n  function dfs(v) {\n    var children = g.children(v);\n    var node = g.node(v);\n    if (children.length) {\n      _.forEach(children, dfs);\n    }\n\n    if (Object.prototype.hasOwnProperty.call(node, 'minRank')) {\n      node.borderLeft = [];\n      node.borderRight = [];\n      for (var rank = node.minRank, maxRank = node.maxRank + 1; rank < maxRank; ++rank) {\n        addBorderNode(g, 'borderLeft', '_bl', v, node, rank);\n        addBorderNode(g, 'borderRight', '_br', v, node, rank);\n      }\n    }\n  }\n\n  _.forEach(g.children(), dfs);\n}\n\nfunction addBorderNode(g, prop, prefix, sg, sgNode, rank) {\n  var label = { width: 0, height: 0, rank: rank, borderType: prop };\n  var prev = sgNode[prop][rank - 1];\n  var curr = util.addDummyNode(g, 'border', label, prefix);\n  sgNode[prop][rank] = curr;\n  g.setParent(curr, sg);\n  if (prev) {\n    g.setEdge(prev, curr, { weight: 1 });\n  }\n}\n","import * as _ from 'lodash-es';\n\nexport { adjust, undo };\n\nfunction adjust(g) {\n  var rankDir = g.graph().rankdir.toLowerCase();\n  if (rankDir === 'lr' || rankDir === 'rl') {\n    swapWidthHeight(g);\n  }\n}\n\nfunction undo(g) {\n  var rankDir = g.graph().rankdir.toLowerCase();\n  if (rankDir === 'bt' || rankDir === 'rl') {\n    reverseY(g);\n  }\n\n  if (rankDir === 'lr' || rankDir === 'rl') {\n    swapXY(g);\n    swapWidthHeight(g);\n  }\n}\n\nfunction swapWidthHeight(g) {\n  _.forEach(g.nodes(), function (v) {\n    swapWidthHeightOne(g.node(v));\n  });\n  _.forEach(g.edges(), function (e) {\n    swapWidthHeightOne(g.edge(e));\n  });\n}\n\nfunction swapWidthHeightOne(attrs) {\n  var w = attrs.width;\n  attrs.width = attrs.height;\n  attrs.height = w;\n}\n\nfunction reverseY(g) {\n  _.forEach(g.nodes(), function (v) {\n    reverseYOne(g.node(v));\n  });\n\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    _.forEach(edge.points, reverseYOne);\n    if (Object.prototype.hasOwnProperty.call(edge, 'y')) {\n      reverseYOne(edge);\n    }\n  });\n}\n\nfunction reverseYOne(attrs) {\n  attrs.y = -attrs.y;\n}\n\nfunction swapXY(g) {\n  _.forEach(g.nodes(), function (v) {\n    swapXYOne(g.node(v));\n  });\n\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    _.forEach(edge.points, swapXYOne);\n    if (Object.prototype.hasOwnProperty.call(edge, 'x')) {\n      swapXYOne(edge);\n    }\n  });\n}\n\nfunction swapXYOne(attrs) {\n  var x = attrs.x;\n  attrs.x = attrs.y;\n  attrs.y = x;\n}\n","/**\n * TypeScript type imports:\n *\n * @import { Graph } from '../graphlib/graph.js';\n */\nimport * as _ from 'lodash-es';\nimport * as util from './util.js';\n\nexport { run, undo };\n\n/*\n * Breaks any long edges in the graph into short segments that span 1 layer\n * each. This operation is undoable with the denormalize function.\n *\n * Pre-conditions:\n *\n *    1. The input graph is a DAG.\n *    2. Each node in the graph has a \"rank\" property.\n *\n * Post-condition:\n *\n *    1. All edges in the graph have a length of 1.\n *    2. Dummy nodes are added where edges have been split into segments.\n *    3. The graph is augmented with a \"dummyChains\" attribute which contains\n *       the first dummy in each chain of dummy nodes produced.\n */\nfunction run(g) {\n  g.graph().dummyChains = [];\n  _.forEach(g.edges(), function (edge) {\n    normalizeEdge(g, edge);\n  });\n}\n\n/**\n * @param {Graph} g\n */\nfunction normalizeEdge(g, e) {\n  var v = e.v;\n  var vRank = g.node(v).rank;\n  var w = e.w;\n  var wRank = g.node(w).rank;\n  var name = e.name;\n  var edgeLabel = g.edge(e);\n  var labelRank = edgeLabel.labelRank;\n\n  if (wRank === vRank + 1) return;\n\n  g.removeEdge(e);\n\n  /**\n   * @typedef {Object} Attrs\n   * @property {number} width\n   * @property {number} height\n   * @property {ReturnType<Graph[\"node\"]>} edgeLabel\n   * @property {any} edgeObj\n   * @property {ReturnType<Graph[\"node\"]>[\"rank\"]} rank\n   * @property {string} [dummy]\n   * @property {ReturnType<Graph[\"node\"]>[\"labelpos\"]} [labelpos]\n   */\n\n  /** @type {Attrs | undefined} */\n  var attrs = undefined;\n  var dummy, i;\n  for (i = 0, ++vRank; vRank < wRank; ++i, ++vRank) {\n    edgeLabel.points = [];\n    attrs = {\n      width: 0,\n      height: 0,\n      edgeLabel: edgeLabel,\n      edgeObj: e,\n      rank: vRank,\n    };\n    dummy = util.addDummyNode(g, 'edge', attrs, '_d');\n    if (vRank === labelRank) {\n      attrs.width = edgeLabel.width;\n      attrs.height = edgeLabel.height;\n      attrs.dummy = 'edge-label';\n      attrs.labelpos = edgeLabel.labelpos;\n    }\n    g.setEdge(v, dummy, { weight: edgeLabel.weight }, name);\n    if (i === 0) {\n      g.graph().dummyChains.push(dummy);\n    }\n    v = dummy;\n  }\n\n  g.setEdge(v, w, { weight: edgeLabel.weight }, name);\n}\n\nfunction undo(g) {\n  _.forEach(g.graph().dummyChains, function (v) {\n    var node = g.node(v);\n    var origLabel = node.edgeLabel;\n    var w;\n    g.setEdge(node.edgeObj, origLabel);\n    while (node.dummy) {\n      w = g.successors(v)[0];\n      g.removeNode(v);\n      origLabel.points.push({ x: node.x, y: node.y });\n      if (node.dummy === 'edge-label') {\n        origLabel.x = node.x;\n        origLabel.y = node.y;\n        origLabel.width = node.width;\n        origLabel.height = node.height;\n      }\n      v = w;\n      node = g.node(v);\n    }\n  });\n}\n","import * as _ from 'lodash-es';\n\nexport { longestPath, slack };\n\n/*\n * Initializes ranks for the input graph using the longest path algorithm. This\n * algorithm scales well and is fast in practice, it yields rather poor\n * solutions. Nodes are pushed to the lowest layer possible, leaving the bottom\n * ranks wide and leaving edges longer than necessary. However, due to its\n * speed, this algorithm is good for getting an initial ranking that can be fed\n * into other algorithms.\n *\n * This algorithm does not normalize layers because it will be used by other\n * algorithms in most cases. If using this algorithm directly, be sure to\n * run normalize at the end.\n *\n * Pre-conditions:\n *\n *    1. Input graph is a DAG.\n *    2. Input graph node labels can be assigned properties.\n *\n * Post-conditions:\n *\n *    1. Each node will be assign an (unnormalized) \"rank\" property.\n */\nfunction longestPath(g) {\n  var visited = {};\n\n  function dfs(v) {\n    var label = g.node(v);\n    if (Object.prototype.hasOwnProperty.call(visited, v)) {\n      return label.rank;\n    }\n    visited[v] = true;\n\n    var rank = _.min(\n      _.map(g.outEdges(v), function (e) {\n        return dfs(e.w) - g.edge(e).minlen;\n      }),\n    );\n\n    if (\n      rank === Number.POSITIVE_INFINITY || // return value of _.map([]) for Lodash 3\n      rank === undefined || // return value of _.map([]) for Lodash 4\n      rank === null\n    ) {\n      // return value of _.map([null])\n      rank = 0;\n    }\n\n    return (label.rank = rank);\n  }\n\n  _.forEach(g.sources(), dfs);\n}\n\n/*\n * Returns the amount of slack for the given edge. The slack is defined as the\n * difference between the length of the edge and its minimum length.\n */\nfunction slack(g, e) {\n  return g.node(e.w).rank - g.node(e.v).rank - g.edge(e).minlen;\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../../graphlib/index.js';\nimport { slack } from './util.js';\n\nexport { feasibleTree };\n\n/*\n * Constructs a spanning tree with tight edges and adjusted the input node's\n * ranks to achieve this. A tight edge is one that is has a length that matches\n * its \"minlen\" attribute.\n *\n * The basic structure for this function is derived from Gansner, et al., \"A\n * Technique for Drawing Directed Graphs.\"\n *\n * Pre-conditions:\n *\n *    1. Graph must be a DAG.\n *    2. Graph must be connected.\n *    3. Graph must have at least one node.\n *    5. Graph nodes must have been previously assigned a \"rank\" property that\n *       respects the \"minlen\" property of incident edges.\n *    6. Graph edges must have a \"minlen\" property.\n *\n * Post-conditions:\n *\n *    - Graph nodes will have their rank adjusted to ensure that all edges are\n *      tight.\n *\n * Returns a tree (undirected graph) that is constructed using only \"tight\"\n * edges.\n */\nfunction feasibleTree(g) {\n  var t = new Graph({ directed: false });\n\n  // Choose arbitrary node from which to start our tree\n  var start = g.nodes()[0];\n  var size = g.nodeCount();\n  t.setNode(start, {});\n\n  var edge, delta;\n  while (tightTree(t, g) < size) {\n    edge = findMinSlackEdge(t, g);\n    delta = t.hasNode(edge.v) ? slack(g, edge) : -slack(g, edge);\n    shiftRanks(t, g, delta);\n  }\n\n  return t;\n}\n\n/*\n * Finds a maximal tree of tight edges and returns the number of nodes in the\n * tree.\n */\nfunction tightTree(t, g) {\n  function dfs(v) {\n    _.forEach(g.nodeEdges(v), function (e) {\n      var edgeV = e.v,\n        w = v === edgeV ? e.w : edgeV;\n      if (!t.hasNode(w) && !slack(g, e)) {\n        t.setNode(w, {});\n        t.setEdge(v, w, {});\n        dfs(w);\n      }\n    });\n  }\n\n  _.forEach(t.nodes(), dfs);\n  return t.nodeCount();\n}\n\n/*\n * Finds the edge with the smallest slack that is incident on tree and returns\n * it.\n */\nfunction findMinSlackEdge(t, g) {\n  return _.minBy(g.edges(), function (e) {\n    if (t.hasNode(e.v) !== t.hasNode(e.w)) {\n      return slack(g, e);\n    }\n  });\n}\n\nfunction shiftRanks(t, g, delta) {\n  _.forEach(t.nodes(), function (v) {\n    g.node(v).rank += delta;\n  });\n}\n","import * as _ from 'lodash-es';\n\nexport { dfs };\n\n/*\n * A helper that preforms a pre- or post-order traversal on the input graph\n * and returns the nodes in the order they were visited. If the graph is\n * undirected then this algorithm will navigate using neighbors. If the graph\n * is directed then this algorithm will navigate using successors.\n *\n * Order must be one of \"pre\" or \"post\".\n */\nfunction dfs(g, vs, order) {\n  if (!_.isArray(vs)) {\n    vs = [vs];\n  }\n\n  var navigation = (g.isDirected() ? g.successors : g.neighbors).bind(g);\n\n  var acc = [];\n  var visited = {};\n  _.each(vs, function (v) {\n    if (!g.hasNode(v)) {\n      throw new Error('Graph does not have node: ' + v);\n    }\n\n    doDfs(g, v, order === 'post', visited, navigation, acc);\n  });\n  return acc;\n}\n\nfunction doDfs(g, v, postorder, visited, navigation, acc) {\n  if (!Object.prototype.hasOwnProperty.call(visited, v)) {\n    visited[v] = true;\n\n    if (!postorder) {\n      acc.push(v);\n    }\n    _.each(navigation(v), function (w) {\n      doDfs(g, w, postorder, visited, navigation, acc);\n    });\n    if (postorder) {\n      acc.push(v);\n    }\n  }\n}\n","import * as _ from 'lodash-es';\nimport * as alg from '../../graphlib/alg/index.js';\nimport { simplify } from '../util.js';\nimport { feasibleTree } from './feasible-tree.js';\nimport { longestPath, slack } from './util.js';\n\nexport { networkSimplex };\n\n// Expose some internals for testing purposes\nnetworkSimplex.initLowLimValues = initLowLimValues;\nnetworkSimplex.initCutValues = initCutValues;\nnetworkSimplex.calcCutValue = calcCutValue;\nnetworkSimplex.leaveEdge = leaveEdge;\nnetworkSimplex.enterEdge = enterEdge;\nnetworkSimplex.exchangeEdges = exchangeEdges;\n\n/*\n * The network simplex algorithm assigns ranks to each node in the input graph\n * and iteratively improves the ranking to reduce the length of edges.\n *\n * Preconditions:\n *\n *    1. The input graph must be a DAG.\n *    2. All nodes in the graph must have an object value.\n *    3. All edges in the graph must have \"minlen\" and \"weight\" attributes.\n *\n * Postconditions:\n *\n *    1. All nodes in the graph will have an assigned \"rank\" attribute that has\n *       been optimized by the network simplex algorithm. Ranks start at 0.\n *\n *\n * A rough sketch of the algorithm is as follows:\n *\n *    1. Assign initial ranks to each node. We use the longest path algorithm,\n *       which assigns ranks to the lowest position possible. In general this\n *       leads to very wide bottom ranks and unnecessarily long edges.\n *    2. Construct a feasible tight tree. A tight tree is one such that all\n *       edges in the tree have no slack (difference between length of edge\n *       and minlen for the edge). This by itself greatly improves the assigned\n *       rankings by shorting edges.\n *    3. Iteratively find edges that have negative cut values. Generally a\n *       negative cut value indicates that the edge could be removed and a new\n *       tree edge could be added to produce a more compact graph.\n *\n * Much of the algorithms here are derived from Gansner, et al., \"A Technique\n * for Drawing Directed Graphs.\" The structure of the file roughly follows the\n * structure of the overall algorithm.\n */\nfunction networkSimplex(g) {\n  g = simplify(g);\n  longestPath(g);\n  var t = feasibleTree(g);\n  initLowLimValues(t);\n  initCutValues(t, g);\n\n  var e, f;\n  while ((e = leaveEdge(t))) {\n    f = enterEdge(t, g, e);\n    exchangeEdges(t, g, e, f);\n  }\n}\n\n/*\n * Initializes cut values for all edges in the tree.\n */\nfunction initCutValues(t, g) {\n  var vs = alg.postorder(t, t.nodes());\n  vs = vs.slice(0, vs.length - 1);\n  _.forEach(vs, function (v) {\n    assignCutValue(t, g, v);\n  });\n}\n\nfunction assignCutValue(t, g, child) {\n  var childLab = t.node(child);\n  var parent = childLab.parent;\n  t.edge(child, parent).cutvalue = calcCutValue(t, g, child);\n}\n\n/*\n * Given the tight tree, its graph, and a child in the graph calculate and\n * return the cut value for the edge between the child and its parent.\n */\nfunction calcCutValue(t, g, child) {\n  var childLab = t.node(child);\n  var parent = childLab.parent;\n  // True if the child is on the tail end of the edge in the directed graph\n  var childIsTail = true;\n  // The graph's view of the tree edge we're inspecting\n  var graphEdge = g.edge(child, parent);\n  // The accumulated cut value for the edge between this node and its parent\n  var cutValue = 0;\n\n  if (!graphEdge) {\n    childIsTail = false;\n    graphEdge = g.edge(parent, child);\n  }\n\n  cutValue = graphEdge.weight;\n\n  _.forEach(g.nodeEdges(child), function (e) {\n    var isOutEdge = e.v === child,\n      other = isOutEdge ? e.w : e.v;\n\n    if (other !== parent) {\n      var pointsToHead = isOutEdge === childIsTail,\n        otherWeight = g.edge(e).weight;\n\n      cutValue += pointsToHead ? otherWeight : -otherWeight;\n      if (isTreeEdge(t, child, other)) {\n        var otherCutValue = t.edge(child, other).cutvalue;\n        cutValue += pointsToHead ? -otherCutValue : otherCutValue;\n      }\n    }\n  });\n\n  return cutValue;\n}\n\nfunction initLowLimValues(tree, root) {\n  if (arguments.length < 2) {\n    root = tree.nodes()[0];\n  }\n  dfsAssignLowLim(tree, {}, 1, root);\n}\n\nfunction dfsAssignLowLim(tree, visited, nextLim, v, parent) {\n  var low = nextLim;\n  var label = tree.node(v);\n\n  visited[v] = true;\n  _.forEach(tree.neighbors(v), function (w) {\n    if (!Object.prototype.hasOwnProperty.call(visited, w)) {\n      nextLim = dfsAssignLowLim(tree, visited, nextLim, w, v);\n    }\n  });\n\n  label.low = low;\n  label.lim = nextLim++;\n  if (parent) {\n    label.parent = parent;\n  } else {\n    // TODO should be able to remove this when we incrementally update low lim\n    delete label.parent;\n  }\n\n  return nextLim;\n}\n\nfunction leaveEdge(tree) {\n  return _.find(tree.edges(), function (e) {\n    return tree.edge(e).cutvalue < 0;\n  });\n}\n\nfunction enterEdge(t, g, edge) {\n  var v = edge.v;\n  var w = edge.w;\n\n  // For the rest of this function we assume that v is the tail and w is the\n  // head, so if we don't have this edge in the graph we should flip it to\n  // match the correct orientation.\n  if (!g.hasEdge(v, w)) {\n    v = edge.w;\n    w = edge.v;\n  }\n\n  var vLabel = t.node(v);\n  var wLabel = t.node(w);\n  var tailLabel = vLabel;\n  var flip = false;\n\n  // If the root is in the tail of the edge then we need to flip the logic that\n  // checks for the head and tail nodes in the candidates function below.\n  if (vLabel.lim > wLabel.lim) {\n    tailLabel = wLabel;\n    flip = true;\n  }\n\n  var candidates = _.filter(g.edges(), function (edge) {\n    return (\n      flip === isDescendant(t, t.node(edge.v), tailLabel) &&\n      flip !== isDescendant(t, t.node(edge.w), tailLabel)\n    );\n  });\n\n  return _.minBy(candidates, function (edge) {\n    return slack(g, edge);\n  });\n}\n\nfunction exchangeEdges(t, g, e, f) {\n  var v = e.v;\n  var w = e.w;\n  t.removeEdge(v, w);\n  t.setEdge(f.v, f.w, {});\n  initLowLimValues(t);\n  initCutValues(t, g);\n  updateRanks(t, g);\n}\n\nfunction updateRanks(t, g) {\n  var root = _.find(t.nodes(), function (v) {\n    return !g.node(v).parent;\n  });\n  var vs = alg.preorder(t, root);\n  vs = vs.slice(1);\n  _.forEach(vs, function (v) {\n    var parent = t.node(v).parent,\n      edge = g.edge(v, parent),\n      flipped = false;\n\n    if (!edge) {\n      edge = g.edge(parent, v);\n      flipped = true;\n    }\n\n    g.node(v).rank = g.node(parent).rank + (flipped ? edge.minlen : -edge.minlen);\n  });\n}\n\n/*\n * Returns true if the edge is in the tree.\n */\nfunction isTreeEdge(tree, u, v) {\n  return tree.hasEdge(u, v);\n}\n\n/*\n * Returns true if the specified node is descendant of the root node per the\n * assigned low and lim attributes in the tree.\n */\nfunction isDescendant(tree, vLabel, rootLabel) {\n  return rootLabel.low <= vLabel.lim && vLabel.lim <= rootLabel.lim;\n}\n","import { dfs } from './dfs.js';\n\nexport { postorder };\n\nfunction postorder(g, vs) {\n  return dfs(g, vs, 'post');\n}\n","import { dfs } from './dfs.js';\n\nexport { preorder };\n\nfunction preorder(g, vs) {\n  return dfs(g, vs, 'pre');\n}\n","import { feasibleTree } from './feasible-tree.js';\nimport { networkSimplex } from './network-simplex.js';\nimport { longestPath } from './util.js';\n\nexport { rank };\n\n/*\n * Assigns a rank to each node in the input graph that respects the \"minlen\"\n * constraint specified on edges between nodes.\n *\n * This basic structure is derived from Gansner, et al., \"A Technique for\n * Drawing Directed Graphs.\"\n *\n * Pre-conditions:\n *\n *    1. Graph must be a connected DAG\n *    2. Graph nodes must be objects\n *    3. Graph edges must have \"weight\" and \"minlen\" attributes\n *\n * Post-conditions:\n *\n *    1. Graph nodes will have a \"rank\" attribute based on the results of the\n *       algorithm. Ranks can start at any index (including negative), we'll\n *       fix them up later.\n */\nfunction rank(g) {\n  switch (g.graph().ranker) {\n    case 'network-simplex':\n      networkSimplexRanker(g);\n      break;\n    case 'tight-tree':\n      tightTreeRanker(g);\n      break;\n    case 'longest-path':\n      longestPathRanker(g);\n      break;\n    default:\n      networkSimplexRanker(g);\n  }\n}\n\n// A fast and simple ranker, but results are far from optimal.\nvar longestPathRanker = longestPath;\n\nfunction tightTreeRanker(g) {\n  longestPath(g);\n  feasibleTree(g);\n}\n\nfunction networkSimplexRanker(g) {\n  networkSimplex(g);\n}\n","import * as _ from 'lodash-es';\n\nexport { topsort, CycleException };\n\ntopsort.CycleException = CycleException;\n\nfunction topsort(g) {\n  var visited = {};\n  var stack = {};\n  var results = [];\n\n  function visit(node) {\n    if (Object.prototype.hasOwnProperty.call(stack, node)) {\n      throw new CycleException();\n    }\n\n    if (!Object.prototype.hasOwnProperty.call(visited, node)) {\n      stack[node] = true;\n      visited[node] = true;\n      _.each(g.predecessors(node), visit);\n      delete stack[node];\n      results.push(node);\n    }\n  }\n\n  _.each(g.sinks(), visit);\n\n  if (_.size(visited) !== g.nodeCount()) {\n    throw new CycleException();\n  }\n\n  return results;\n}\n\nfunction CycleException() {}\nCycleException.prototype = new Error(); // must be an instance of Error to pass testing\n","import * as _ from 'lodash-es';\nimport * as util from './util.js';\n\nexport { run, cleanup };\n\n/*\n * A nesting graph creates dummy nodes for the tops and bottoms of subgraphs,\n * adds appropriate edges to ensure that all cluster nodes are placed between\n * these boundries, and ensures that the graph is connected.\n *\n * In addition we ensure, through the use of the minlen property, that nodes\n * and subgraph border nodes to not end up on the same rank.\n *\n * Preconditions:\n *\n *    1. Input graph is a DAG\n *    2. Nodes in the input graph has a minlen attribute\n *\n * Postconditions:\n *\n *    1. Input graph is connected.\n *    2. Dummy nodes are added for the tops and bottoms of subgraphs.\n *    3. The minlen attribute for nodes is adjusted to ensure nodes do not\n *       get placed on the same rank as subgraph border nodes.\n *\n * The nesting graph idea comes from Sander, \"Layout of Compound Directed\n * Graphs.\"\n */\nfunction run(g) {\n  var root = util.addDummyNode(g, 'root', {}, '_root');\n  var depths = treeDepths(g);\n  var height = _.max(_.values(depths)) - 1; // Note: depths is an Object not an array\n  var nodeSep = 2 * height + 1;\n\n  g.graph().nestingRoot = root;\n\n  // Multiply minlen by nodeSep to align nodes on non-border ranks.\n  _.forEach(g.edges(), function (e) {\n    g.edge(e).minlen *= nodeSep;\n  });\n\n  // Calculate a weight that is sufficient to keep subgraphs vertically compact\n  var weight = sumWeights(g) + 1;\n\n  // Create border nodes and link them up\n  _.forEach(g.children(), function (child) {\n    dfs(g, root, nodeSep, weight, height, depths, child);\n  });\n\n  // Save the multiplier for node layers for later removal of empty border\n  // layers.\n  g.graph().nodeRankFactor = nodeSep;\n}\n\nfunction dfs(g, root, nodeSep, weight, height, depths, v) {\n  var children = g.children(v);\n  if (!children.length) {\n    if (v !== root) {\n      g.setEdge(root, v, { weight: 0, minlen: nodeSep });\n    }\n    return;\n  }\n\n  var top = util.addBorderNode(g, '_bt');\n  var bottom = util.addBorderNode(g, '_bb');\n  var label = g.node(v);\n\n  g.setParent(top, v);\n  label.borderTop = top;\n  g.setParent(bottom, v);\n  label.borderBottom = bottom;\n\n  _.forEach(children, function (child) {\n    dfs(g, root, nodeSep, weight, height, depths, child);\n\n    var childNode = g.node(child);\n    var childTop = childNode.borderTop ? childNode.borderTop : child;\n    var childBottom = childNode.borderBottom ? childNode.borderBottom : child;\n    var thisWeight = childNode.borderTop ? weight : 2 * weight;\n    var minlen = childTop !== childBottom ? 1 : height - depths[v] + 1;\n\n    g.setEdge(top, childTop, {\n      weight: thisWeight,\n      minlen: minlen,\n      nestingEdge: true,\n    });\n\n    g.setEdge(childBottom, bottom, {\n      weight: thisWeight,\n      minlen: minlen,\n      nestingEdge: true,\n    });\n  });\n\n  if (!g.parent(v)) {\n    g.setEdge(root, top, { weight: 0, minlen: height + depths[v] });\n  }\n}\n\nfunction treeDepths(g) {\n  var depths = {};\n  function dfs(v, depth) {\n    var children = g.children(v);\n    if (children && children.length) {\n      _.forEach(children, function (child) {\n        dfs(child, depth + 1);\n      });\n    }\n    depths[v] = depth;\n  }\n  _.forEach(g.children(), function (v) {\n    dfs(v, 1);\n  });\n  return depths;\n}\n\nfunction sumWeights(g) {\n  return _.reduce(\n    g.edges(),\n    function (acc, e) {\n      return acc + g.edge(e).weight;\n    },\n    0,\n  );\n}\n\nfunction cleanup(g) {\n  var graphLabel = g.graph();\n  g.removeNode(graphLabel.nestingRoot);\n  delete graphLabel.nestingRoot;\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    if (edge.nestingEdge) {\n      g.removeEdge(e);\n    }\n  });\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../../graphlib/index.js';\n\nexport { buildLayerGraph };\n\n/*\n * Constructs a graph that can be used to sort a layer of nodes. The graph will\n * contain all base and subgraph nodes from the request layer in their original\n * hierarchy and any edges that are incident on these nodes and are of the type\n * requested by the \"relationship\" parameter.\n *\n * Nodes from the requested rank that do not have parents are assigned a root\n * node in the output graph, which is set in the root graph attribute. This\n * makes it easy to walk the hierarchy of movable nodes during ordering.\n *\n * Pre-conditions:\n *\n *    1. Input graph is a DAG\n *    2. Base nodes in the input graph have a rank attribute\n *    3. Subgraph nodes in the input graph has minRank and maxRank attributes\n *    4. Edges have an assigned weight\n *\n * Post-conditions:\n *\n *    1. Output graph has all nodes in the movable rank with preserved\n *       hierarchy.\n *    2. Root nodes in the movable layer are made children of the node\n *       indicated by the root attribute of the graph.\n *    3. Non-movable nodes incident on movable nodes, selected by the\n *       relationship parameter, are included in the graph (without hierarchy).\n *    4. Edges incident on movable nodes, selected by the relationship\n *       parameter, are added to the output graph.\n *    5. The weights for copied edges are aggregated as need, since the output\n *       graph is not a multi-graph.\n */\nfunction buildLayerGraph(g, rank, relationship) {\n  var root = createRootNode(g),\n    result = new Graph({ compound: true })\n      .setGraph({ root: root })\n      .setDefaultNodeLabel(function (v) {\n        return g.node(v);\n      });\n\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v),\n      parent = g.parent(v);\n\n    if (node.rank === rank || (node.minRank <= rank && rank <= node.maxRank)) {\n      result.setNode(v);\n      result.setParent(v, parent || root);\n\n      // This assumes we have only short edges!\n      _.forEach(g[relationship](v), function (e) {\n        var u = e.v === v ? e.w : e.v,\n          edge = result.edge(u, v),\n          weight = !_.isUndefined(edge) ? edge.weight : 0;\n        result.setEdge(u, v, { weight: g.edge(e).weight + weight });\n      });\n\n      if (Object.prototype.hasOwnProperty.call(node, 'minRank')) {\n        result.setNode(v, {\n          borderLeft: node.borderLeft[rank],\n          borderRight: node.borderRight[rank],\n        });\n      }\n    }\n  });\n\n  return result;\n}\n\nfunction createRootNode(g) {\n  var v;\n  while (g.hasNode((v = _.uniqueId('_root'))));\n  return v;\n}\n","import * as _ from 'lodash-es';\n\nexport { crossCount };\n\n/*\n * A function that takes a layering (an array of layers, each with an array of\n * ordererd nodes) and a graph and returns a weighted crossing count.\n *\n * Pre-conditions:\n *\n *    1. Input graph must be simple (not a multigraph), directed, and include\n *       only simple edges.\n *    2. Edges in the input graph must have assigned weights.\n *\n * Post-conditions:\n *\n *    1. The graph and layering matrix are left unchanged.\n *\n * This algorithm is derived from Barth, et al., \"Bilayer Cross Counting.\"\n */\nfunction crossCount(g, layering) {\n  var cc = 0;\n  for (var i = 1; i < layering.length; ++i) {\n    cc += twoLayerCrossCount(g, layering[i - 1], layering[i]);\n  }\n  return cc;\n}\n\nfunction twoLayerCrossCount(g, northLayer, southLayer) {\n  // Sort all of the edges between the north and south layers by their position\n  // in the north layer and then the south. Map these edges to the position of\n  // their head in the south layer.\n  var southPos = _.zipObject(\n    southLayer,\n    _.map(southLayer, function (v, i) {\n      return i;\n    }),\n  );\n  var southEntries = _.flatten(\n    _.map(northLayer, function (v) {\n      return _.sortBy(\n        _.map(g.outEdges(v), function (e) {\n          return { pos: southPos[e.w], weight: g.edge(e).weight };\n        }),\n        'pos',\n      );\n    }),\n  );\n\n  // Build the accumulator tree\n  var firstIndex = 1;\n  while (firstIndex < southLayer.length) firstIndex <<= 1;\n  var treeSize = 2 * firstIndex - 1;\n  firstIndex -= 1;\n  var tree = _.map(new Array(treeSize), function () {\n    return 0;\n  });\n\n  // Calculate the weighted crossings\n  var cc = 0;\n  _.forEach(\n    // @ts-expect-error\n    southEntries.forEach(function (entry) {\n      var index = entry.pos + firstIndex;\n      tree[index] += entry.weight;\n      var weightSum = 0;\n      // @ts-expect-error\n      while (index > 0) {\n        // @ts-expect-error\n        if (index % 2) {\n          weightSum += tree[index + 1];\n        }\n        // @ts-expect-error\n        index = (index - 1) >> 1;\n        tree[index] += entry.weight;\n      }\n      cc += entry.weight * weightSum;\n    }),\n  );\n\n  return cc;\n}\n","import assignValue from './_assignValue.js';\nimport baseZipObject from './_baseZipObject.js';\n\n/**\n * This method is like `_.fromPairs` except that it accepts two arrays,\n * one of property identifiers and one of corresponding values.\n *\n * @static\n * @memberOf _\n * @since 0.4.0\n * @category Array\n * @param {Array} [props=[]] The property identifiers.\n * @param {Array} [values=[]] The property values.\n * @returns {Object} Returns the new object.\n * @example\n *\n * _.zipObject(['a', 'b'], [1, 2]);\n * // => { 'a': 1, 'b': 2 }\n */\nfunction zipObject(props, values) {\n  return baseZipObject(props || [], values || [], assignValue);\n}\n\nexport default zipObject;\n","/**\n * This base implementation of `_.zipObject` which assigns values using `assignFunc`.\n *\n * @private\n * @param {Array} props The property identifiers.\n * @param {Array} values The property values.\n * @param {Function} assignFunc The function to assign values.\n * @returns {Object} Returns the new object.\n */\nfunction baseZipObject(props, values, assignFunc) {\n  var index = -1,\n      length = props.length,\n      valsLength = values.length,\n      result = {};\n\n  while (++index < length) {\n    var value = index < valsLength ? values[index] : undefined;\n    assignFunc(result, props[index], value);\n  }\n  return result;\n}\n\nexport default baseZipObject;\n","import * as _ from 'lodash-es';\n\nexport { resolveConflicts };\n\n/*\n * Given a list of entries of the form {v, barycenter, weight} and a\n * constraint graph this function will resolve any conflicts between the\n * constraint graph and the barycenters for the entries. If the barycenters for\n * an entry would violate a constraint in the constraint graph then we coalesce\n * the nodes in the conflict into a new node that respects the contraint and\n * aggregates barycenter and weight information.\n *\n * This implementation is based on the description in Forster, \"A Fast and\n * Simple Hueristic for Constrained Two-Level Crossing Reduction,\" thought it\n * differs in some specific details.\n *\n * Pre-conditions:\n *\n *    1. Each entry has the form {v, barycenter, weight}, or if the node has\n *       no barycenter, then {v}.\n *\n * Returns:\n *\n *    A new list of entries of the form {vs, i, barycenter, weight}. The list\n *    `vs` may either be a singleton or it may be an aggregation of nodes\n *    ordered such that they do not violate constraints from the constraint\n *    graph. The property `i` is the lowest original index of any of the\n *    elements in `vs`.\n */\nfunction resolveConflicts(entries, cg) {\n  var mappedEntries = {};\n  _.forEach(entries, function (entry, i) {\n    var tmp = (mappedEntries[entry.v] = {\n      indegree: 0,\n      in: [],\n      out: [],\n      vs: [entry.v],\n      i: i,\n    });\n    if (!_.isUndefined(entry.barycenter)) {\n      // @ts-expect-error\n      tmp.barycenter = entry.barycenter;\n      // @ts-expect-error\n      tmp.weight = entry.weight;\n    }\n  });\n\n  _.forEach(cg.edges(), function (e) {\n    var entryV = mappedEntries[e.v];\n    var entryW = mappedEntries[e.w];\n    if (!_.isUndefined(entryV) && !_.isUndefined(entryW)) {\n      entryW.indegree++;\n      entryV.out.push(mappedEntries[e.w]);\n    }\n  });\n\n  var sourceSet = _.filter(mappedEntries, function (entry) {\n    // @ts-expect-error\n    return !entry.indegree;\n  });\n\n  return doResolveConflicts(sourceSet);\n}\n\nfunction doResolveConflicts(sourceSet) {\n  var entries = [];\n\n  function handleIn(vEntry) {\n    return function (uEntry) {\n      if (uEntry.merged) {\n        return;\n      }\n      if (\n        _.isUndefined(uEntry.barycenter) ||\n        _.isUndefined(vEntry.barycenter) ||\n        uEntry.barycenter >= vEntry.barycenter\n      ) {\n        mergeEntries(vEntry, uEntry);\n      }\n    };\n  }\n\n  function handleOut(vEntry) {\n    return function (wEntry) {\n      wEntry['in'].push(vEntry);\n      if (--wEntry.indegree === 0) {\n        sourceSet.push(wEntry);\n      }\n    };\n  }\n\n  while (sourceSet.length) {\n    var entry = sourceSet.pop();\n    entries.push(entry);\n    _.forEach(entry['in'].reverse(), handleIn(entry));\n    _.forEach(entry.out, handleOut(entry));\n  }\n\n  return _.map(\n    _.filter(entries, function (entry) {\n      return !entry.merged;\n    }),\n    function (entry) {\n      return _.pick(entry, ['vs', 'i', 'barycenter', 'weight']);\n    },\n  );\n}\n\nfunction mergeEntries(target, source) {\n  var sum = 0;\n  var weight = 0;\n\n  if (target.weight) {\n    sum += target.barycenter * target.weight;\n    weight += target.weight;\n  }\n\n  if (source.weight) {\n    sum += source.barycenter * source.weight;\n    weight += source.weight;\n  }\n\n  target.vs = source.vs.concat(target.vs);\n  target.barycenter = sum / weight;\n  target.weight = weight;\n  target.i = Math.min(source.i, target.i);\n  source.merged = true;\n}\n","import * as _ from 'lodash-es';\nimport * as util from '../util.js';\n\nexport { sort };\n\nfunction sort(entries, biasRight) {\n  var parts = util.partition(entries, function (entry) {\n    return Object.prototype.hasOwnProperty.call(entry, 'barycenter');\n  });\n  var sortable = parts.lhs,\n    unsortable = _.sortBy(parts.rhs, function (entry) {\n      return -entry.i;\n    }),\n    vs = [],\n    sum = 0,\n    weight = 0,\n    vsIndex = 0;\n\n  sortable.sort(compareWithBias(!!biasRight));\n\n  vsIndex = consumeUnsortable(vs, unsortable, vsIndex);\n\n  _.forEach(sortable, function (entry) {\n    vsIndex += entry.vs.length;\n    vs.push(entry.vs);\n    sum += entry.barycenter * entry.weight;\n    weight += entry.weight;\n    vsIndex = consumeUnsortable(vs, unsortable, vsIndex);\n  });\n\n  var result = { vs: _.flatten(vs) };\n  if (weight) {\n    result.barycenter = sum / weight;\n    result.weight = weight;\n  }\n  return result;\n}\n\nfunction consumeUnsortable(vs, unsortable, index) {\n  var last;\n  while (unsortable.length && (last = _.last(unsortable)).i <= index) {\n    unsortable.pop();\n    vs.push(last.vs);\n    index++;\n  }\n  return index;\n}\n\nfunction compareWithBias(bias) {\n  return function (entryV, entryW) {\n    if (entryV.barycenter < entryW.barycenter) {\n      return -1;\n    } else if (entryV.barycenter > entryW.barycenter) {\n      return 1;\n    }\n\n    return !bias ? entryV.i - entryW.i : entryW.i - entryV.i;\n  };\n}\n","import * as _ from 'lodash-es';\nimport { barycenter } from './barycenter.js';\nimport { resolveConflicts } from './resolve-conflicts.js';\nimport { sort } from './sort.js';\n\nexport { sortSubgraph };\n\nfunction sortSubgraph(g, v, cg, biasRight) {\n  var movable = g.children(v);\n  var node = g.node(v);\n  var bl = node ? node.borderLeft : undefined;\n  var br = node ? node.borderRight : undefined;\n  var subgraphs = {};\n\n  if (bl) {\n    movable = _.filter(movable, function (w) {\n      return w !== bl && w !== br;\n    });\n  }\n\n  var barycenters = barycenter(g, movable);\n  _.forEach(barycenters, function (entry) {\n    if (g.children(entry.v).length) {\n      var subgraphResult = sortSubgraph(g, entry.v, cg, biasRight);\n      subgraphs[entry.v] = subgraphResult;\n      if (Object.prototype.hasOwnProperty.call(subgraphResult, 'barycenter')) {\n        mergeBarycenters(entry, subgraphResult);\n      }\n    }\n  });\n\n  var entries = resolveConflicts(barycenters, cg);\n  expandSubgraphs(entries, subgraphs);\n\n  var result = sort(entries, biasRight);\n\n  if (bl) {\n    result.vs = _.flatten([bl, result.vs, br]);\n    if (g.predecessors(bl).length) {\n      var blPred = g.node(g.predecessors(bl)[0]),\n        brPred = g.node(g.predecessors(br)[0]);\n      if (!Object.prototype.hasOwnProperty.call(result, 'barycenter')) {\n        result.barycenter = 0;\n        result.weight = 0;\n      }\n      result.barycenter =\n        (result.barycenter * result.weight + blPred.order + brPred.order) / (result.weight + 2);\n      result.weight += 2;\n    }\n  }\n\n  return result;\n}\n\nfunction expandSubgraphs(entries, subgraphs) {\n  _.forEach(entries, function (entry) {\n    entry.vs = _.flatten(\n      entry.vs.map(function (v) {\n        if (subgraphs[v]) {\n          return subgraphs[v].vs;\n        }\n        return v;\n      }),\n    );\n  });\n}\n\nfunction mergeBarycenters(target, other) {\n  if (!_.isUndefined(target.barycenter)) {\n    target.barycenter =\n      (target.barycenter * target.weight + other.barycenter * other.weight) /\n      (target.weight + other.weight);\n    target.weight += other.weight;\n  } else {\n    target.barycenter = other.barycenter;\n    target.weight = other.weight;\n  }\n}\n","import * as _ from 'lodash-es';\n\nexport { barycenter };\n\nfunction barycenter(g, movable) {\n  return _.map(movable, function (v) {\n    var inV = g.inEdges(v);\n    if (!inV.length) {\n      return { v: v };\n    } else {\n      var result = _.reduce(\n        inV,\n        function (acc, e) {\n          var edge = g.edge(e),\n            nodeU = g.node(e.v);\n          return {\n            sum: acc.sum + edge.weight * nodeU.order,\n            weight: acc.weight + edge.weight,\n          };\n        },\n        { sum: 0, weight: 0 },\n      );\n\n      return {\n        v: v,\n        barycenter: result.sum / result.weight,\n        weight: result.weight,\n      };\n    }\n  });\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../../graphlib/index.js';\nimport * as util from '../util.js';\nimport { addSubgraphConstraints } from './add-subgraph-constraints.js';\nimport { buildLayerGraph } from './build-layer-graph.js';\nimport { crossCount } from './cross-count.js';\nimport { initOrder } from './init-order.js';\nimport { sortSubgraph } from './sort-subgraph.js';\n\nexport { order };\n\n/*\n * Applies heuristics to minimize edge crossings in the graph and sets the best\n * order solution as an order attribute on each node.\n *\n * Pre-conditions:\n *\n *    1. Graph must be DAG\n *    2. Graph nodes must be objects with a \"rank\" attribute\n *    3. Graph edges must have the \"weight\" attribute\n *\n * Post-conditions:\n *\n *    1. Graph nodes will have an \"order\" attribute based on the results of the\n *       algorithm.\n */\nfunction order(g) {\n  var maxRank = util.maxRank(g),\n    downLayerGraphs = buildLayerGraphs(g, _.range(1, maxRank + 1), 'inEdges'),\n    upLayerGraphs = buildLayerGraphs(g, _.range(maxRank - 1, -1, -1), 'outEdges');\n\n  var layering = initOrder(g);\n  assignOrder(g, layering);\n\n  var bestCC = Number.POSITIVE_INFINITY,\n    best;\n\n  for (var i = 0, lastBest = 0; lastBest < 4; ++i, ++lastBest) {\n    sweepLayerGraphs(i % 2 ? downLayerGraphs : upLayerGraphs, i % 4 >= 2);\n\n    layering = util.buildLayerMatrix(g);\n    var cc = crossCount(g, layering);\n    if (cc < bestCC) {\n      lastBest = 0;\n      best = _.cloneDeep(layering);\n      bestCC = cc;\n    }\n  }\n\n  assignOrder(g, best);\n}\n\nfunction buildLayerGraphs(g, ranks, relationship) {\n  return _.map(ranks, function (rank) {\n    return buildLayerGraph(g, rank, relationship);\n  });\n}\n\nfunction sweepLayerGraphs(layerGraphs, biasRight) {\n  var cg = new Graph();\n  _.forEach(layerGraphs, function (lg) {\n    var root = lg.graph().root;\n    var sorted = sortSubgraph(lg, root, cg, biasRight);\n    _.forEach(sorted.vs, function (v, i) {\n      lg.node(v).order = i;\n    });\n    addSubgraphConstraints(lg, cg, sorted.vs);\n  });\n}\n\nfunction assignOrder(g, layering) {\n  _.forEach(layering, function (layer) {\n    _.forEach(layer, function (v, i) {\n      g.node(v).order = i;\n    });\n  });\n}\n","import * as _ from 'lodash-es';\n\n/*\n * Assigns an initial order value for each node by performing a DFS search\n * starting from nodes in the first rank. Nodes are assigned an order in their\n * rank as they are first visited.\n *\n * This approach comes from Gansner, et al., \"A Technique for Drawing Directed\n * Graphs.\"\n *\n * Returns a layering matrix with an array per layer and each layer sorted by\n * the order of its nodes.\n */\nexport function initOrder(g) {\n  var visited = {};\n  var simpleNodes = _.filter(g.nodes(), function (v) {\n    return !g.children(v).length;\n  });\n  var maxRank = _.max(\n    _.map(simpleNodes, function (v) {\n      return g.node(v).rank;\n    }),\n  );\n  var layers = _.map(_.range(maxRank + 1), function () {\n    return [];\n  });\n\n  function dfs(v) {\n    if (_.has(visited, v)) return;\n    visited[v] = true;\n    var node = g.node(v);\n    layers[node.rank].push(v);\n    _.forEach(g.successors(v), dfs);\n  }\n\n  var orderedVs = _.sortBy(simpleNodes, function (v) {\n    return g.node(v).rank;\n  });\n  _.forEach(orderedVs, dfs);\n\n  return layers;\n}\n","import baseClone from './_baseClone.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);\n}\n\nexport default cloneDeep;\n","import * as _ from 'lodash-es';\n\nexport { addSubgraphConstraints };\n\nfunction addSubgraphConstraints(g, cg, vs) {\n  var prev = {},\n    rootPrev;\n\n  _.forEach(vs, function (v) {\n    var child = g.parent(v),\n      parent,\n      prevChild;\n    while (child) {\n      parent = g.parent(child);\n      if (parent) {\n        prevChild = prev[parent];\n        prev[parent] = child;\n      } else {\n        prevChild = rootPrev;\n        rootPrev = child;\n      }\n      if (prevChild && prevChild !== child) {\n        cg.setEdge(prevChild, child);\n        return;\n      }\n      child = parent;\n    }\n  });\n\n  /*\n  function dfs(v) {\n    var children = v ? g.children(v) : g.children();\n    if (children.length) {\n      var min = Number.POSITIVE_INFINITY,\n          subgraphs = [];\n      _.each(children, function(child) {\n        var childMin = dfs(child);\n        if (g.children(child).length) {\n          subgraphs.push({ v: child, order: childMin });\n        }\n        min = Math.min(min, childMin);\n      });\n      _.reduce(_.sortBy(subgraphs, \"order\"), function(prev, curr) {\n        cg.setEdge(prev.v, curr.v);\n        return curr;\n      });\n      return min;\n    }\n    return g.node(v).order;\n  }\n  dfs(undefined);\n  */\n}\n","import * as _ from 'lodash-es';\n\nexport { parentDummyChains };\n\nfunction parentDummyChains(g) {\n  var postorderNums = postorder(g);\n\n  _.forEach(g.graph().dummyChains, function (v) {\n    var node = g.node(v);\n    var edgeObj = node.edgeObj;\n    var pathData = findPath(g, postorderNums, edgeObj.v, edgeObj.w);\n    var path = pathData.path;\n    var lca = pathData.lca;\n    var pathIdx = 0;\n    var pathV = path[pathIdx];\n    var ascending = true;\n\n    while (v !== edgeObj.w) {\n      node = g.node(v);\n\n      if (ascending) {\n        while ((pathV = path[pathIdx]) !== lca && g.node(pathV).maxRank < node.rank) {\n          pathIdx++;\n        }\n\n        if (pathV === lca) {\n          ascending = false;\n        }\n      }\n\n      if (!ascending) {\n        while (\n          pathIdx < path.length - 1 &&\n          g.node((pathV = path[pathIdx + 1])).minRank <= node.rank\n        ) {\n          pathIdx++;\n        }\n        pathV = path[pathIdx];\n      }\n\n      g.setParent(v, pathV);\n      v = g.successors(v)[0];\n    }\n  });\n}\n\n// Find a path from v to w through the lowest common ancestor (LCA). Return the\n// full path and the LCA.\nfunction findPath(g, postorderNums, v, w) {\n  var vPath = [];\n  var wPath = [];\n  var low = Math.min(postorderNums[v].low, postorderNums[w].low);\n  var lim = Math.max(postorderNums[v].lim, postorderNums[w].lim);\n  var parent;\n  var lca;\n\n  // Traverse up from v to find the LCA\n  parent = v;\n  do {\n    parent = g.parent(parent);\n    vPath.push(parent);\n  } while (parent && (postorderNums[parent].low > low || lim > postorderNums[parent].lim));\n  lca = parent;\n\n  // Traverse from w to LCA\n  parent = w;\n  while ((parent = g.parent(parent)) !== lca) {\n    wPath.push(parent);\n  }\n\n  return { path: vPath.concat(wPath.reverse()), lca: lca };\n}\n\nfunction postorder(g) {\n  var result = {};\n  var lim = 0;\n\n  function dfs(v) {\n    var low = lim;\n    _.forEach(g.children(v), dfs);\n    result[v] = { low: low, lim: lim++ };\n  }\n  _.forEach(g.children(), dfs);\n\n  return result;\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../../graphlib/index.js';\nimport * as util from '../util.js';\n\n/*\n * This module provides coordinate assignment based on Brandes and Köpf, \"Fast\n * and Simple Horizontal Coordinate Assignment.\"\n */\n\nexport {\n  positionX,\n  findType1Conflicts,\n  findType2Conflicts,\n  addConflict,\n  hasConflict,\n  verticalAlignment,\n  horizontalCompaction,\n  alignCoordinates,\n  findSmallestWidthAlignment,\n  balance,\n};\n\n/*\n * Marks all edges in the graph with a type-1 conflict with the \"type1Conflict\"\n * property. A type-1 conflict is one where a non-inner segment crosses an\n * inner segment. An inner segment is an edge with both incident nodes marked\n * with the \"dummy\" property.\n *\n * This algorithm scans layer by layer, starting with the second, for type-1\n * conflicts between the current layer and the previous layer. For each layer\n * it scans the nodes from left to right until it reaches one that is incident\n * on an inner segment. It then scans predecessors to determine if they have\n * edges that cross that inner segment. At the end a final scan is done for all\n * nodes on the current rank to see if they cross the last visited inner\n * segment.\n *\n * This algorithm (safely) assumes that a dummy node will only be incident on a\n * single node in the layers being scanned.\n */\nfunction findType1Conflicts(g, layering) {\n  var conflicts = {};\n\n  function visitLayer(prevLayer, layer) {\n    var // last visited node in the previous layer that is incident on an inner\n      // segment.\n      k0 = 0,\n      // Tracks the last node in this layer scanned for crossings with a type-1\n      // segment.\n      scanPos = 0,\n      prevLayerLength = prevLayer.length,\n      lastNode = _.last(layer);\n\n    _.forEach(layer, function (v, i) {\n      var w = findOtherInnerSegmentNode(g, v),\n        k1 = w ? g.node(w).order : prevLayerLength;\n\n      if (w || v === lastNode) {\n        _.forEach(layer.slice(scanPos, i + 1), function (scanNode) {\n          _.forEach(g.predecessors(scanNode), function (u) {\n            var uLabel = g.node(u),\n              uPos = uLabel.order;\n            if ((uPos < k0 || k1 < uPos) && !(uLabel.dummy && g.node(scanNode).dummy)) {\n              addConflict(conflicts, u, scanNode);\n            }\n          });\n        });\n        // @ts-expect-error\n        scanPos = i + 1;\n        k0 = k1;\n      }\n    });\n\n    return layer;\n  }\n\n  _.reduce(layering, visitLayer);\n  return conflicts;\n}\n\nfunction findType2Conflicts(g, layering) {\n  var conflicts = {};\n\n  function scan(south, southPos, southEnd, prevNorthBorder, nextNorthBorder) {\n    var v;\n    _.forEach(_.range(southPos, southEnd), function (i) {\n      v = south[i];\n      if (g.node(v).dummy) {\n        _.forEach(g.predecessors(v), function (u) {\n          var uNode = g.node(u);\n          if (uNode.dummy && (uNode.order < prevNorthBorder || uNode.order > nextNorthBorder)) {\n            addConflict(conflicts, u, v);\n          }\n        });\n      }\n    });\n  }\n\n  function visitLayer(north, south) {\n    var prevNorthPos = -1,\n      nextNorthPos,\n      southPos = 0;\n\n    _.forEach(south, function (v, southLookahead) {\n      if (g.node(v).dummy === 'border') {\n        var predecessors = g.predecessors(v);\n        if (predecessors.length) {\n          nextNorthPos = g.node(predecessors[0]).order;\n          scan(south, southPos, southLookahead, prevNorthPos, nextNorthPos);\n          // @ts-expect-error\n          southPos = southLookahead;\n          prevNorthPos = nextNorthPos;\n        }\n      }\n      scan(south, southPos, south.length, nextNorthPos, north.length);\n    });\n\n    return south;\n  }\n\n  _.reduce(layering, visitLayer);\n  return conflicts;\n}\n\nfunction findOtherInnerSegmentNode(g, v) {\n  if (g.node(v).dummy) {\n    return _.find(g.predecessors(v), function (u) {\n      return g.node(u).dummy;\n    });\n  }\n}\n\nfunction addConflict(conflicts, v, w) {\n  if (v > w) {\n    var tmp = v;\n    v = w;\n    w = tmp;\n  }\n\n  var conflictsV = conflicts[v];\n  if (!conflictsV) {\n    conflicts[v] = conflictsV = {};\n  }\n  conflictsV[w] = true;\n}\n\nfunction hasConflict(conflicts, v, w) {\n  if (v > w) {\n    var tmp = v;\n    v = w;\n    w = tmp;\n  }\n  return !!conflicts[v] && Object.prototype.hasOwnProperty.call(conflicts[v], w);\n}\n\n/*\n * Try to align nodes into vertical \"blocks\" where possible. This algorithm\n * attempts to align a node with one of its median neighbors. If the edge\n * connecting a neighbor is a type-1 conflict then we ignore that possibility.\n * If a previous node has already formed a block with a node after the node\n * we're trying to form a block with, we also ignore that possibility - our\n * blocks would be split in that scenario.\n */\nfunction verticalAlignment(g, layering, conflicts, neighborFn) {\n  var root = {},\n    align = {},\n    pos = {};\n\n  // We cache the position here based on the layering because the graph and\n  // layering may be out of sync. The layering matrix is manipulated to\n  // generate different extreme alignments.\n  _.forEach(layering, function (layer) {\n    _.forEach(layer, function (v, order) {\n      root[v] = v;\n      align[v] = v;\n      pos[v] = order;\n    });\n  });\n\n  _.forEach(layering, function (layer) {\n    var prevIdx = -1;\n    _.forEach(layer, function (v) {\n      var ws = neighborFn(v);\n      if (ws.length) {\n        ws = _.sortBy(ws, function (w) {\n          return pos[w];\n        });\n        var mp = (ws.length - 1) / 2;\n        for (var i = Math.floor(mp), il = Math.ceil(mp); i <= il; ++i) {\n          var w = ws[i];\n          if (align[v] === v && prevIdx < pos[w] && !hasConflict(conflicts, v, w)) {\n            align[w] = v;\n            align[v] = root[v] = root[w];\n            prevIdx = pos[w];\n          }\n        }\n      }\n    });\n  });\n\n  return { root: root, align: align };\n}\n\nfunction horizontalCompaction(g, layering, root, align, reverseSep) {\n  // This portion of the algorithm differs from BK due to a number of problems.\n  // Instead of their algorithm we construct a new block graph and do two\n  // sweeps. The first sweep places blocks with the smallest possible\n  // coordinates. The second sweep removes unused space by moving blocks to the\n  // greatest coordinates without violating separation.\n  var xs = {},\n    blockG = buildBlockGraph(g, layering, root, reverseSep),\n    borderType = reverseSep ? 'borderLeft' : 'borderRight';\n\n  function iterate(setXsFunc, nextNodesFunc) {\n    var stack = blockG.nodes();\n    var elem = stack.pop();\n    var visited = {};\n    while (elem) {\n      if (visited[elem]) {\n        setXsFunc(elem);\n      } else {\n        visited[elem] = true;\n        stack.push(elem);\n        stack = stack.concat(nextNodesFunc(elem));\n      }\n\n      elem = stack.pop();\n    }\n  }\n\n  // First pass, assign smallest coordinates\n  function pass1(elem) {\n    xs[elem] = blockG.inEdges(elem).reduce(function (acc, e) {\n      return Math.max(acc, xs[e.v] + blockG.edge(e));\n    }, 0);\n  }\n\n  // Second pass, assign greatest coordinates\n  function pass2(elem) {\n    var min = blockG.outEdges(elem).reduce(function (acc, e) {\n      return Math.min(acc, xs[e.w] - blockG.edge(e));\n    }, Number.POSITIVE_INFINITY);\n\n    var node = g.node(elem);\n    if (min !== Number.POSITIVE_INFINITY && node.borderType !== borderType) {\n      xs[elem] = Math.max(xs[elem], min);\n    }\n  }\n\n  iterate(pass1, blockG.predecessors.bind(blockG));\n  iterate(pass2, blockG.successors.bind(blockG));\n\n  // Assign x coordinates to all nodes\n  _.forEach(align, function (v) {\n    xs[v] = xs[root[v]];\n  });\n\n  return xs;\n}\n\nfunction buildBlockGraph(g, layering, root, reverseSep) {\n  var blockGraph = new Graph(),\n    graphLabel = g.graph(),\n    sepFn = sep(graphLabel.nodesep, graphLabel.edgesep, reverseSep);\n\n  _.forEach(layering, function (layer) {\n    var u;\n    _.forEach(layer, function (v) {\n      var vRoot = root[v];\n      blockGraph.setNode(vRoot);\n      if (u) {\n        var uRoot = root[u],\n          prevMax = blockGraph.edge(uRoot, vRoot);\n        blockGraph.setEdge(uRoot, vRoot, Math.max(sepFn(g, v, u), prevMax || 0));\n      }\n      u = v;\n    });\n  });\n\n  return blockGraph;\n}\n\n/*\n * Returns the alignment that has the smallest width of the given alignments.\n */\nfunction findSmallestWidthAlignment(g, xss) {\n  return _.minBy(_.values(xss), function (xs) {\n    var max = Number.NEGATIVE_INFINITY;\n    var min = Number.POSITIVE_INFINITY;\n\n    _.forIn(xs, function (x, v) {\n      var halfWidth = width(g, v) / 2;\n\n      max = Math.max(x + halfWidth, max);\n      min = Math.min(x - halfWidth, min);\n    });\n\n    return max - min;\n  });\n}\n\n/*\n * Align the coordinates of each of the layout alignments such that\n * left-biased alignments have their minimum coordinate at the same point as\n * the minimum coordinate of the smallest width alignment and right-biased\n * alignments have their maximum coordinate at the same point as the maximum\n * coordinate of the smallest width alignment.\n */\nfunction alignCoordinates(xss, alignTo) {\n  var alignToVals = _.values(alignTo),\n    alignToMin = _.min(alignToVals),\n    alignToMax = _.max(alignToVals);\n\n  _.forEach(['u', 'd'], function (vert) {\n    _.forEach(['l', 'r'], function (horiz) {\n      var alignment = vert + horiz,\n        xs = xss[alignment],\n        delta;\n      if (xs === alignTo) return;\n\n      var xsVals = _.values(xs);\n      delta = horiz === 'l' ? alignToMin - _.min(xsVals) : alignToMax - _.max(xsVals);\n\n      if (delta) {\n        xss[alignment] = _.mapValues(xs, function (x) {\n          return x + delta;\n        });\n      }\n    });\n  });\n}\n\nfunction balance(xss, align) {\n  return _.mapValues(xss.ul, function (ignore, v) {\n    if (align) {\n      return xss[align.toLowerCase()][v];\n    } else {\n      var xs = _.sortBy(_.map(xss, v));\n      return (xs[1] + xs[2]) / 2;\n    }\n  });\n}\n\nfunction positionX(g) {\n  var layering = util.buildLayerMatrix(g);\n  var conflicts = _.merge(findType1Conflicts(g, layering), findType2Conflicts(g, layering));\n\n  var xss = {};\n  var adjustedLayering;\n  _.forEach(['u', 'd'], function (vert) {\n    adjustedLayering = vert === 'u' ? layering : _.values(layering).reverse();\n    _.forEach(['l', 'r'], function (horiz) {\n      if (horiz === 'r') {\n        adjustedLayering = _.map(adjustedLayering, function (inner) {\n          return _.values(inner).reverse();\n        });\n      }\n\n      var neighborFn = (vert === 'u' ? g.predecessors : g.successors).bind(g);\n      var align = verticalAlignment(g, adjustedLayering, conflicts, neighborFn);\n      var xs = horizontalCompaction(g, adjustedLayering, align.root, align.align, horiz === 'r');\n      if (horiz === 'r') {\n        xs = _.mapValues(xs, function (x) {\n          return -x;\n        });\n      }\n      xss[vert + horiz] = xs;\n    });\n  });\n\n  var smallestWidth = findSmallestWidthAlignment(g, xss);\n  alignCoordinates(xss, smallestWidth);\n  return balance(xss, g.graph().align);\n}\n\nfunction sep(nodeSep, edgeSep, reverseSep) {\n  return function (g, v, w) {\n    var vLabel = g.node(v);\n    var wLabel = g.node(w);\n    var sum = 0;\n    var delta;\n\n    sum += vLabel.width / 2;\n    if (Object.prototype.hasOwnProperty.call(vLabel, 'labelpos')) {\n      switch (vLabel.labelpos.toLowerCase()) {\n        case 'l':\n          delta = -vLabel.width / 2;\n          break;\n        case 'r':\n          delta = vLabel.width / 2;\n          break;\n      }\n    }\n    if (delta) {\n      sum += reverseSep ? delta : -delta;\n    }\n    delta = 0;\n\n    sum += (vLabel.dummy ? edgeSep : nodeSep) / 2;\n    sum += (wLabel.dummy ? edgeSep : nodeSep) / 2;\n\n    sum += wLabel.width / 2;\n    if (Object.prototype.hasOwnProperty.call(wLabel, 'labelpos')) {\n      switch (wLabel.labelpos.toLowerCase()) {\n        case 'l':\n          delta = wLabel.width / 2;\n          break;\n        case 'r':\n          delta = -wLabel.width / 2;\n          break;\n      }\n    }\n    if (delta) {\n      sum += reverseSep ? delta : -delta;\n    }\n    delta = 0;\n\n    return sum;\n  };\n}\n\nfunction width(g, v) {\n  return g.node(v).width;\n}\n","import baseFor from './_baseFor.js';\nimport castFunction from './_castFunction.js';\nimport keysIn from './keysIn.js';\n\n/**\n * Iterates over own and inherited enumerable string keyed properties of an\n * object and invokes `iteratee` for each property. The iteratee is invoked\n * with three arguments: (value, key, object). Iteratee functions may exit\n * iteration early by explicitly returning `false`.\n *\n * @static\n * @memberOf _\n * @since 0.3.0\n * @category Object\n * @param {Object} object The object to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Object} Returns `object`.\n * @see _.forInRight\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.forIn(new Foo, function(value, key) {\n *   console.log(key);\n * });\n * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).\n */\nfunction forIn(object, iteratee) {\n  return object == null\n    ? object\n    : baseFor(object, castFunction(iteratee), keysIn);\n}\n\nexport default forIn;\n","import * as _ from 'lodash-es';\nimport * as util from '../util.js';\nimport { positionX } from './bk.js';\n\nexport { position };\n\nfunction position(g) {\n  g = util.asNonCompoundGraph(g);\n\n  positionY(g);\n  _.forOwn(positionX(g), function (x, v) {\n    g.node(v).x = x;\n  });\n}\n\nfunction positionY(g) {\n  var layering = util.buildLayerMatrix(g);\n  var rankSep = g.graph().ranksep;\n  var prevY = 0;\n  _.forEach(layering, function (layer) {\n    var maxHeight = _.max(\n      _.map(layer, function (v) {\n        return g.node(v).height;\n      }),\n    );\n    _.forEach(layer, function (v) {\n      g.node(v).y = prevY + maxHeight / 2;\n    });\n    prevY += maxHeight + rankSep;\n  });\n}\n","import baseForOwn from './_baseForOwn.js';\nimport castFunction from './_castFunction.js';\n\n/**\n * Iterates over own enumerable string keyed properties of an object and\n * invokes `iteratee` for each property. The iteratee is invoked with three\n * arguments: (value, key, object). Iteratee functions may exit iteration\n * early by explicitly returning `false`.\n *\n * @static\n * @memberOf _\n * @since 0.3.0\n * @category Object\n * @param {Object} object The object to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Object} Returns `object`.\n * @see _.forOwnRight\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.forOwn(new Foo, function(value, key) {\n *   console.log(key);\n * });\n * // => Logs 'a' then 'b' (iteration order is not guaranteed).\n */\nfunction forOwn(object, iteratee) {\n  return object && baseForOwn(object, castFunction(iteratee));\n}\n\nexport default forOwn;\n","import * as _ from 'lodash-es';\nimport { Graph } from '../graphlib/index.js';\nimport { addBorderSegments } from './add-border-segments.js';\nimport * as coordinateSystem from './coordinate-system.js';\nimport * as acyclic from './acyclic.js';\nimport * as normalize from './normalize.js';\nimport { rank } from './rank/index.js';\nimport * as nestingGraph from './nesting-graph.js';\nimport { order } from './order/index.js';\nimport { parentDummyChains } from './parent-dummy-chains.js';\nimport { position } from './position/index.js';\nimport * as util from './util.js';\n\nexport { layout };\n\nfunction layout(g, opts) {\n  var time = opts && opts.debugTiming ? util.time : util.notime;\n  time('layout', () => {\n    var layoutGraph = time('  buildLayoutGraph', () => buildLayoutGraph(g));\n    time('  runLayout', () => runLayout(layoutGraph, time));\n    time('  updateInputGraph', () => updateInputGraph(g, layoutGraph));\n  });\n}\n\nfunction runLayout(g, time) {\n  time('    makeSpaceForEdgeLabels', () => makeSpaceForEdgeLabels(g));\n  time('    removeSelfEdges', () => removeSelfEdges(g));\n  time('    acyclic', () => acyclic.run(g));\n  time('    nestingGraph.run', () => nestingGraph.run(g));\n  time('    rank', () => rank(util.asNonCompoundGraph(g)));\n  time('    injectEdgeLabelProxies', () => injectEdgeLabelProxies(g));\n  time('    removeEmptyRanks', () => util.removeEmptyRanks(g));\n  time('    nestingGraph.cleanup', () => nestingGraph.cleanup(g));\n  time('    normalizeRanks', () => util.normalizeRanks(g));\n  time('    assignRankMinMax', () => assignRankMinMax(g));\n  time('    removeEdgeLabelProxies', () => removeEdgeLabelProxies(g));\n  time('    normalize.run', () => normalize.run(g));\n  time('    parentDummyChains', () => parentDummyChains(g));\n  time('    addBorderSegments', () => addBorderSegments(g));\n  time('    order', () => order(g));\n  time('    insertSelfEdges', () => insertSelfEdges(g));\n  time('    adjustCoordinateSystem', () => coordinateSystem.adjust(g));\n  time('    position', () => position(g));\n  time('    positionSelfEdges', () => positionSelfEdges(g));\n  time('    removeBorderNodes', () => removeBorderNodes(g));\n  time('    normalize.undo', () => normalize.undo(g));\n  time('    fixupEdgeLabelCoords', () => fixupEdgeLabelCoords(g));\n  time('    undoCoordinateSystem', () => coordinateSystem.undo(g));\n  time('    translateGraph', () => translateGraph(g));\n  time('    assignNodeIntersects', () => assignNodeIntersects(g));\n  time('    reversePoints', () => reversePointsForReversedEdges(g));\n  time('    acyclic.undo', () => acyclic.undo(g));\n}\n\n/*\n * Copies final layout information from the layout graph back to the input\n * graph. This process only copies whitelisted attributes from the layout graph\n * to the input graph, so it serves as a good place to determine what\n * attributes can influence layout.\n */\nfunction updateInputGraph(inputGraph, layoutGraph) {\n  _.forEach(inputGraph.nodes(), function (v) {\n    var inputLabel = inputGraph.node(v);\n    var layoutLabel = layoutGraph.node(v);\n\n    if (inputLabel) {\n      inputLabel.x = layoutLabel.x;\n      inputLabel.y = layoutLabel.y;\n\n      if (layoutGraph.children(v).length) {\n        inputLabel.width = layoutLabel.width;\n        inputLabel.height = layoutLabel.height;\n      }\n    }\n  });\n\n  _.forEach(inputGraph.edges(), function (e) {\n    var inputLabel = inputGraph.edge(e);\n    var layoutLabel = layoutGraph.edge(e);\n\n    inputLabel.points = layoutLabel.points;\n    if (Object.prototype.hasOwnProperty.call(layoutLabel, 'x')) {\n      inputLabel.x = layoutLabel.x;\n      inputLabel.y = layoutLabel.y;\n    }\n  });\n\n  inputGraph.graph().width = layoutGraph.graph().width;\n  inputGraph.graph().height = layoutGraph.graph().height;\n}\n\nvar graphNumAttrs = ['nodesep', 'edgesep', 'ranksep', 'marginx', 'marginy'];\nvar graphDefaults = { ranksep: 50, edgesep: 20, nodesep: 50, rankdir: 'tb' };\nvar graphAttrs = ['acyclicer', 'ranker', 'rankdir', 'align'];\nvar nodeNumAttrs = ['width', 'height'];\nvar nodeDefaults = { width: 0, height: 0 };\nvar edgeNumAttrs = ['minlen', 'weight', 'width', 'height', 'labeloffset'];\nvar edgeDefaults = {\n  minlen: 1,\n  weight: 1,\n  width: 0,\n  height: 0,\n  labeloffset: 10,\n  labelpos: 'r',\n};\nvar edgeAttrs = ['labelpos'];\n\n/*\n * Constructs a new graph from the input graph, which can be used for layout.\n * This process copies only whitelisted attributes from the input graph to the\n * layout graph. Thus this function serves as a good place to determine what\n * attributes can influence layout.\n */\nfunction buildLayoutGraph(inputGraph) {\n  var g = new Graph({ multigraph: true, compound: true });\n  var graph = canonicalize(inputGraph.graph());\n\n  g.setGraph(\n    _.merge({}, graphDefaults, selectNumberAttrs(graph, graphNumAttrs), _.pick(graph, graphAttrs)),\n  );\n\n  _.forEach(inputGraph.nodes(), function (v) {\n    var node = canonicalize(inputGraph.node(v));\n    g.setNode(v, _.defaults(selectNumberAttrs(node, nodeNumAttrs), nodeDefaults));\n    g.setParent(v, inputGraph.parent(v));\n  });\n\n  _.forEach(inputGraph.edges(), function (e) {\n    var edge = canonicalize(inputGraph.edge(e));\n    g.setEdge(\n      e,\n      _.merge({}, edgeDefaults, selectNumberAttrs(edge, edgeNumAttrs), _.pick(edge, edgeAttrs)),\n    );\n  });\n\n  return g;\n}\n\n/*\n * This idea comes from the Gansner paper: to account for edge labels in our\n * layout we split each rank in half by doubling minlen and halving ranksep.\n * Then we can place labels at these mid-points between nodes.\n *\n * We also add some minimal padding to the width to push the label for the edge\n * away from the edge itself a bit.\n */\nfunction makeSpaceForEdgeLabels(g) {\n  var graph = g.graph();\n  graph.ranksep /= 2;\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    edge.minlen *= 2;\n    if (edge.labelpos.toLowerCase() !== 'c') {\n      if (graph.rankdir === 'TB' || graph.rankdir === 'BT') {\n        edge.width += edge.labeloffset;\n      } else {\n        edge.height += edge.labeloffset;\n      }\n    }\n  });\n}\n\n/*\n * Creates temporary dummy nodes that capture the rank in which each edge's\n * label is going to, if it has one of non-zero width and height. We do this\n * so that we can safely remove empty ranks while preserving balance for the\n * label's position.\n */\nfunction injectEdgeLabelProxies(g) {\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    if (edge.width && edge.height) {\n      var v = g.node(e.v);\n      var w = g.node(e.w);\n      var label = { rank: (w.rank - v.rank) / 2 + v.rank, e: e };\n      util.addDummyNode(g, 'edge-proxy', label, '_ep');\n    }\n  });\n}\n\nfunction assignRankMinMax(g) {\n  var maxRank = 0;\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    if (node.borderTop) {\n      node.minRank = g.node(node.borderTop).rank;\n      node.maxRank = g.node(node.borderBottom).rank;\n      // @ts-expect-error\n      maxRank = _.max(maxRank, node.maxRank);\n    }\n  });\n  g.graph().maxRank = maxRank;\n}\n\nfunction removeEdgeLabelProxies(g) {\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    if (node.dummy === 'edge-proxy') {\n      g.edge(node.e).labelRank = node.rank;\n      g.removeNode(v);\n    }\n  });\n}\n\nfunction translateGraph(g) {\n  var minX = Number.POSITIVE_INFINITY;\n  var maxX = 0;\n  var minY = Number.POSITIVE_INFINITY;\n  var maxY = 0;\n  var graphLabel = g.graph();\n  var marginX = graphLabel.marginx || 0;\n  var marginY = graphLabel.marginy || 0;\n\n  function getExtremes(attrs) {\n    var x = attrs.x;\n    var y = attrs.y;\n    var w = attrs.width;\n    var h = attrs.height;\n    minX = Math.min(minX, x - w / 2);\n    maxX = Math.max(maxX, x + w / 2);\n    minY = Math.min(minY, y - h / 2);\n    maxY = Math.max(maxY, y + h / 2);\n  }\n\n  _.forEach(g.nodes(), function (v) {\n    getExtremes(g.node(v));\n  });\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    if (Object.prototype.hasOwnProperty.call(edge, 'x')) {\n      getExtremes(edge);\n    }\n  });\n\n  minX -= marginX;\n  minY -= marginY;\n\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    node.x -= minX;\n    node.y -= minY;\n  });\n\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    _.forEach(edge.points, function (p) {\n      p.x -= minX;\n      p.y -= minY;\n    });\n    if (Object.prototype.hasOwnProperty.call(edge, 'x')) {\n      edge.x -= minX;\n    }\n    if (Object.prototype.hasOwnProperty.call(edge, 'y')) {\n      edge.y -= minY;\n    }\n  });\n\n  graphLabel.width = maxX - minX + marginX;\n  graphLabel.height = maxY - minY + marginY;\n}\n\nfunction assignNodeIntersects(g) {\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    var nodeV = g.node(e.v);\n    var nodeW = g.node(e.w);\n    var p1, p2;\n    if (!edge.points) {\n      edge.points = [];\n      p1 = nodeW;\n      p2 = nodeV;\n    } else {\n      p1 = edge.points[0];\n      p2 = edge.points[edge.points.length - 1];\n    }\n    edge.points.unshift(util.intersectRect(nodeV, p1));\n    edge.points.push(util.intersectRect(nodeW, p2));\n  });\n}\n\nfunction fixupEdgeLabelCoords(g) {\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    if (Object.prototype.hasOwnProperty.call(edge, 'x')) {\n      if (edge.labelpos === 'l' || edge.labelpos === 'r') {\n        edge.width -= edge.labeloffset;\n      }\n      switch (edge.labelpos) {\n        case 'l':\n          edge.x -= edge.width / 2 + edge.labeloffset;\n          break;\n        case 'r':\n          edge.x += edge.width / 2 + edge.labeloffset;\n          break;\n      }\n    }\n  });\n}\n\nfunction reversePointsForReversedEdges(g) {\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    if (edge.reversed) {\n      edge.points.reverse();\n    }\n  });\n}\n\nfunction removeBorderNodes(g) {\n  _.forEach(g.nodes(), function (v) {\n    if (g.children(v).length) {\n      var node = g.node(v);\n      var t = g.node(node.borderTop);\n      var b = g.node(node.borderBottom);\n      var l = g.node(_.last(node.borderLeft));\n      var r = g.node(_.last(node.borderRight));\n\n      node.width = Math.abs(r.x - l.x);\n      node.height = Math.abs(b.y - t.y);\n      node.x = l.x + node.width / 2;\n      node.y = t.y + node.height / 2;\n    }\n  });\n\n  _.forEach(g.nodes(), function (v) {\n    if (g.node(v).dummy === 'border') {\n      g.removeNode(v);\n    }\n  });\n}\n\nfunction removeSelfEdges(g) {\n  _.forEach(g.edges(), function (e) {\n    if (e.v === e.w) {\n      var node = g.node(e.v);\n      if (!node.selfEdges) {\n        node.selfEdges = [];\n      }\n      node.selfEdges.push({ e: e, label: g.edge(e) });\n      g.removeEdge(e);\n    }\n  });\n}\n\nfunction insertSelfEdges(g) {\n  var layers = util.buildLayerMatrix(g);\n  _.forEach(layers, function (layer) {\n    var orderShift = 0;\n    _.forEach(layer, function (v, i) {\n      var node = g.node(v);\n      node.order = i + orderShift;\n      _.forEach(node.selfEdges, function (selfEdge) {\n        util.addDummyNode(\n          g,\n          'selfedge',\n          {\n            width: selfEdge.label.width,\n            height: selfEdge.label.height,\n            rank: node.rank,\n            order: i + ++orderShift,\n            e: selfEdge.e,\n            label: selfEdge.label,\n          },\n          '_se',\n        );\n      });\n      delete node.selfEdges;\n    });\n  });\n}\n\nfunction positionSelfEdges(g) {\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    if (node.dummy === 'selfedge') {\n      var selfNode = g.node(node.e.v);\n      var x = selfNode.x + selfNode.width / 2;\n      var y = selfNode.y;\n      var dx = node.x - x;\n      var dy = selfNode.height / 2;\n      g.setEdge(node.e, node.label);\n      g.removeNode(v);\n      node.label.points = [\n        { x: x + (2 * dx) / 3, y: y - dy },\n        { x: x + (5 * dx) / 6, y: y - dy },\n        { x: x + dx, y: y },\n        { x: x + (5 * dx) / 6, y: y + dy },\n        { x: x + (2 * dx) / 3, y: y + dy },\n      ];\n      node.label.x = node.x;\n      node.label.y = node.y;\n    }\n  });\n}\n\nfunction selectNumberAttrs(obj, attrs) {\n  return _.mapValues(_.pick(obj, attrs), Number);\n}\n\nfunction canonicalize(attrs) {\n  var newAttrs = {};\n  _.forEach(attrs, function (v, k) {\n    newAttrs[k.toLowerCase()] = v;\n  });\n  return newAttrs;\n}\n"],"names":["now$1","root","Date","now","baseGt","value","other","mapValues","object","iteratee","result","baseIteratee","baseForOwn","key","baseAssignValue","max","array","length","baseExtremum","identity","minBy","baseLt","compareAscending","valIsDefined","valIsNull","valIsReflexive","valIsSymbol","isSymbol","othIsDefined","othIsNull","othIsReflexive","othIsSymbol","baseOrderBy","collection","iteratees","orders","arrayMap","isArray","baseGet","index","baseUnary","baseSortBy","comparer","sort","baseMap","criteria","compareMultiple","objCriteria","othCriteria","ordersLength","pick$1","flatRest","func","setToString","overRest","flatten","paths","basePick","basePickBy","path","hasIn","nativeCeil","Math","ceil","nativeMax","range$1","createRange","fromRight","start","end","step","isIterateeCall","toFinite","baseRange","Array","sortBy$1","baseRest","baseFlatten","idCounter","uniqueId","prefix","id","toString","List","constructor","sentinel","_next","_prev","this","_sentinel","dequeue","entry","unlink","enqueue","strs","curr","push","JSON","stringify","filterOutLinks","join","k","v","DEFAULT_WEIGHT_FN","_.constant","greedyFAS","g","weightFn","nodeCount","state","buildState","fasGraph","Graph","maxIn","maxOut","_.forEach","nodes","setNode","in","out","edges","e","prevWeight","edge","w","weight","edgeWeight","setEdge","node","buckets","_.range","map","zeroIdx","assignBucket","graph","results","doGreedyFAS","sources","sinks","removeNode","i","concat","_.flatten","_.map","outEdges","collectPredecessors","inEdges","uEntry","wEntry","run","fas","acyclicer","dfsFAS","stack","visited","dfs","Object","prototype","hasOwnProperty","call","forEach","label","removeEdge","forwardName","name","reversed","_.uniqueId","addDummyNode","type","attrs","hasNode","dummy","asNonCompoundGraph","simplified","multigraph","isMultigraph","setGraph","children","intersectRect","rect","point","sx","sy","x","y","dx","dy","width","h","height","Error","abs","buildLayerMatrix","layering","maxRank","rank","_.isUndefined","order","addBorderNode","arguments","_.max","time","fn","_.now","console","log","notime","prop","sg","sgNode","borderType","prev","util.addDummyNode","setParent","undo","rankDir","rankdir","toLowerCase","reverseY","reverseYOne","points","swapXY","swapXYOne","swapWidthHeight","swapWidthHeightOne","dummyChains","normalizeEdge","vRank","wRank","edgeLabel","labelRank","edgeObj","labelpos","longestPath","_.min","minlen","Number","POSITIVE_INFINITY","slack","feasibleTree","delta","t","directed","size","tightTree","findMinSlackEdge","shiftRanks","nodeEdges","edgeV","_.minBy","vs","_.isArray","navigation","isDirected","successors","neighbors","bind","acc","doDfs","postorder","_.each","networkSimplex","simplify","simpleLabel","initLowLimValues","initCutValues","leaveEdge","exchangeEdges","enterEdge","alg.postorder","slice","assignCutValue","child","childLab","parent","cutvalue","calcCutValue","childIsTail","graphEdge","cutValue","isOutEdge","pointsToHead","otherWeight","isTreeEdge","tree","u","hasEdge","otherCutValue","dfsAssignLowLim","nextLim","low","lim","_.find","vLabel","wLabel","tailLabel","flip","_.filter","isDescendant","f","updateRanks","preorder","alg.preorder","flipped","rootLabel","ranker","networkSimplexRanker","tightTreeRanker","longestPathRanker","depths","treeDepths","depth","_.values","nodeSep","nestingRoot","sumWeights","_.reduce","nodeRankFactor","top","util.addBorderNode","bottom","borderTop","borderBottom","childNode","childTop","childBottom","thisWeight","nestingEdge","buildLayerGraph","relationship","createRootNode","compound","setDefaultNodeLabel","minRank","borderLeft","borderRight","crossCount","cc","twoLayerCrossCount","northLayer","southLayer","southPos","zipObject","props","values","baseZipObject","assignFunc","valsLength","assignValue","_.zipObject","southEntries","_.sortBy","pos","firstIndex","treeSize","weightSum","resolveConflicts","entries","cg","mappedEntries","tmp","indegree","barycenter","entryV","entryW","doResolveConflicts","sourceSet","handleIn","vEntry","merged","mergeEntries","target","source","sum","min","handleOut","pop","reverse","_.pick","biasRight","parts","partition","lhs","rhs","util.partition","sortable","unsortable","vsIndex","compareWithBias","bias","consumeUnsortable","last","_.last","sortSubgraph","movable","bl","br","subgraphs","barycenters","inV","nodeU","subgraphResult","mergeBarycenters","expandSubgraphs","predecessors","blPred","brPred","util.maxRank","downLayerGraphs","buildLayerGraphs","upLayerGraphs","initOrder","simpleNodes","layers","orderedVs","_.has","assignOrder","best","bestCC","lastBest","sweepLayerGraphs","util.buildLayerMatrix","baseClone","CLONE_DEEP_FLAG","ranks","layerGraphs","lg","sorted","addSubgraphConstraints","rootPrev","prevChild","layer","parentDummyChains","postorderNums","pathData","findPath","lca","vPath","wPath","pathIdx","pathV","ascending","findType1Conflicts","conflicts","visitLayer","prevLayer","k0","scanPos","prevLayerLength","lastNode","findOtherInnerSegmentNode","k1","scanNode","uLabel","uPos","addConflict","conflictsV","hasConflict","horizontalCompaction","align","reverseSep","xs","blockG","buildBlockGraph","blockGraph","graphLabel","sepFn","sep","edgeSep","nodesep","edgesep","vRoot","uRoot","prevMax","iterate","setXsFunc","nextNodesFunc","elem","pass1","reduce","pass2","findSmallestWidthAlignment","xss","NEGATIVE_INFINITY","forIn","baseFor","castFunction","keysIn","halfWidth","positionX","adjustedLayering","_.merge","findType2Conflicts","scan","south","southEnd","prevNorthBorder","nextNorthBorder","uNode","north","nextNorthPos","prevNorthPos","southLookahead","vert","horiz","inner","neighborFn","verticalAlignment","prevIdx","ws","mp","floor","il","_.mapValues","smallestWidth","alignCoordinates","alignTo","alignToVals","alignToMin","alignToMax","alignment","xsVals","balance","ul","ignore","position","positionY","rankSep","ranksep","prevY","maxHeight","util.asNonCompoundGraph","forOwn","_.forOwn","layout","opts","debugTiming","util.time","util.notime","layoutGraph","buildLayoutGraph","inputGraph","canonicalize","graphDefaults","selectNumberAttrs","graphNumAttrs","graphAttrs","_.defaults","nodeNumAttrs","nodeDefaults","edgeDefaults","edgeNumAttrs","edgeAttrs","runLayout","makeSpaceForEdgeLabels","labeloffset","removeSelfEdges","selfEdges","acyclic.run","nestingGraph.run","injectEdgeLabelProxies","removeEmptyRanks","offset","util.removeEmptyRanks","cleanup","nestingGraph.cleanup","normalizeRanks","util.normalizeRanks","assignRankMinMax","removeEdgeLabelProxies","normalize.run","addBorderSegments","insertSelfEdges","orderShift","selfEdge","adjust","coordinateSystem.adjust","positionSelfEdges","selfNode","removeBorderNodes","b","l","r","origLabel","normalize.undo","fixupEdgeLabelCoords","coordinateSystem.undo","translateGraph","minX","maxX","minY","maxY","marginX","marginx","marginY","marginy","getExtremes","p","assignNodeIntersects","p1","p2","nodeV","nodeW","unshift","util.intersectRect","reversePointsForReversedEdges","acyclic.undo","updateInputGraph","inputLabel","layoutLabel","obj","newAttrs"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]}