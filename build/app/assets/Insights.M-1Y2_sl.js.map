{"version":3,"file":"Insights.M-1Y2_sl.js","sources":["../../../app/menus/InsightsMenu.tsx","../../../app/scenes/Document/components/Insights.tsx","../../../app/hooks/useTextSelection.ts"],"sourcesContent":["import { t } from \"i18next\";\nimport { MoreIcon } from \"outline-icons\";\nimport React from \"react\";\nimport { MenuButton, useMenuState } from \"reakit/Menu\";\nimport styled from \"styled-components\";\nimport { s, hover } from \"@shared/styles\";\nimport ContextMenu from \"~/components/ContextMenu\";\nimport Template from \"~/components/ContextMenu/Template\";\nimport NudeButton from \"~/components/NudeButton\";\nimport { actionToMenuItem } from \"~/actions\";\nimport { toggleViewerInsights } from \"~/actions/definitions/documents\";\nimport useActionContext from \"~/hooks/useActionContext\";\nimport { MenuItem } from \"~/types\";\n\nconst InsightsMenu: React.FC = () => {\n  const menuRef = React.useRef<HTMLDivElement>(null);\n  const menu = useMenuState();\n  const context = useActionContext();\n  const items: MenuItem[] = [actionToMenuItem(toggleViewerInsights, context)];\n\n  return (\n    <>\n      <MenuButton {...menu}>\n        {(props) => (\n          <Button {...props}>\n            <MoreIcon />\n          </Button>\n        )}\n      </MenuButton>\n      <ContextMenu {...menu} menuRef={menuRef} aria-label={t(\"Notification\")}>\n        <Template {...menu} items={items} />\n      </ContextMenu>\n    </>\n  );\n};\n\nconst Button = styled(NudeButton)`\n  color: ${s(\"textSecondary\")};\n\n  &:${hover},\n  &:active {\n    color: ${s(\"text\")};\n    background: ${s(\"sidebarControlHoverBackground\")};\n  }\n`;\n\nexport default InsightsMenu;\n","import { observer } from \"mobx-react\";\nimport * as React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useHistory, useRouteMatch } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { s } from \"@shared/styles\";\nimport { stringToColor } from \"@shared/utils/color\";\nimport User from \"~/models/User\";\nimport { Avatar, AvatarSize } from \"~/components/Avatar\";\nimport { useDocumentContext } from \"~/components/DocumentContext\";\nimport DocumentViews from \"~/components/DocumentViews\";\nimport Flex from \"~/components/Flex\";\nimport ListItem from \"~/components/List/Item\";\nimport PaginatedList from \"~/components/PaginatedList\";\nimport Text from \"~/components/Text\";\nimport Time from \"~/components/Time\";\nimport useKeyDown from \"~/hooks/useKeyDown\";\nimport { useLocationSidebarContext } from \"~/hooks/useLocationSidebarContext\";\nimport usePolicy from \"~/hooks/usePolicy\";\nimport useStores from \"~/hooks/useStores\";\nimport useTextSelection from \"~/hooks/useTextSelection\";\nimport { useTextStats } from \"~/hooks/useTextStats\";\nimport InsightsMenu from \"~/menus/InsightsMenu\";\nimport { documentPath } from \"~/utils/routeHelpers\";\nimport Sidebar from \"./SidebarLayout\";\n\nfunction Insights() {\n  const { views, documents } = useStores();\n  const { t } = useTranslation();\n  const match = useRouteMatch<{ documentSlug: string }>();\n  const history = useHistory();\n  const sidebarContext = useLocationSidebarContext();\n  const selectedText = useTextSelection();\n  const document = documents.getByUrl(match.params.documentSlug);\n  const { editor } = useDocumentContext();\n  const text = editor?.getPlainText();\n  const stats = useTextStats(text ?? \"\", selectedText);\n  const can = usePolicy(document);\n  const documentViews = document ? views.inDocument(document.id) : [];\n\n  const onCloseInsights = () => {\n    if (document) {\n      history.push({\n        pathname: documentPath(document),\n        state: { sidebarContext },\n      });\n    }\n  };\n\n  useKeyDown(\"Escape\", onCloseInsights);\n\n  return (\n    <Sidebar title={t(\"Insights\")} onClose={onCloseInsights}>\n      {document ? (\n        <Flex\n          column\n          shrink={false}\n          style={{ minHeight: \"100%\" }}\n          justify=\"space-between\"\n        >\n          <div>\n            <Content column>\n              {document.sourceMetadata && (\n                <>\n                  <Heading>{t(\"Source\")}</Heading>\n                  {\n                    <Text as=\"p\" type=\"secondary\" size=\"small\">\n                      {t(\"Imported from {{ source }}\", {\n                        source:\n                          document.sourceName ??\n                          `“${document.sourceMetadata.fileName}”`,\n                      })}\n                    </Text>\n                  }\n                </>\n              )}\n              <Heading>{t(\"Stats\")}</Heading>\n              <Text as=\"p\" type=\"secondary\" size=\"small\">\n                <List>\n                  {stats.total.words > 0 && (\n                    <li>\n                      {t(`{{ count }} minute read`, {\n                        count: stats.total.readingTime,\n                      })}\n                    </li>\n                  )}\n                  <li>\n                    {t(`{{ count }} words`, { count: stats.total.words })}\n                  </li>\n                  <li>\n                    {t(`{{ count }} characters`, {\n                      count: stats.total.characters,\n                    })}\n                  </li>\n                  <li>\n                    {t(`{{ number }} emoji`, { number: stats.total.emoji })}\n                  </li>\n                  {stats.selected.characters === 0 ? (\n                    <li>{t(\"No text selected\")}</li>\n                  ) : (\n                    <>\n                      <li>\n                        {t(`{{ count }} words selected`, {\n                          count: stats.selected.words,\n                        })}\n                      </li>\n                      <li>\n                        {t(`{{ count }} characters selected`, {\n                          count: stats.selected.characters,\n                        })}\n                      </li>\n                    </>\n                  )}\n                </List>\n              </Text>\n            </Content>\n\n            <Content column>\n              <Heading>{t(\"Contributors\")}</Heading>\n              <Text as=\"p\" type=\"secondary\" size=\"small\">\n                {t(`Created`)} <Time dateTime={document.createdAt} addSuffix />.\n                <br />\n                {t(`Last updated`)}{\" \"}\n                <Time dateTime={document.updatedAt} addSuffix />.\n              </Text>\n              <ListSpacing>\n                {document.sourceMetadata?.createdByName && (\n                  <ListItem\n                    title={document.sourceMetadata?.createdByName}\n                    image={\n                      <Avatar\n                        model={{\n                          color: stringToColor(\n                            document.sourceMetadata.createdByName\n                          ),\n                          avatarUrl: null,\n                          initial: document.sourceMetadata.createdByName[0],\n                        }}\n                        size={AvatarSize.Large}\n                      />\n                    }\n                    subtitle={t(\"Creator\")}\n                    border={false}\n                    small\n                  />\n                )}\n                <PaginatedList\n                  aria-label={t(\"Contributors\")}\n                  items={document.collaborators}\n                  renderItem={(model: User) => (\n                    <ListItem\n                      key={model.id}\n                      title={model.name}\n                      image={<Avatar model={model} size={32} />}\n                      subtitle={\n                        model.id === document.createdBy?.id\n                          ? document.sourceMetadata?.createdByName\n                            ? t(\"Imported\")\n                            : t(\"Creator\")\n                          : model.id === document.updatedBy?.id\n                          ? t(\"Last edited\")\n                          : t(\"Previously edited\")\n                      }\n                      border={false}\n                      small\n                    />\n                  )}\n                />\n              </ListSpacing>\n            </Content>\n            {(document.insightsEnabled || can.updateInsights) && (\n              <Content column>\n                <Heading>\n                  <Flex justify=\"space-between\">\n                    {t(\"Viewed by\")}\n                    {can.updateInsights && <InsightsMenu />}\n                  </Flex>\n                </Heading>\n                {document.insightsEnabled ? (\n                  <>\n                    <Text as=\"p\" type=\"secondary\" size=\"small\">\n                      {documentViews.length <= 1\n                        ? t(\"No one else has viewed yet\")\n                        : t(\n                            `Viewed {{ count }} times by {{ teamMembers }} people`,\n                            {\n                              count: documentViews.reduce(\n                                (memo, view) => memo + view.count,\n                                0\n                              ),\n                              teamMembers: documentViews.length,\n                            }\n                          )}\n                      .\n                    </Text>\n                    {documentViews.length > 1 && (\n                      <ListSpacing>\n                        <DocumentViews document={document} isOpen />\n                      </ListSpacing>\n                    )}\n                  </>\n                ) : (\n                  <Text as=\"p\" type=\"secondary\" size=\"small\">\n                    {t(\"Viewer insights are disabled.\")}\n                  </Text>\n                )}\n              </Content>\n            )}\n          </div>\n        </Flex>\n      ) : null}\n    </Sidebar>\n  );\n}\n\nconst ListSpacing = styled(\"div\")`\n  margin-top: -0.5em;\n  margin-bottom: 0.5em;\n`;\n\nconst List = styled(\"ul\")`\n  margin: 0;\n  padding: 0;\n  list-style: none;\n\n  li:before {\n    content: \"·\";\n    display: inline-block;\n    font-weight: 600;\n    color: ${s(\"textTertiary\")};\n    width: 10px;\n  }\n`;\n\nconst Content = styled(Flex)`\n  padding: 0 16px;\n  user-select: none;\n`;\n\nconst Heading = styled(\"h3\")`\n  font-size: 15px;\n`;\n\nexport default observer(Insights);\n","import * as React from \"react\";\nimport useEventListener from \"./useEventListener\";\n\n/**\n * A hook that returns the currently selected text.\n *\n * @returns The selected text\n */\nexport default function useTextSelection() {\n  const [selection, setSelection] = React.useState<string>(\"\");\n\n  useEventListener(\n    \"selectionchange\",\n    () => {\n      const selection = window.getSelection();\n      const text = selection?.toString();\n      setSelection(text ?? \"\");\n    },\n    document\n  );\n\n  return selection;\n}\n"],"names":["InsightsMenu","menuRef","React","useRef","menu","useMenuState","context","useActionContext","items","actionToMenuItem","toggleViewerInsights","jsxs","Fragment","children","jsx","MenuButton","props","Button","MoreIcon","ContextMenu","t","Template","styled","NudeButton","withConfig","componentId","s","hover","ListSpacing","List","Content","Flex","Heading","observer","Insights","views","documents","useStores","useTranslation","match","useRouteMatch","history","useHistory","sidebarContext","useLocationSidebarContext","selectedText","useTextSelection","selection","setSelection","useEventListener","window","getSelection","text","toString","document","getByUrl","params","documentSlug","editor","useDocumentContext","getPlainText","stats","useTextStats","can","usePolicy","documentViews","inDocument","id","onCloseInsights","push","pathname","documentPath","state","useKeyDown","Sidebar","title","onClose","column","shrink","style","minHeight","justify","sourceMetadata","Text","as","type","size","source","sourceName","fileName","total","words","count","readingTime","characters","number","emoji","selected","Time","dateTime","createdAt","addSuffix","updatedAt","createdByName","ListItem","image","Avatar","model","color","stringToColor","avatarUrl","initial","AvatarSize","Large","subtitle","border","small","PaginatedList","collaborators","renderItem","name","createdBy","updatedBy","insightsEnabled","updateInsights","length","reduce","memo","view","teamMembers","DocumentViews","isOpen"],"mappings":"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"}