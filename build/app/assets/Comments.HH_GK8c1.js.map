{"version":3,"mappings":"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","names":["EmojiButton","styled","NudeButton","withConfig","componentId","s","disabled","hover","props","$active","css","transparentize","theme","accent","Count","Text","observer","Reaction","reaction","reactedUsers","onAddReaction","onRemoveReaction","user","useCurrentUser","active","userIds","includes","id","tooltipContent","useTooltipContent","currUser","emoji","t","useTranslation","length","transformedEmoji","getEmojiId","username","name","firstUsername","secondUsername","find","count","handleClick","React","useCallback","event","stopPropagation","DisplayedEmoji","useMemo","onClick","children","Flex","gap","justify","align","jsx","Emoji","size","weight","Tooltip","content","placement","Fragment","ReactionList","model","className","picker","users","useStores","listRef","useRef","hovered","useHover","ref","duration","setHovered","useState","timer","onMouseEnter","current","clearTimeout","window","setTimeout","onMouseLeave","useUnmount","useEffect","onmouseenter","onmouseleave","async","loadReactedUsersData","err","Logger","warn","hasReactions","reactions","style","minHeight","undefined","ResizingHeightContainer","wrap","map","compact","get","isResolved","EmojiPanel","lazy","__vitePreload","import","then","n","a","__VITE_PRELOAD__","ReactionPicker","onSelect","onOpen","onClose","popover","usePopoverState","modal","unstable_offset","width","windowWidth","useWindowSize","isMobile","useMobile","query","setQuery","contentRef","popoverWidth","panelWidth","toggle","hide","handlePopoverButtonClick","ev","handleEmojiSelect","visible","unstable_disclosureRef","contains","target","preventDefault","capture","jsxs","PopoverDisclosure","hideOnClick","ReactionIcon","Popover","shrink","e","hideOnClickOutside","Suspense","fallback","Placeholder","EventBoundary","height","onEmojiChange","onQueryChange","panelActive","memo","column","padding","PlaceholderText","minWidth","displayName","CommentDeleteDialog","comment","onSubmit","comments","hasChildComments","inThread","ConfirmationDialog","delete","error","message","submitText","savingText","danger","as","type","Trans","PlaceHolder","TabActionsWrapper","paddingBottom","UserInfo","AvatarSize","Medium","StyledTab","Tab","StyledTabPanel","TabPanel","ViewReactionsDialog","tab","useTabState","reactedUsersLoaded","createElement","key","selectedId","Avatar","deleteCommentFactory","onDelete","createAction","analyticsName","section","DocumentSection","icon","TrashIcon","keywords","dangerous","stores","policies","abilities","perform","dialogs","openModal","title","resolveCommentFactory","onResolve","DoneIcon","outline","resolve","documentId","update","locationState","history","location","state","replace","sidebarContext","commentId","success","unresolveCommentFactory","onUnresolve","unresolve","viewCommentReactionsFactory","SmileyIcon","read","CommentMenu","onEdit","onUpdate","menu","useMenuState","documents","can","usePolicy","context","useActionContext","isContextMenu","document","handleCopyLink","copy","urlify","commentPath","OverflowMenuButton","ContextMenu","Template","items","EditIcon","actionToMenuItem","resolved","CopyIcon","HighlightedText","truncateMultiline","ResolveButton","Action","action","$rounded","StyledCommentEditor","CommentEditor","readOnly","darken","mentionBackground","AvatarSpacer","Body","form","span","Actions","dir","ReactionListContainer","Meta","Bubble","$lastOfThread","$canReply","$firstOfThread","$firstOfAuthor","$dir","breakpoint","CommentThreadItem","firstOfAuthor","firstOfThread","lastOfThread","previousCommentCreatedAt","canReply","highlightedText","enableScroll","disableScroll","data","setData","showAuthor","showTime","useShowTime","createdAt","previousCreatedAt","previousTimeStamp","dateToRelative","Date","parse","currentTimeStamp","msSincePreviousComment","differenceInMilliseconds","Minute","ms","showEdited","updatedAt","isEditing","setEditing","setReadOnly","useBoolean","formRef","handleAddReaction","addReaction","handleRemoveReaction","removeReaction","handleUpdate","attrs","handleDelete","handleChange","value","handleSave","dispatchEvent","Event","cancelable","bubbles","handleSubmit","save","reverse","createdBy","Time","dateTime","addSuffix","shorten","defaultValue","onChange","onSave","autoFocus","String","ButtonSmall","borderOnHover","handleCancel","neutral","CommentForm","thread","draft","onSaveDraft","onFocus","onBlur","standalone","placeholder","animatePresence","rest","editor","useDocumentContext","editorRef","forceRender","setForceRender","inputFocused","setInputFocused","file","useTheme","reset","isEmpty","isNew","removeComment","useOnClickOutside","handleCreateComment","Comment","toISOString","catch","createdById","handleCreateReply","parentCommentId","uuidv4","add","remove","focusAtStart","presence","initial","opacity","marginBottom","animate","transition","bounce","exit","scale","m","VisuallyHidden","files","getEventFiles","insertFiles","accept","AttachmentValidation","imageContentTypes","join","tabIndex","marginTop","handleClickPadding","isBlurred","text","handleFocus","handleBlur","maxLength","CommentValidation","click","ImageIcon","color","textTertiary","CommentSortMenu","useLocation","useLocationSidebarContext","useHistory","params","useQuery","preferredSortType","getPreference","UserPreference","SortCommentsByOrderInDocument","CommentSortType","OrderInDocument","MostRecent","val","push","search","queryString","stringify","pathname","sortType","setPreference","options","label","Select","ariaLabel","hideLabel","InputSelectNew","Reply","button","ShowMore","div","backgroundSecondary","Thread","$recessed","CommentThread","recessed","focused","collapseThreshold","collapseNumDisplayed","scrollOnMount","hash","topRef","replyRef","setAutoFocus","usePersistedState","ProsemirrorHelper","getAnchorTextForComment","getComments","commentsInThread","filter","collapse","setCollapse","begin","final","classList","defaultPrevented","updateComment","handleClickExpand","scrollIntoView","scrollMode","behavior","block","boundary","parent","sidebarAppearDuration","getCommentMarkElement","getElementById","isMarkVisible","$focused","handleClickThread","index","renderShowMore","slice","c","Array","from","Set","overflow","Facepile","limit","lastOfAuthor","hideOverflow","Fade","timing","PositionedEmpty","Empty","NoComments","Wrapper","$hasComments","JumpToRecent","ArrowDownIcon","ArrowIcon","NewCommentForm","Comments","ui","isEditorInitialized","match","useRouteMatch","scrollable","getByUrl","documentSlug","focusedComment","useFocusedComment","scrollableRef","prevThreadCount","isAtBottom","showJumpToRecentBtn","setShowJumpToRecentBtn","useKeyDown","set","commentsExpanded","sortOption","referencedCommentIds","viewingResolved","threads","resolvedThreadsInDocument","unresolvedThreadsInDocument","hasComments","scrollToBottom","scrollTo","top","scrollHeight","Boolean","Sidebar","auto","Scrollable","bottomShadow","hiddenScrollbars","topShadow","overflowX","onScroll","handleScroll","sh","st","scrollTop","ch","clientHeight","Math","abs","AnimatePresence"],"ignoreList":[],"sources":["../../../app/hooks/useHover.ts","../../../app/components/Reactions/Reaction.tsx","../../../app/components/Reactions/ReactionList.tsx","../../../app/components/Reactions/ReactionPicker.tsx","../../../app/components/CommentDeleteDialog.tsx","../../../app/components/Reactions/ViewReactionsDialog.tsx","../../../app/actions/definitions/comments.tsx","../../../app/menus/CommentMenu.tsx","../../../app/scenes/Document/components/HighlightText.ts","../../../app/scenes/Document/components/CommentThreadItem.tsx","../../../app/scenes/Document/components/CommentForm.tsx","../../../app/scenes/Document/components/CommentSortMenu.tsx","../../../app/scenes/Document/components/CommentThread.tsx","../../../app/scenes/Document/components/Comments.tsx"],"sourcesContent":["import React from \"react\";\nimport useUnmount from \"./useUnmount\";\n\ntype Props = {\n  /** Ref to the element that needs to be observed. */\n  ref: React.RefObject<HTMLElement>;\n  /** Duration to wait until it's considered as a hover event. */\n  duration: number;\n};\n\n/**\n * Hook that will trigger the first time an element is hovered.\n *\n * @returns {boolean} hovered - Signals when an element is hovered by the user.\n */\nconst useHover = ({ ref, duration }: Props): boolean => {\n  const [hovered, setHovered] = React.useState(false);\n  const timer = React.useRef<number>();\n\n  const onMouseEnter = React.useCallback(() => {\n    if (timer.current) {\n      clearTimeout(timer.current);\n    }\n\n    timer.current = window.setTimeout(() => setHovered(true), duration);\n  }, [duration]);\n\n  const onMouseLeave = React.useCallback(() => {\n    if (timer.current) {\n      clearTimeout(timer.current);\n    }\n  }, []);\n\n  useUnmount(() => {\n    if (timer.current) {\n      clearTimeout(timer.current);\n    }\n  });\n\n  React.useEffect(() => {\n    if (ref.current) {\n      ref.current.onmouseenter = onMouseEnter;\n      ref.current.onmouseleave = onMouseLeave;\n    }\n  }, [ref, onMouseEnter, onMouseLeave]);\n\n  return hovered;\n};\n\nexport default useHover;\n","import { observer } from \"mobx-react\";\nimport { transparentize } from \"polished\";\nimport React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport styled, { css } from \"styled-components\";\nimport { s, hover } from \"@shared/styles\";\nimport type { ReactionSummary } from \"@shared/types\";\nimport { getEmojiId } from \"@shared/utils/emoji\";\nimport User from \"~/models/User\";\nimport { Emoji } from \"~/components/Emoji\";\nimport Flex from \"~/components/Flex\";\nimport NudeButton from \"~/components/NudeButton\";\nimport Text from \"~/components/Text\";\nimport Tooltip from \"~/components/Tooltip\";\nimport useCurrentUser from \"~/hooks/useCurrentUser\";\n\ntype Props = {\n  /** Thin reaction data - contains the emoji & active user ids for this reaction. */\n  reaction: ReactionSummary;\n  /** Users who reacted using this emoji. */\n  reactedUsers: User[];\n  /** Whether the emoji button should be disabled (prevents add/remove events). */\n  disabled: boolean;\n  /** Callback when the user intends to add the reaction. */\n  onAddReaction: (emoji: string) => Promise<void>;\n  /** Callback when the user intends to remove the reaction. */\n  onRemoveReaction: (emoji: string) => Promise<void>;\n};\n\nconst useTooltipContent = ({\n  reactedUsers,\n  currUser,\n  emoji,\n  active,\n}: {\n  reactedUsers: User[];\n  currUser: User;\n  emoji: string;\n  active: boolean;\n}) => {\n  const { t } = useTranslation();\n\n  if (!reactedUsers.length) {\n    return;\n  }\n\n  const transformedEmoji = `:${getEmojiId(emoji)}:`;\n\n  switch (reactedUsers.length) {\n    case 1: {\n      return t(\"{{ username }} reacted with {{ emoji }}\", {\n        username: active ? t(\"You\") : reactedUsers[0].name,\n        emoji: transformedEmoji,\n      });\n    }\n\n    case 2: {\n      const firstUsername = active ? t(\"You\") : reactedUsers[0].name;\n      const secondUsername = active\n        ? reactedUsers.find((user) => user.id !== currUser.id)?.name\n        : reactedUsers[1].name;\n\n      return t(\n        \"{{ firstUsername }} and {{ secondUsername }} reacted with {{ emoji }}\",\n        {\n          firstUsername,\n          secondUsername,\n          emoji: transformedEmoji,\n        }\n      );\n    }\n\n    default: {\n      const firstUsername = active ? t(\"You\") : reactedUsers[0].name;\n      const count = reactedUsers.length - 1;\n\n      return t(\n        \"{{ firstUsername }} and {{ count }} others reacted with {{ emoji }}\",\n        {\n          firstUsername,\n          count,\n          emoji: transformedEmoji,\n        }\n      );\n    }\n  }\n};\n\nconst Reaction: React.FC<Props> = ({\n  reaction,\n  reactedUsers,\n  disabled,\n  onAddReaction,\n  onRemoveReaction,\n}) => {\n  const user = useCurrentUser();\n\n  const active = reaction.userIds.includes(user.id);\n\n  const tooltipContent = useTooltipContent({\n    reactedUsers,\n    currUser: user,\n    emoji: reaction.emoji,\n    active,\n  });\n\n  const handleClick = React.useCallback(\n    (event: React.SyntheticEvent<HTMLButtonElement>) => {\n      event.stopPropagation();\n      active\n        ? void onRemoveReaction(reaction.emoji)\n        : void onAddReaction(reaction.emoji);\n    },\n    [reaction, active, onAddReaction, onRemoveReaction]\n  );\n\n  const DisplayedEmoji = React.useMemo(\n    () => (\n      <EmojiButton disabled={disabled} $active={active} onClick={handleClick}>\n        <Flex gap={6} justify=\"center\" align=\"center\">\n          <Emoji size={15}>{reaction.emoji}</Emoji>\n          <Count weight=\"xbold\">{reaction.userIds.length}</Count>\n        </Flex>\n      </EmojiButton>\n    ),\n    [reaction.emoji, reaction.userIds, disabled, active, handleClick]\n  );\n\n  return tooltipContent ? (\n    <Tooltip content={tooltipContent} placement=\"bottom\">\n      {DisplayedEmoji}\n    </Tooltip>\n  ) : (\n    <>{DisplayedEmoji}</>\n  );\n};\n\nconst EmojiButton = styled(NudeButton)<{\n  $active: boolean;\n  disabled: boolean;\n}>`\n  width: auto;\n  height: 28px;\n  padding: 6px;\n  border-radius: 12px;\n  background: ${s(\"backgroundTertiary\")};\n  pointer-events: ${({ disabled }) => disabled && \"none\"};\n\n  &: ${hover} {\n    background: ${s(\"backgroundQuaternary\")};\n  }\n\n  ${(props) =>\n    props.$active &&\n    css`\n      background: ${transparentize(0.7, props.theme.accent)};\n\n      &: ${hover} {\n        background: ${transparentize(0.5, props.theme.accent)};\n      }\n    `}\n`;\n\nconst Count = styled(Text)`\n  font-size: 11px;\n  color: ${s(\"buttonNeutralText\")};\n  padding-right: 1px;\n  font-variant-numeric: tabular-nums;\n`;\n\nexport default observer(Reaction);\n","import compact from \"lodash/compact\";\nimport { observer } from \"mobx-react\";\nimport React from \"react\";\nimport Comment from \"~/models/Comment\";\nimport useHover from \"~/hooks/useHover\";\nimport useStores from \"~/hooks/useStores\";\nimport Logger from \"~/utils/Logger\";\nimport Flex from \"../Flex\";\nimport { ResizingHeightContainer } from \"../ResizingHeightContainer\";\nimport Reaction from \"./Reaction\";\n\ntype Props = {\n  /** Model for which to show the reactions. */\n  model: Comment;\n  /** Callback when the user intends to add a reaction. */\n  onAddReaction: (emoji: string) => Promise<void>;\n  /** Callback when the user intends to remove a reaction. */\n  onRemoveReaction: (emoji: string) => Promise<void>;\n  /** classname generated by styled-components. */\n  className?: string;\n  /** Picker to render as the last element */\n  picker?: React.ReactElement;\n};\n\nconst ReactionList: React.FC<Props> = ({\n  model,\n  onAddReaction,\n  onRemoveReaction,\n  className,\n  picker,\n}) => {\n  const { users } = useStores();\n  const listRef = React.useRef<HTMLDivElement>(null);\n\n  const hovered = useHover({\n    ref: listRef,\n    duration: 250,\n  });\n\n  React.useEffect(() => {\n    const loadReactedUsersData = async () => {\n      try {\n        await model.loadReactedUsersData();\n      } catch (err) {\n        Logger.warn(\"Could not prefetch reaction data\");\n      }\n    };\n\n    if (hovered) {\n      void loadReactedUsersData();\n    }\n  }, [hovered, model]);\n\n  const hasReactions = !!model.reactions.length;\n  const style = React.useMemo(() => {\n    if (hasReactions) {\n      return { minHeight: 28 };\n    }\n    return undefined;\n  }, [hasReactions]);\n\n  return (\n    <ResizingHeightContainer style={style}>\n      <Flex ref={listRef} className={className} align=\"center\" gap={6} wrap>\n        {model.reactions.map((reaction) => {\n          const reactedUsers = compact(\n            reaction.userIds.map((id) => users.get(id))\n          );\n\n          return (\n            <Reaction\n              key={reaction.emoji}\n              reaction={reaction}\n              reactedUsers={reactedUsers}\n              disabled={model.isResolved}\n              onAddReaction={onAddReaction}\n              onRemoveReaction={onRemoveReaction}\n            />\n          );\n        })}\n        {picker}\n      </Flex>\n    </ResizingHeightContainer>\n  );\n};\n\nexport default observer(ReactionList);\n","import { ReactionIcon } from \"outline-icons\";\nimport React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { PopoverDisclosure, usePopoverState } from \"reakit\";\nimport EventBoundary from \"@shared/components/EventBoundary\";\nimport Flex from \"~/components/Flex\";\nimport NudeButton from \"~/components/NudeButton\";\nimport PlaceholderText from \"~/components/PlaceholderText\";\nimport Popover from \"~/components/Popover\";\nimport useMobile from \"~/hooks/useMobile\";\nimport useOnClickOutside from \"~/hooks/useOnClickOutside\";\nimport useWindowSize from \"~/hooks/useWindowSize\";\nimport Tooltip from \"../Tooltip\";\n\nconst EmojiPanel = React.lazy(\n  () => import(\"~/components/IconPicker/components/EmojiPanel\")\n);\n\ntype Props = {\n  /** Callback when an emoji is selected by the user. */\n  onSelect: (emoji: string) => Promise<void>;\n  /** Callback when the picker is opened. */\n  onOpen?: () => void;\n  /** Callback when the picker is closed. */\n  onClose?: () => void;\n  /** Optional classname. */\n  className?: string;\n  size?: number;\n};\n\nconst ReactionPicker: React.FC<Props> = ({\n  onSelect,\n  onOpen,\n  onClose,\n  className,\n  size,\n}) => {\n  const { t } = useTranslation();\n  const popover = usePopoverState({\n    modal: true,\n    unstable_offset: [0, 0],\n    placement: \"bottom-end\",\n  });\n\n  const { width: windowWidth } = useWindowSize();\n  const isMobile = useMobile();\n\n  const [query, setQuery] = React.useState(\"\");\n  const contentRef = React.useRef<HTMLDivElement | null>(null);\n\n  const popoverWidth = isMobile ? windowWidth : 300;\n  // In mobile, popover is absolutely positioned to leave 8px on both sides.\n  const panelWidth = isMobile ? windowWidth - 16 : popoverWidth;\n  const { toggle, hide } = popover;\n  const handlePopoverButtonClick = React.useCallback(\n    (ev: React.MouseEvent) => {\n      ev.stopPropagation();\n      toggle();\n    },\n    [toggle]\n  );\n\n  const handleEmojiSelect = React.useCallback(\n    (emoji: string) => {\n      hide();\n      void onSelect(emoji);\n    },\n    [hide, onSelect]\n  );\n\n  // Popover open effect\n  React.useEffect(() => {\n    if (popover.visible) {\n      onOpen?.();\n    } else {\n      onClose?.();\n    }\n  }, [popover.visible, onOpen, onClose]);\n\n  // Custom click outside handling rather than using `hideOnClickOutside` from reakit so that we can\n  // prevent event bubbling.\n  useOnClickOutside(\n    contentRef,\n    (event) => {\n      if (\n        popover.visible &&\n        !popover.unstable_disclosureRef.current?.contains(event.target as Node)\n      ) {\n        event.stopPropagation();\n        event.preventDefault();\n        popover.hide();\n      }\n    },\n    { capture: true }\n  );\n\n  return (\n    <>\n      <PopoverDisclosure {...popover}>\n        {(props) => (\n          <Tooltip content={t(\"Add reaction\")} placement=\"top\" hideOnClick>\n            <NudeButton\n              {...props}\n              aria-label={t(\"Reaction picker\")}\n              className={className}\n              onClick={handlePopoverButtonClick}\n              size={size}\n            >\n              <ReactionIcon size={22} />\n            </NudeButton>\n          </Tooltip>\n        )}\n      </PopoverDisclosure>\n      <Popover\n        {...popover}\n        ref={contentRef}\n        width={popoverWidth}\n        shrink\n        aria-label={t(\"Reaction picker\")}\n        onClick={(e) => e.stopPropagation()}\n        hideOnClickOutside={false}\n      >\n        {popover.visible && (\n          <React.Suspense fallback={<Placeholder />}>\n            <EventBoundary>\n              <EmojiPanel\n                height={300}\n                panelWidth={panelWidth}\n                query={query}\n                onEmojiChange={handleEmojiSelect}\n                onQueryChange={setQuery}\n                panelActive\n              />\n            </EventBoundary>\n          </React.Suspense>\n        )}\n      </Popover>\n    </>\n  );\n};\n\nconst Placeholder = React.memo(\n  () => (\n    <Flex column gap={6} style={{ height: \"300px\", padding: \"6px 12px\" }}>\n      <Flex gap={8}>\n        <PlaceholderText height={32} minWidth={90} />\n        <PlaceholderText height={32} width={32} />\n      </Flex>\n      <PlaceholderText height={24} width={120} />\n    </Flex>\n  ),\n  () => true\n);\nPlaceholder.displayName = \"ReactionPickerPlaceholder\";\n\nexport default ReactionPicker;\n","import { observer } from \"mobx-react\";\nimport * as React from \"react\";\nimport { useTranslation, Trans } from \"react-i18next\";\nimport { toast } from \"sonner\";\nimport Comment from \"~/models/Comment\";\nimport ConfirmationDialog from \"~/components/ConfirmationDialog\";\nimport Text from \"~/components/Text\";\nimport useStores from \"~/hooks/useStores\";\n\ntype Props = {\n  comment: Comment;\n  onSubmit?: () => void;\n};\n\nfunction CommentDeleteDialog({ comment, onSubmit }: Props) {\n  const { comments } = useStores();\n  const { t } = useTranslation();\n  const hasChildComments = comments.inThread(comment.id).length > 1;\n\n  const handleSubmit = async () => {\n    try {\n      await comment.delete();\n      onSubmit?.();\n    } catch (err) {\n      toast.error(err.message);\n    }\n  };\n\n  return (\n    <ConfirmationDialog\n      onSubmit={handleSubmit}\n      submitText={t(\"I’m sure – Delete\")}\n      savingText={`${t(\"Deleting\")}…`}\n      danger\n    >\n      <Text as=\"p\" type=\"secondary\">\n        {hasChildComments ? (\n          <Trans>\n            Are you sure you want to permanently delete this entire comment\n            thread?\n          </Trans>\n        ) : (\n          <Trans>\n            Are you sure you want to permanently delete this comment?\n          </Trans>\n        )}\n      </Text>\n    </ConfirmationDialog>\n  );\n}\n\nexport default observer(CommentDeleteDialog);\n","import compact from \"lodash/compact\";\nimport { observer } from \"mobx-react\";\nimport React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Tab, TabPanel, useTabState } from \"reakit\";\nimport { toast } from \"sonner\";\nimport styled, { css } from \"styled-components\";\nimport { s, hover } from \"@shared/styles\";\nimport Comment from \"~/models/Comment\";\nimport { Avatar, AvatarSize } from \"~/components/Avatar\";\nimport { Emoji } from \"~/components/Emoji\";\nimport Flex from \"~/components/Flex\";\nimport PlaceholderText from \"~/components/PlaceholderText\";\nimport Text from \"~/components/Text\";\nimport useStores from \"~/hooks/useStores\";\n\ntype Props = {\n  /** Model for which to show the reactions. */\n  model: Comment;\n};\n\nconst ViewReactionsDialog: React.FC<Props> = ({ model }) => {\n  const { t } = useTranslation();\n  const { users } = useStores();\n  const tab = useTabState();\n  const { reactedUsersLoaded } = model;\n\n  React.useEffect(() => {\n    const loadReactedUsersData = async () => {\n      try {\n        await model.loadReactedUsersData();\n      } catch (err) {\n        toast.error(t(\"Could not load reactions\"));\n      }\n    };\n\n    void loadReactedUsersData();\n  }, [t, model]);\n\n  if (!reactedUsersLoaded) {\n    return <PlaceHolder />;\n  }\n\n  return (\n    <>\n      <TabActionsWrapper>\n        {model.reactions.map((reaction) => (\n          <StyledTab\n            {...tab}\n            key={reaction.emoji}\n            id={reaction.emoji}\n            aria-label={t(\"Reaction\")}\n            $active={tab.selectedId === reaction.emoji}\n          >\n            <Emoji size={16}>{reaction.emoji}</Emoji>\n          </StyledTab>\n        ))}\n      </TabActionsWrapper>\n      {model.reactions.map((reaction) => {\n        const reactedUsers = compact(\n          reaction.userIds.map((id) => users.get(id))\n        );\n\n        return (\n          <StyledTabPanel {...tab} key={reaction.emoji}>\n            {reactedUsers.map((user) => (\n              <UserInfo key={user.name} align=\"center\" gap={8}>\n                <Avatar model={user} size={AvatarSize.Medium} />\n                <Text size=\"medium\">{user.name}</Text>\n              </UserInfo>\n            ))}\n          </StyledTabPanel>\n        );\n      })}\n    </>\n  );\n};\n\nconst PlaceHolder = React.memo(\n  () => (\n    <>\n      <TabActionsWrapper gap={8} style={{ paddingBottom: \"10px\" }}>\n        <PlaceholderText width={40} height={32} />\n        <PlaceholderText width={40} height={32} />\n      </TabActionsWrapper>\n      <UserInfo align=\"center\" gap={12}>\n        <PlaceholderText width={AvatarSize.Medium} height={AvatarSize.Medium} />\n        <PlaceholderText height={34} />\n      </UserInfo>\n      <UserInfo align=\"center\" gap={12}>\n        <PlaceholderText width={AvatarSize.Medium} height={AvatarSize.Medium} />\n        <PlaceholderText height={34} />\n      </UserInfo>\n    </>\n  ),\n  () => true\n);\nPlaceHolder.displayName = \"ViewReactionsPlaceholder\";\n\nconst TabActionsWrapper = styled(Flex)`\n  border-bottom: 1px solid ${s(\"inputBorder\")};\n`;\n\nconst StyledTab = styled(Tab)<{ $active: boolean }>`\n  position: relative;\n  font-weight: 500;\n  font-size: 14px;\n  cursor: var(--pointer);\n  background: none;\n  border: 0;\n  border-radius: 4px 4px 0 0;\n  padding: 8px 12px 10px;\n  user-select: none;\n  transition: background-color 100ms ease;\n\n  &: ${hover} {\n    background-color: ${s(\"listItemHoverBackground\")};\n  }\n\n  ${({ $active }) =>\n    $active &&\n    css`\n      &:after {\n        content: \"\";\n        position: absolute;\n        bottom: 0;\n        left: 0;\n        right: 0;\n        height: 1px;\n        background: ${s(\"textSecondary\")};\n      }\n    `}\n`;\n\nconst StyledTabPanel = styled(TabPanel)`\n  height: 300px;\n  padding: 5px 0;\n  overflow-y: auto;\n`;\n\nconst UserInfo = styled(Flex)`\n  padding: 10px 8px;\n`;\n\nexport default observer(ViewReactionsDialog);\n","import { DoneIcon, SmileyIcon, TrashIcon } from \"outline-icons\";\nimport * as React from \"react\";\nimport { toast } from \"sonner\";\nimport stores from \"~/stores\";\nimport Comment from \"~/models/Comment\";\nimport CommentDeleteDialog from \"~/components/CommentDeleteDialog\";\nimport ViewReactionsDialog from \"~/components/Reactions/ViewReactionsDialog\";\nimport history from \"~/utils/history\";\nimport { createAction } from \"..\";\nimport { DocumentSection } from \"../sections\";\n\nexport const deleteCommentFactory = ({\n  comment,\n  onDelete,\n}: {\n  comment: Comment;\n  onDelete: () => void;\n}) =>\n  createAction({\n    name: ({ t }) => `${t(\"Delete\")}…`,\n    analyticsName: \"Delete comment\",\n    section: DocumentSection,\n    icon: <TrashIcon />,\n    keywords: \"trash\",\n    dangerous: true,\n    visible: () => stores.policies.abilities(comment.id).delete,\n    perform: ({ t, event }) => {\n      event?.preventDefault();\n      event?.stopPropagation();\n\n      stores.dialogs.openModal({\n        title: t(\"Delete comment\"),\n        content: <CommentDeleteDialog comment={comment} onSubmit={onDelete} />,\n      });\n    },\n  });\n\nexport const resolveCommentFactory = ({\n  comment,\n  onResolve,\n}: {\n  comment: Comment;\n  onResolve: () => void;\n}) =>\n  createAction({\n    name: ({ t }) => t(\"Mark as resolved\"),\n    analyticsName: \"Resolve thread\",\n    section: DocumentSection,\n    icon: <DoneIcon outline />,\n    visible: () =>\n      stores.policies.abilities(comment.id).resolve &&\n      stores.policies.abilities(comment.documentId).update,\n    perform: async ({ t }) => {\n      await comment.resolve();\n\n      const locationState = history.location.state as Record<string, unknown>;\n      history.replace({\n        ...history.location,\n        state: {\n          sidebarContext: locationState[\"sidebarContext\"],\n          commentId: undefined,\n        },\n      });\n\n      onResolve();\n      toast.success(t(\"Thread resolved\"));\n    },\n  });\n\nexport const unresolveCommentFactory = ({\n  comment,\n  onUnresolve,\n}: {\n  comment: Comment;\n  onUnresolve: () => void;\n}) =>\n  createAction({\n    name: ({ t }) => t(\"Mark as unresolved\"),\n    analyticsName: \"Unresolve thread\",\n    section: DocumentSection,\n    icon: <DoneIcon outline />,\n    visible: () =>\n      stores.policies.abilities(comment.id).unresolve &&\n      stores.policies.abilities(comment.documentId).update,\n    perform: async () => {\n      await comment.unresolve();\n\n      const locationState = history.location.state as Record<string, unknown>;\n      history.replace({\n        ...history.location,\n        state: {\n          sidebarContext: locationState[\"sidebarContext\"],\n          commentId: undefined,\n        },\n      });\n\n      onUnresolve();\n    },\n  });\n\nexport const viewCommentReactionsFactory = ({\n  comment,\n}: {\n  comment: Comment;\n}) =>\n  createAction({\n    name: ({ t }) => `${t(\"View reactions\")}`,\n    analyticsName: \"View comment reactions\",\n    section: DocumentSection,\n    icon: <SmileyIcon />,\n    visible: () =>\n      stores.policies.abilities(comment.id).read &&\n      comment.reactions.length > 0,\n    perform: ({ t, event }) => {\n      event?.preventDefault();\n      event?.stopPropagation();\n\n      stores.dialogs.openModal({\n        title: t(\"Reactions\"),\n        content: <ViewReactionsDialog model={comment} />,\n      });\n    },\n  });\n","import copy from \"copy-to-clipboard\";\nimport { observer } from \"mobx-react\";\nimport { CopyIcon, EditIcon } from \"outline-icons\";\nimport * as React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useMenuState } from \"reakit/Menu\";\nimport { toast } from \"sonner\";\nimport EventBoundary from \"@shared/components/EventBoundary\";\nimport Comment from \"~/models/Comment\";\nimport ContextMenu from \"~/components/ContextMenu\";\nimport OverflowMenuButton from \"~/components/ContextMenu/OverflowMenuButton\";\nimport Template from \"~/components/ContextMenu/Template\";\nimport { actionToMenuItem } from \"~/actions\";\nimport {\n  deleteCommentFactory,\n  resolveCommentFactory,\n  unresolveCommentFactory,\n  viewCommentReactionsFactory,\n} from \"~/actions/definitions/comments\";\nimport useActionContext from \"~/hooks/useActionContext\";\nimport usePolicy from \"~/hooks/usePolicy\";\nimport useStores from \"~/hooks/useStores\";\nimport { commentPath, urlify } from \"~/utils/routeHelpers\";\n\ntype Props = {\n  /** The comment to associate with the menu */\n  comment: Comment;\n  /** CSS class name */\n  className?: string;\n  /** Callback when the \"Edit\" is selected in the menu */\n  onEdit: () => void;\n  /** Callback when the comment has been deleted */\n  onDelete: () => void;\n  /** Callback when the comment has been updated */\n  onUpdate: (attrs: { resolved: boolean }) => void;\n};\n\nfunction CommentMenu({\n  comment,\n  onEdit,\n  onDelete,\n  onUpdate,\n  className,\n}: Props) {\n  const menu = useMenuState({\n    modal: true,\n  });\n  const { documents } = useStores();\n  const { t } = useTranslation();\n  const can = usePolicy(comment);\n  const context = useActionContext({ isContextMenu: true });\n  const document = documents.get(comment.documentId);\n\n  const handleCopyLink = React.useCallback(() => {\n    if (document) {\n      copy(urlify(commentPath(document, comment)));\n      toast.message(t(\"Link copied\"));\n    }\n  }, [t, document, comment]);\n\n  return (\n    <>\n      <EventBoundary>\n        <OverflowMenuButton\n          aria-label={t(\"Show menu\")}\n          className={className}\n          {...menu}\n        />\n      </EventBoundary>\n      {menu.visible && (\n        <ContextMenu {...menu} aria-label={t(\"Comment options\")}>\n          <Template\n            {...menu}\n            items={[\n              {\n                type: \"button\",\n                title: `${t(\"Edit\")}…`,\n                icon: <EditIcon />,\n                onClick: onEdit,\n                visible: can.update && !comment.isResolved,\n              },\n              actionToMenuItem(\n                resolveCommentFactory({\n                  comment,\n                  onResolve: () => onUpdate({ resolved: true }),\n                }),\n                context\n              ),\n              actionToMenuItem(\n                unresolveCommentFactory({\n                  comment,\n                  onUnresolve: () => onUpdate({ resolved: false }),\n                }),\n                context\n              ),\n              actionToMenuItem(\n                viewCommentReactionsFactory({\n                  comment,\n                }),\n                context\n              ),\n              {\n                type: \"button\",\n                icon: <CopyIcon />,\n                title: t(\"Copy link\"),\n                onClick: handleCopyLink,\n              },\n              {\n                type: \"separator\",\n              },\n              actionToMenuItem(\n                deleteCommentFactory({ comment, onDelete }),\n                context\n              ),\n            ]}\n          />\n        </ContextMenu>\n      )}\n    </>\n  );\n}\n\nexport default observer(CommentMenu);\n","import styled from \"styled-components\";\nimport { s, truncateMultiline } from \"@shared/styles\";\nimport Text from \"~/components/Text\";\n\n/**\n * Highlighted text associated with a comment.\n */\nexport const HighlightedText = styled(Text)`\n  position: relative;\n  color: ${s(\"textSecondary\")};\n  font-size: 14px;\n  padding: 0 8px;\n  margin: 4px 0;\n  display: inline-block;\n\n  ${truncateMultiline(3)}\n\n  &:after {\n    content: \"\";\n    width: 2px;\n    position: absolute;\n    left: 0;\n    top: 2px;\n    bottom: 2px;\n    background: ${s(\"commentMarkBackground\")};\n    border-radius: 2px;\n  }\n`;\n","import { differenceInMilliseconds } from \"date-fns\";\nimport { action } from \"mobx\";\nimport { observer } from \"mobx-react\";\nimport { DoneIcon } from \"outline-icons\";\nimport { darken } from \"polished\";\nimport * as React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { toast } from \"sonner\";\nimport styled, { css } from \"styled-components\";\nimport breakpoint from \"styled-components-breakpoint\";\nimport EventBoundary from \"@shared/components/EventBoundary\";\nimport { s, hover } from \"@shared/styles\";\nimport { ProsemirrorData } from \"@shared/types\";\nimport { dateToRelative } from \"@shared/utils/date\";\nimport { Minute } from \"@shared/utils/time\";\nimport Comment from \"~/models/Comment\";\nimport { Avatar } from \"~/components/Avatar\";\nimport ButtonSmall from \"~/components/ButtonSmall\";\nimport Flex from \"~/components/Flex\";\nimport NudeButton from \"~/components/NudeButton\";\nimport ReactionList from \"~/components/Reactions/ReactionList\";\nimport ReactionPicker from \"~/components/Reactions/ReactionPicker\";\nimport Text from \"~/components/Text\";\nimport Time from \"~/components/Time\";\nimport Tooltip from \"~/components/Tooltip\";\nimport { resolveCommentFactory } from \"~/actions/definitions/comments\";\nimport useActionContext from \"~/hooks/useActionContext\";\nimport useBoolean from \"~/hooks/useBoolean\";\nimport useCurrentUser from \"~/hooks/useCurrentUser\";\nimport CommentMenu from \"~/menus/CommentMenu\";\nimport CommentEditor from \"./CommentEditor\";\nimport { HighlightedText } from \"./HighlightText\";\n\n/**\n * Hook to calculate if we should display a timestamp on a comment\n *\n * @param createdAt The date the comment was created\n * @param previousCreatedAt The date of the previous comment, if any\n * @returns boolean if to show timestamp\n */\nfunction useShowTime(\n  createdAt: string | undefined,\n  previousCreatedAt: string | undefined\n): boolean {\n  if (!createdAt) {\n    return false;\n  }\n\n  const previousTimeStamp = previousCreatedAt\n    ? dateToRelative(Date.parse(previousCreatedAt))\n    : undefined;\n  const currentTimeStamp = dateToRelative(Date.parse(createdAt));\n\n  const msSincePreviousComment = previousCreatedAt\n    ? differenceInMilliseconds(\n        Date.parse(createdAt),\n        Date.parse(previousCreatedAt)\n      )\n    : 0;\n\n  return (\n    !msSincePreviousComment ||\n    (msSincePreviousComment > 15 * Minute.ms &&\n      previousTimeStamp !== currentTimeStamp)\n  );\n}\n\ntype Props = {\n  /** The comment to render */\n  comment: Comment;\n  /** The text direction of the editor */\n  dir?: \"rtl\" | \"ltr\";\n  /** Whether this is the first comment in the thread */\n  firstOfThread?: boolean;\n  /** Whether this is the last comment in the thread */\n  lastOfThread?: boolean;\n  /** Whether this is the first consecutive comment by this author */\n  firstOfAuthor?: boolean;\n  /** Whether this is the last consecutive comment by this author */\n  lastOfAuthor?: boolean;\n  /** The date of the previous comment in the thread */\n  previousCommentCreatedAt?: string;\n  /** Whether the user can reply in the thread */\n  canReply: boolean;\n  /** Callback when the comment has been deleted */\n  onDelete?: (id: string) => void;\n  /** Callback when the comment has been updated */\n  onUpdate?: (id: string, attrs: { resolved: boolean }) => void;\n  /** Text to highlight at the top of the comment */\n  highlightedText?: string;\n  /** Enable scroll for the comments container */\n  enableScroll: () => void;\n  /** Disable scroll for the comments container */\n  disableScroll: () => void;\n};\n\nfunction CommentThreadItem({\n  comment,\n  firstOfAuthor,\n  firstOfThread,\n  lastOfThread,\n  dir,\n  previousCommentCreatedAt,\n  canReply,\n  onDelete,\n  onUpdate,\n  highlightedText,\n  enableScroll,\n  disableScroll,\n}: Props) {\n  const { t } = useTranslation();\n  const user = useCurrentUser();\n  const [data, setData] = React.useState(comment.data);\n  const showAuthor = firstOfAuthor;\n  const showTime = useShowTime(comment.createdAt, previousCommentCreatedAt);\n  const showEdited =\n    comment.updatedAt &&\n    comment.updatedAt !== comment.createdAt &&\n    !comment.isResolved;\n  const [isEditing, setEditing, setReadOnly] = useBoolean();\n  const formRef = React.useRef<HTMLFormElement>(null);\n\n  const handleAddReaction = React.useCallback(\n    async (emoji: string) => {\n      await comment.addReaction({ emoji, user });\n    },\n    [comment, user]\n  );\n\n  const handleRemoveReaction = React.useCallback(\n    async (emoji: string) => {\n      await comment.removeReaction({ emoji, user });\n    },\n    [comment, user]\n  );\n\n  const handleUpdate = React.useCallback(\n    (attrs: { resolved: boolean }) => {\n      onUpdate?.(comment.id, attrs);\n    },\n    [comment.id, onUpdate]\n  );\n\n  const handleDelete = React.useCallback(() => {\n    onDelete?.(comment.id);\n  }, [comment.id, onDelete]);\n\n  const handleChange = React.useCallback(\n    (value: (asString: boolean) => ProsemirrorData) => {\n      setData(value(false));\n    },\n    []\n  );\n\n  const handleSave = React.useCallback(() => {\n    formRef.current?.dispatchEvent(\n      new Event(\"submit\", { cancelable: true, bubbles: true })\n    );\n  }, []);\n\n  const handleSubmit = action(async (event: React.FormEvent) => {\n    event.preventDefault();\n\n    try {\n      setReadOnly();\n      comment.data = data;\n      await comment.save();\n    } catch (error) {\n      setEditing();\n      toast.error(t(\"Error updating comment\"));\n    }\n  });\n\n  const handleCancel = () => {\n    setData(comment.data);\n    setReadOnly();\n  };\n\n  return (\n    <Flex gap={8} align=\"flex-start\" reverse={dir === \"rtl\"}>\n      {firstOfAuthor && (\n        <AvatarSpacer>\n          <Avatar model={comment.createdBy} size={24} />\n        </AvatarSpacer>\n      )}\n      <Bubble\n        $firstOfThread={firstOfThread}\n        $firstOfAuthor={firstOfAuthor}\n        $lastOfThread={lastOfThread}\n        $dir={dir}\n        $canReply={canReply}\n        column\n      >\n        {(showAuthor || showTime) && (\n          <Meta size=\"xsmall\" type=\"secondary\" dir={dir}>\n            {showAuthor && <em>{comment.createdBy.name}</em>}\n            {showAuthor && showTime && <> &middot; </>}\n            {showTime && (\n              <Time dateTime={comment.createdAt} addSuffix shorten />\n            )}\n            {showEdited && (\n              <>\n                {\" \"}\n                (<Time dateTime={comment.updatedAt}>{t(\"edited\")}</Time>)\n              </>\n            )}\n          </Meta>\n        )}\n        {highlightedText && (\n          <HighlightedText>{highlightedText}</HighlightedText>\n        )}\n        <Body ref={formRef} onSubmit={handleSubmit}>\n          <StyledCommentEditor\n            key={String(isEditing)}\n            readOnly={!isEditing}\n            value={comment.data}\n            defaultValue={data}\n            onChange={handleChange}\n            onSave={handleSave}\n            autoFocus\n          />\n          {isEditing && (\n            <Flex align=\"flex-end\" gap={8}>\n              <ButtonSmall type=\"submit\" borderOnHover>\n                {t(\"Save\")}\n              </ButtonSmall>\n              <ButtonSmall onClick={handleCancel} neutral borderOnHover>\n                {t(\"Cancel\")}\n              </ButtonSmall>\n            </Flex>\n          )}\n          {!!comment.reactions.length && (\n            <ReactionListContainer gap={6} align=\"center\">\n              <ReactionList\n                model={comment}\n                onAddReaction={handleAddReaction}\n                onRemoveReaction={handleRemoveReaction}\n                picker={\n                  !comment.isResolved ? (\n                    <Action\n                      as={ReactionPicker}\n                      onSelect={handleAddReaction}\n                      onOpen={disableScroll}\n                      onClose={enableScroll}\n                      size={28}\n                      $rounded\n                    />\n                  ) : undefined\n                }\n              />\n            </ReactionListContainer>\n          )}\n        </Body>\n        <EventBoundary>\n          {!isEditing && (\n            <Actions gap={4} dir={dir}>\n              {!comment.isResolved && (\n                <>\n                  {firstOfThread && (\n                    <ResolveButton onUpdate={handleUpdate} comment={comment} />\n                  )}\n                  <Action\n                    as={ReactionPicker}\n                    onSelect={handleAddReaction}\n                    onOpen={disableScroll}\n                    onClose={enableScroll}\n                    $rounded\n                  />\n                </>\n              )}\n              <Action\n                as={CommentMenu}\n                comment={comment}\n                onEdit={setEditing}\n                onDelete={handleDelete}\n                onUpdate={handleUpdate}\n              />\n            </Actions>\n          )}\n        </EventBoundary>\n      </Bubble>\n    </Flex>\n  );\n}\n\nconst ResolveButton = ({\n  comment,\n  onUpdate,\n}: {\n  comment: Comment;\n  onUpdate: (attrs: { resolved: boolean }) => void;\n}) => {\n  const context = useActionContext();\n  const { t } = useTranslation();\n\n  return (\n    <Tooltip content={t(\"Mark as resolved\")} placement=\"top\" hideOnClick>\n      <Action\n        as={NudeButton}\n        context={context}\n        action={resolveCommentFactory({\n          comment,\n          onResolve: () => onUpdate({ resolved: true }),\n        })}\n        $rounded\n      >\n        <DoneIcon size={22} outline />\n      </Action>\n    </Tooltip>\n  );\n};\n\nconst StyledCommentEditor = styled(CommentEditor)`\n  ${(props) =>\n    !props.readOnly &&\n    css`\n      box-shadow: 0 0 0 2px ${props.theme.accent};\n      border-radius: 2px;\n      padding: 2px;\n      margin: 2px;\n      margin-bottom: 8px;\n    `}\n\n  .mention {\n    background: ${(props) => darken(0.05, props.theme.mentionBackground)};\n  }\n`;\n\nconst AvatarSpacer = styled(Flex)`\n  width: 24px;\n  height: 24px;\n  margin-top: 4px;\n  align-items: flex-end;\n  justify-content: flex-end;\n  flex-shrink: 0;\n  flex-direction: column;\n`;\n\nconst Body = styled.form`\n  border-radius: 2px;\n`;\n\nconst Action = styled.span<{ $rounded?: boolean }>`\n  color: ${s(\"textSecondary\")};\n  ${(props) =>\n    props.$rounded &&\n    css`\n      border-radius: 50%;\n    `}\n\n  svg {\n    fill: currentColor;\n    opacity: 0.5;\n  }\n\n  &: ${hover}, &[aria-expanded= \"true\"] {\n    background: ${s(\"backgroundQuaternary\")};\n\n    svg {\n      opacity: 0.75;\n    }\n  }\n`;\n\nconst Actions = styled(Flex)<{ dir?: \"rtl\" | \"ltr\" }>`\n  position: absolute;\n  left: ${(props) => (props.dir !== \"rtl\" ? \"auto\" : \"4px\")};\n  right: ${(props) => (props.dir === \"rtl\" ? \"auto\" : \"4px\")};\n  top: 4px;\n  opacity: 0;\n  transition: opacity 100ms ease-in-out;\n  background: ${s(\"backgroundSecondary\")};\n  padding-left: 4px;\n\n  &:has(${Action}[aria-expanded=\"true\"]) {\n    opacity: 1;\n  }\n`;\n\nconst ReactionListContainer = styled(Flex)`\n  margin-top: 6px;\n`;\n\nconst Meta = styled(Text)`\n  margin-bottom: 2px;\n\n  em {\n    font-weight: 600;\n    font-style: normal;\n  }\n`;\n\nexport const Bubble = styled(Flex)<{\n  $firstOfThread?: boolean;\n  $firstOfAuthor?: boolean;\n  $lastOfThread?: boolean;\n  $canReply?: boolean;\n  $focused?: boolean;\n  $dir?: \"rtl\" | \"ltr\";\n}>`\n  position: relative;\n  flex-grow: 1;\n  font-size: 16px;\n  color: ${s(\"text\")};\n  background: ${s(\"backgroundSecondary\")};\n  min-width: 2em;\n  margin-bottom: 1px;\n  padding: 8px 12px;\n  transition: color 100ms ease-out, background 100ms ease-out;\n\n  ${({ $lastOfThread, $canReply }) =>\n    $lastOfThread &&\n    !$canReply &&\n    \"border-bottom-left-radius: 8px; border-bottom-right-radius: 8px\"};\n\n  ${({ $firstOfThread }) =>\n    $firstOfThread &&\n    \"border-top-left-radius: 8px; border-top-right-radius: 8px\"};\n\n  margin-left: ${(props) =>\n    props.$firstOfAuthor || props.$dir === \"rtl\" ? 0 : 32}px;\n  margin-right: ${(props) =>\n    props.$firstOfAuthor || props.$dir !== \"rtl\" ? 0 : 32}px;\n\n  p:last-child {\n    margin-bottom: 0;\n  }\n\n  &: ${hover} ${Actions} {\n    opacity: 1;\n  }\n\n  ${breakpoint(\"tablet\")`\n    font-size: 15px;\n  `}\n`;\n\nexport default observer(CommentThreadItem);\n","import { m } from \"framer-motion\";\nimport { action } from \"mobx\";\nimport { observer } from \"mobx-react\";\nimport { ImageIcon } from \"outline-icons\";\nimport * as React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { VisuallyHidden } from \"reakit\";\nimport { toast } from \"sonner\";\nimport { useTheme } from \"styled-components\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { ProsemirrorData } from \"@shared/types\";\nimport { getEventFiles } from \"@shared/utils/files\";\nimport { AttachmentValidation, CommentValidation } from \"@shared/validations\";\nimport Comment from \"~/models/Comment\";\nimport { Avatar } from \"~/components/Avatar\";\nimport ButtonSmall from \"~/components/ButtonSmall\";\nimport { useDocumentContext } from \"~/components/DocumentContext\";\nimport Flex from \"~/components/Flex\";\nimport NudeButton from \"~/components/NudeButton\";\nimport Tooltip from \"~/components/Tooltip\";\nimport type { Editor as SharedEditor } from \"~/editor\";\nimport useCurrentUser from \"~/hooks/useCurrentUser\";\nimport useOnClickOutside from \"~/hooks/useOnClickOutside\";\nimport useStores from \"~/hooks/useStores\";\nimport CommentEditor from \"./CommentEditor\";\nimport { Bubble } from \"./CommentThreadItem\";\nimport { HighlightedText } from \"./HighlightText\";\n\ntype Props = {\n  /** Callback when the form is submitted. */\n  onSubmit?: () => void;\n  /** Callback when the draft should be saved. */\n  onSaveDraft: (data: ProsemirrorData | undefined) => void;\n  /** A draft comment for this thread. */\n  draft?: ProsemirrorData;\n  /** The document that the comment will be associated with */\n  documentId: string;\n  /** The comment thread that the comment will be associated with */\n  thread?: Comment;\n  /** Placeholder text to display in the editor */\n  placeholder?: string;\n  /** Whether to focus the editor on mount */\n  autoFocus?: boolean;\n  /** Whether to render the comment form as standalone, rather than as a reply  */\n  standalone?: boolean;\n  /** Whether to animate the comment form in and out */\n  animatePresence?: boolean;\n  /** Text to highlight at the top of the comment */\n  highlightedText?: string;\n  /** The text direction of the editor */\n  dir?: \"rtl\" | \"ltr\";\n  /** Callback when the editor is focused */\n  onFocus?: () => void;\n  /** Callback when the editor is blurred */\n  onBlur?: () => void;\n};\n\nfunction CommentForm({\n  documentId,\n  thread,\n  draft,\n  onSubmit,\n  onSaveDraft,\n  onFocus,\n  onBlur,\n  autoFocus,\n  standalone,\n  placeholder,\n  animatePresence,\n  highlightedText,\n  dir,\n  ...rest\n}: Props) {\n  const { editor } = useDocumentContext();\n  const formRef = React.useRef<HTMLFormElement>(null);\n  const editorRef = React.useRef<SharedEditor>(null);\n  const [forceRender, setForceRender] = React.useState(0);\n  const [inputFocused, setInputFocused] = React.useState(autoFocus);\n  const file = React.useRef<HTMLInputElement>(null);\n  const theme = useTheme();\n  const { t } = useTranslation();\n  const { comments } = useStores();\n  const user = useCurrentUser();\n\n  const reset = React.useCallback(async () => {\n    const isEmpty = editorRef.current?.isEmpty() ?? true;\n\n    if (isEmpty && thread?.isNew) {\n      if (thread.id) {\n        editor?.removeComment(thread.id);\n      }\n      await thread.delete();\n    }\n  }, [editor, thread]);\n\n  useOnClickOutside(formRef, reset);\n\n  const handleCreateComment = action(async (event: React.FormEvent) => {\n    event.preventDefault();\n\n    onSaveDraft(undefined);\n    setForceRender((s) => ++s);\n    setInputFocused(false);\n\n    const comment =\n      thread ??\n      new Comment(\n        {\n          createdAt: new Date().toISOString(),\n          documentId,\n          data: draft,\n          reactions: [],\n        },\n        comments\n      );\n\n    comment\n      .save({\n        documentId,\n        data: draft,\n      })\n      .then(() => onSubmit?.())\n      .catch(() => {\n        comment.isNew = true;\n        toast.error(t(\"Error creating comment\"));\n      });\n\n    // optimistically update the comment model\n    comment.isNew = false;\n    comment.createdById = user.id;\n    comment.createdBy = user;\n  });\n\n  const handleCreateReply = action(async (event: React.FormEvent) => {\n    event.preventDefault();\n    if (!draft) {\n      return;\n    }\n\n    onSaveDraft(undefined);\n    setForceRender((s) => ++s);\n\n    const comment = new Comment(\n      {\n        createdAt: new Date().toISOString(),\n        parentCommentId: thread?.id,\n        documentId,\n        data: draft,\n        reactions: [],\n      },\n      comments\n    );\n\n    comment.id = uuidv4();\n    comments.add(comment);\n\n    comment\n      .save()\n      .then(() => onSubmit?.())\n      .catch(() => {\n        comments.remove(comment.id);\n        comment.isNew = true;\n        toast.error(t(\"Error creating comment\"));\n      });\n\n    // optimistically update the comment model\n    comment.isNew = false;\n    comment.createdById = user.id;\n    comment.createdBy = user;\n\n    // re-focus the comment editor\n    setTimeout(() => {\n      editorRef.current?.focusAtStart();\n    }, 0);\n  });\n\n  const handleChange = (\n    value: (asString: boolean, trim: boolean) => ProsemirrorData\n  ) => {\n    const text = value(true, true);\n    onSaveDraft(text ? value(false, true) : undefined);\n  };\n\n  const handleSave = () => {\n    formRef.current?.dispatchEvent(\n      new Event(\"submit\", { cancelable: true, bubbles: true })\n    );\n  };\n\n  const handleClickPadding = () => {\n    if (editorRef.current?.isBlurred) {\n      editorRef.current?.focusAtStart();\n    }\n  };\n\n  const handleCancel = async () => {\n    onSaveDraft(undefined);\n    setForceRender((s) => ++s);\n    setInputFocused(false);\n    await reset();\n  };\n\n  const handleFocus = () => {\n    onFocus?.();\n    setInputFocused(true);\n  };\n\n  const handleBlur = () => {\n    onBlur?.();\n  };\n\n  const handleFilePicked = (event: React.ChangeEvent<HTMLInputElement>) => {\n    event.stopPropagation();\n    event.preventDefault();\n\n    const files = getEventFiles(event);\n    if (!files.length) {\n      return;\n    }\n\n    return editorRef.current?.insertFiles(event, files);\n  };\n\n  const handleImageUpload = (event: React.MouseEvent<HTMLButtonElement>) => {\n    event.stopPropagation();\n    event.preventDefault();\n    file.current?.click();\n  };\n\n  // Focus the editor when it's a new comment just mounted, after a delay as the\n  // editor is mounted within a fade transition.\n  React.useEffect(() => {\n    setTimeout(() => {\n      if (autoFocus) {\n        editorRef.current?.focusAtStart();\n      }\n    }, 0);\n  }, [autoFocus]);\n\n  const presence = animatePresence\n    ? {\n        initial: {\n          opacity: 0,\n          marginBottom: -100,\n        },\n        animate: {\n          opacity: 1,\n          marginBottom: 0,\n          transition: {\n            type: \"spring\",\n            bounce: 0.1,\n          },\n        },\n        exit: {\n          opacity: 0,\n          marginBottom: -100,\n          scale: 0.98,\n        },\n      }\n    : {};\n\n  return (\n    <m.form\n      ref={formRef}\n      onSubmit={thread?.isNew ? handleCreateComment : handleCreateReply}\n      {...presence}\n      {...rest}\n    >\n      <VisuallyHidden>\n        <input\n          ref={file}\n          type=\"file\"\n          onChange={handleFilePicked}\n          accept={AttachmentValidation.imageContentTypes.join(\", \")}\n          tabIndex={-1}\n        />\n      </VisuallyHidden>\n      <Flex gap={8} align=\"flex-start\" reverse={dir === \"rtl\"}>\n        <Avatar model={user} size={24} style={{ marginTop: 8 }} />\n        <Bubble\n          gap={10}\n          onClick={handleClickPadding}\n          $lastOfThread\n          $firstOfAuthor\n          $firstOfThread={standalone}\n          column\n        >\n          {highlightedText && (\n            <HighlightedText>{highlightedText}</HighlightedText>\n          )}\n          <CommentEditor\n            key={`${forceRender}`}\n            ref={editorRef}\n            defaultValue={draft}\n            onChange={handleChange}\n            onSave={handleSave}\n            onFocus={handleFocus}\n            onBlur={handleBlur}\n            maxLength={CommentValidation.maxLength}\n            placeholder={\n              placeholder ||\n              // isNew is only the case for comments that exist in draft state,\n              // they are marks in the document, but not yet saved to the db.\n              (thread?.isNew\n                ? `${t(\"Add a comment\")}…`\n                : `${t(\"Add a reply\")}…`)\n            }\n          />\n          {(inputFocused || draft) && (\n            <Flex justify=\"space-between\" reverse={dir === \"rtl\"} gap={8}>\n              <Flex gap={8}>\n                <ButtonSmall type=\"submit\" borderOnHover>\n                  {thread && !thread.isNew ? t(\"Reply\") : t(\"Post\")}\n                </ButtonSmall>\n                <ButtonSmall onClick={handleCancel} neutral borderOnHover>\n                  {t(\"Cancel\")}\n                </ButtonSmall>\n              </Flex>\n              <Tooltip content={t(\"Upload image\")} placement=\"top\">\n                <NudeButton onClick={handleImageUpload}>\n                  <ImageIcon color={theme.textTertiary} />\n                </NudeButton>\n              </Tooltip>\n            </Flex>\n          )}\n        </Bubble>\n      </Flex>\n    </m.form>\n  );\n}\n\nexport default observer(CommentForm);\n","import queryString from \"query-string\";\nimport React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { s } from \"@shared/styles\";\nimport { UserPreference } from \"@shared/types\";\nimport { InputSelectNew, Option } from \"~/components/InputSelectNew\";\nimport useCurrentUser from \"~/hooks/useCurrentUser\";\nimport { useLocationSidebarContext } from \"~/hooks/useLocationSidebarContext\";\nimport useQuery from \"~/hooks/useQuery\";\nimport { CommentSortType } from \"~/types\";\n\nconst CommentSortMenu = () => {\n  const { t } = useTranslation();\n  const location = useLocation();\n  const sidebarContext = useLocationSidebarContext();\n  const history = useHistory();\n  const user = useCurrentUser();\n  const params = useQuery();\n\n  const preferredSortType = user.getPreference(\n    UserPreference.SortCommentsByOrderInDocument\n  )\n    ? CommentSortType.OrderInDocument\n    : CommentSortType.MostRecent;\n\n  const viewingResolved = params.get(\"resolved\") === \"\";\n  const value = viewingResolved ? \"resolved\" : preferredSortType;\n\n  const handleChange = React.useCallback(\n    (val: string) => {\n      if (val === \"resolved\") {\n        history.push({\n          search: queryString.stringify({\n            ...queryString.parse(location.search),\n            resolved: \"\",\n          }),\n          pathname: location.pathname,\n          state: { sidebarContext },\n        });\n        return;\n      }\n\n      const sortType = val as CommentSortType;\n      if (sortType !== preferredSortType) {\n        user.setPreference(\n          UserPreference.SortCommentsByOrderInDocument,\n          sortType === CommentSortType.OrderInDocument\n        );\n        void user.save();\n      }\n\n      history.push({\n        search: queryString.stringify({\n          ...queryString.parse(location.search),\n          resolved: undefined,\n        }),\n        pathname: location.pathname,\n        state: { sidebarContext },\n      });\n    },\n    [history, location, sidebarContext, user, preferredSortType]\n  );\n\n  const options: Option[] = React.useMemo(\n    () =>\n      [\n        {\n          type: \"item\",\n          label: t(\"Most recent\"),\n          value: CommentSortType.MostRecent,\n        },\n        {\n          type: \"item\",\n          label: t(\"Order in doc\"),\n          value: CommentSortType.OrderInDocument,\n        },\n        {\n          type: \"separator\",\n        },\n        {\n          type: \"item\",\n          label: t(\"Resolved\"),\n          value: \"resolved\",\n        },\n      ] satisfies Option[],\n    [t]\n  );\n\n  return (\n    <Select\n      options={options}\n      value={value}\n      onChange={handleChange}\n      ariaLabel={t(\"Sort comments\")}\n      label={t(\"Sort comments\")}\n      hideLabel\n      borderOnHover\n    />\n  );\n};\n\nconst Select = styled(InputSelectNew)`\n  color: ${s(\"textSecondary\")};\n`;\n\nexport default CommentSortMenu;\n","import { observer } from \"mobx-react\";\nimport { darken } from \"polished\";\nimport * as React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport scrollIntoView from \"scroll-into-view-if-needed\";\nimport styled, { css } from \"styled-components\";\nimport breakpoint from \"styled-components-breakpoint\";\nimport { s, hover } from \"@shared/styles\";\nimport { ProsemirrorData } from \"@shared/types\";\nimport { ProsemirrorHelper } from \"@shared/utils/ProsemirrorHelper\";\nimport Comment from \"~/models/Comment\";\nimport Document from \"~/models/Document\";\nimport { AvatarSize } from \"~/components/Avatar\";\nimport { useDocumentContext } from \"~/components/DocumentContext\";\nimport Facepile from \"~/components/Facepile\";\nimport Fade from \"~/components/Fade\";\nimport { ResizingHeightContainer } from \"~/components/ResizingHeightContainer\";\nimport { useLocationSidebarContext } from \"~/hooks/useLocationSidebarContext\";\nimport useOnClickOutside from \"~/hooks/useOnClickOutside\";\nimport usePersistedState from \"~/hooks/usePersistedState\";\nimport usePolicy from \"~/hooks/usePolicy\";\nimport useStores from \"~/hooks/useStores\";\nimport { sidebarAppearDuration } from \"~/styles/animations\";\nimport CommentForm from \"./CommentForm\";\nimport CommentThreadItem from \"./CommentThreadItem\";\n\ntype Props = {\n  /** The document that this comment thread belongs to */\n  document: Document;\n  /** The root comment to render */\n  comment: Comment;\n  /** Whether the thread is focused */\n  focused: boolean;\n  /** Whether the thread is displayed in a recessed/backgrounded state */\n  recessed: boolean;\n  /** Enable scroll for the comments container */\n  enableScroll: () => void;\n  /** Disable scroll for the comments container */\n  disableScroll: () => void;\n  /** Number of replies before collapsing */\n  collapseThreshold?: number;\n  /** Number of replies to display when collapsed */\n  collapseNumDisplayed?: number;\n};\n\nfunction CommentThread({\n  comment: thread,\n  document,\n  recessed,\n  focused,\n  enableScroll,\n  disableScroll,\n  collapseThreshold = 5,\n  collapseNumDisplayed = 3,\n}: Props) {\n  const [scrollOnMount] = React.useState(focused && !window.location.hash);\n  const { editor } = useDocumentContext();\n  const { comments } = useStores();\n  const topRef = React.useRef<HTMLDivElement>(null);\n  const replyRef = React.useRef<HTMLDivElement>(null);\n  const { t } = useTranslation();\n  const history = useHistory();\n  const location = useLocation();\n  const sidebarContext = useLocationSidebarContext();\n  const [autoFocus, setAutoFocus] = React.useState(thread.isNew);\n\n  const can = usePolicy(document);\n\n  const [draft, onSaveDraft] = usePersistedState<ProsemirrorData | undefined>(\n    `draft-${document.id}-${thread.id}`,\n    undefined\n  );\n\n  const canReply = can.comment && !thread.isResolved;\n\n  const highlightedText = ProsemirrorHelper.getAnchorTextForComment(\n    editor?.getComments() ?? [],\n    thread.id\n  );\n\n  const commentsInThread = comments\n    .inThread(thread.id)\n    .filter((comment) => !comment.isNew);\n\n  const [collapse, setCollapse] = React.useState(() => {\n    const numReplies = commentsInThread.length - 1;\n    if (numReplies >= collapseThreshold) {\n      return {\n        begin: 1,\n        final: commentsInThread.length - collapseNumDisplayed - 1,\n      };\n    }\n    return null;\n  });\n\n  useOnClickOutside(topRef, (event) => {\n    if (\n      focused &&\n      !(event.target as HTMLElement).classList.contains(\"comment\") &&\n      event.defaultPrevented === false\n    ) {\n      history.replace({\n        search: location.search,\n        pathname: location.pathname,\n        state: {\n          commentId: undefined,\n          sidebarContext,\n        },\n      });\n    }\n  });\n\n  const handleSubmit = React.useCallback(() => {\n    editor?.updateComment(thread.id, { draft: false });\n  }, [editor, thread.id]);\n\n  const handleClickThread = () => {\n    history.replace({\n      // Clear any commentId from the URL when explicitly focusing a thread\n      search: thread.isResolved ? \"resolved=\" : \"\",\n      pathname: location.pathname.replace(/\\/history$/, \"\"),\n      state: {\n        commentId: thread.id,\n        sidebarContext,\n      },\n    });\n  };\n\n  const handleClickExpand = (ev: React.SyntheticEvent) => {\n    ev.stopPropagation();\n    setCollapse(null);\n  };\n\n  const renderShowMore = (collapse: { begin: number; final: number }) => {\n    const count = collapse.final - collapse.begin + 1;\n    const createdBy = commentsInThread\n      .slice(collapse.begin, collapse.final + 1)\n      .map((c) => c.createdBy);\n    const users = Array.from(new Set(createdBy));\n    const limit = 3;\n    const overflow = users.length - limit;\n\n    return (\n      <ShowMore onClick={handleClickExpand} key=\"show-more\">\n        {t(\"Show {{ count }} reply\", { count })}\n        <Facepile\n          users={users}\n          limit={limit}\n          overflow={overflow}\n          size={AvatarSize.Medium}\n        />\n      </ShowMore>\n    );\n  };\n\n  React.useEffect(() => {\n    if (!focused && autoFocus) {\n      setAutoFocus(false);\n    }\n  }, [focused, autoFocus]);\n\n  React.useEffect(() => {\n    if (focused) {\n      if (scrollOnMount) {\n        setTimeout(() => {\n          if (!topRef.current) {\n            return;\n          }\n          scrollIntoView(topRef.current, {\n            scrollMode: \"if-needed\",\n            behavior: \"auto\",\n            block: \"nearest\",\n            boundary: (parent) =>\n              // Prevents body and other parent elements from being scrolled\n              parent.id !== \"comments\",\n          });\n        }, sidebarAppearDuration);\n      } else {\n        setTimeout(() => {\n          if (!replyRef.current) {\n            return;\n          }\n          scrollIntoView(replyRef.current, {\n            scrollMode: \"if-needed\",\n            behavior: \"smooth\",\n            block: \"center\",\n            boundary: (parent) =>\n              // Prevents body and other parent elements from being scrolled\n              parent.id !== \"comments\",\n          });\n        }, 0);\n      }\n\n      const getCommentMarkElement = () =>\n        window.document?.getElementById(`comment-${thread.id}`);\n      const isMarkVisible = !!getCommentMarkElement();\n\n      setTimeout(\n        () => {\n          getCommentMarkElement()?.scrollIntoView({\n            behavior: \"smooth\",\n            block: \"center\",\n          });\n        },\n        isMarkVisible ? 0 : sidebarAppearDuration\n      );\n    }\n  }, [focused, scrollOnMount, thread.id]);\n\n  return (\n    <Thread\n      ref={topRef}\n      $focused={focused}\n      $recessed={recessed}\n      $dir={document.dir}\n      onClick={handleClickThread}\n    >\n      {commentsInThread.map((comment, index) => {\n        if (collapse !== null) {\n          if (index === collapse.begin) {\n            return renderShowMore(collapse);\n          } else if (index > collapse.begin && index <= collapse.final) {\n            return null;\n          }\n        }\n\n        const firstOfAuthor =\n          index === 0 ||\n          (collapse && index === collapse.final + 1) ||\n          comment.createdById !== commentsInThread[index - 1].createdById;\n        const lastOfAuthor =\n          index === commentsInThread.length - 1 ||\n          comment.createdById !== commentsInThread[index + 1].createdById;\n\n        return (\n          <CommentThreadItem\n            highlightedText={index === 0 ? highlightedText : undefined}\n            comment={comment}\n            onDelete={editor?.removeComment}\n            onUpdate={editor?.updateComment}\n            key={comment.id}\n            firstOfThread={index === 0}\n            lastOfThread={index === commentsInThread.length - 1 && !draft}\n            canReply={focused && can.comment}\n            firstOfAuthor={firstOfAuthor}\n            lastOfAuthor={lastOfAuthor}\n            previousCommentCreatedAt={commentsInThread[index - 1]?.createdAt}\n            dir={document.dir}\n            enableScroll={enableScroll}\n            disableScroll={disableScroll}\n          />\n        );\n      })}\n\n      <ResizingHeightContainer hideOverflow={false} ref={replyRef}>\n        {(focused || draft || commentsInThread.length === 0) && canReply && (\n          <Fade timing={100}>\n            <CommentForm\n              onSubmit={handleSubmit}\n              onSaveDraft={onSaveDraft}\n              draft={draft}\n              documentId={document.id}\n              thread={thread}\n              standalone={commentsInThread.length === 0}\n              dir={document.dir}\n              autoFocus={autoFocus}\n              highlightedText={\n                commentsInThread.length === 0 ? highlightedText : undefined\n              }\n            />\n          </Fade>\n        )}\n      </ResizingHeightContainer>\n      {!focused && !recessed && !draft && canReply && (\n        <Reply onClick={() => setAutoFocus(true)}>{t(\"Reply\")}…</Reply>\n      )}\n    </Thread>\n  );\n}\n\nconst Reply = styled.button`\n  border: 0;\n  padding: 8px;\n  margin: 0;\n  background: none;\n  color: ${s(\"textTertiary\")};\n  font-size: 14px;\n  -webkit-appearance: none;\n  cursor: var(--pointer);\n  transition: opacity 100ms ease-out;\n  position: absolute;\n  text-align: left;\n  width: 100%;\n  bottom: -30px;\n  left: 32px;\n\n  ${breakpoint(\"tablet\")`\n    opacity: 0;\n  `}\n`;\n\nconst ShowMore = styled.div<{ $dir?: \"rtl\" | \"ltr\" }>`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 1px;\n  margin-left: ${(props) => (props.$dir === \"rtl\" ? 0 : 32)}px;\n  margin-right: ${(props) => (props.$dir !== \"rtl\" ? 0 : 32)}px;\n  padding: 8px 12px;\n  color: ${s(\"textTertiary\")};\n  background: ${(props) => darken(0.015, props.theme.backgroundSecondary)};\n  cursor: var(--pointer);\n  font-size: 13px;\n\n  &: ${hover} {\n    color: ${s(\"textSecondary\")};\n    background: ${s(\"backgroundTertiary\")};\n  }\n\n  * {\n    border-color: ${(props) => darken(0.015, props.theme.backgroundSecondary)};\n  }\n`;\n\nconst Thread = styled.div<{\n  $focused: boolean;\n  $recessed: boolean;\n  $dir?: \"rtl\" | \"ltr\";\n}>`\n  margin: 12px 12px 32px;\n  margin-right: ${(props) => (props.$dir !== \"rtl\" ? \"18px\" : \"12px\")};\n  margin-left: ${(props) => (props.$dir === \"rtl\" ? \"18px\" : \"12px\")};\n  position: relative;\n  transition: opacity 100ms ease-out;\n\n  &: ${hover} {\n    ${Reply} {\n      opacity: 1;\n    }\n  }\n\n  ${(props) =>\n    props.$recessed &&\n    css`\n      opacity: 0.35;\n      cursor: default;\n    `}\n`;\n\nexport default observer(CommentThread);\n","import { AnimatePresence } from \"framer-motion\";\nimport { observer } from \"mobx-react\";\nimport { ArrowIcon } from \"outline-icons\";\nimport * as React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useRouteMatch } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { ProsemirrorData, UserPreference } from \"@shared/types\";\nimport ButtonSmall from \"~/components/ButtonSmall\";\nimport { useDocumentContext } from \"~/components/DocumentContext\";\nimport Empty from \"~/components/Empty\";\nimport Fade from \"~/components/Fade\";\nimport Flex from \"~/components/Flex\";\nimport Scrollable from \"~/components/Scrollable\";\nimport useBoolean from \"~/hooks/useBoolean\";\nimport useCurrentUser from \"~/hooks/useCurrentUser\";\nimport useFocusedComment from \"~/hooks/useFocusedComment\";\nimport useKeyDown from \"~/hooks/useKeyDown\";\nimport usePersistedState from \"~/hooks/usePersistedState\";\nimport usePolicy from \"~/hooks/usePolicy\";\nimport useQuery from \"~/hooks/useQuery\";\nimport useStores from \"~/hooks/useStores\";\nimport { CommentSortOption, CommentSortType } from \"~/types\";\nimport CommentForm from \"./CommentForm\";\nimport CommentSortMenu from \"./CommentSortMenu\";\nimport CommentThread from \"./CommentThread\";\nimport Sidebar from \"./SidebarLayout\";\n\nfunction Comments() {\n  const { ui, comments, documents } = useStores();\n  const user = useCurrentUser();\n  const { editor, isEditorInitialized } = useDocumentContext();\n  const { t } = useTranslation();\n  const match = useRouteMatch<{ documentSlug: string }>();\n  const params = useQuery();\n  // We need to control scroll behaviour when reaction picker is opened / closed.\n  const [scrollable, enableScroll, disableScroll] = useBoolean(true);\n  const document = documents.getByUrl(match.params.documentSlug);\n  const focusedComment = useFocusedComment();\n  const can = usePolicy(document);\n\n  const scrollableRef = React.useRef<HTMLDivElement | null>(null);\n  const prevThreadCount = React.useRef(0);\n  const isAtBottom = React.useRef(true);\n  const [showJumpToRecentBtn, setShowJumpToRecentBtn] = React.useState(false);\n\n  useKeyDown(\"Escape\", () => document && ui.set({ commentsExpanded: false }));\n\n  const [draft, onSaveDraft] = usePersistedState<ProsemirrorData | undefined>(\n    `draft-${document?.id}-new`,\n    undefined\n  );\n\n  const sortOption: CommentSortOption = user.getPreference(\n    UserPreference.SortCommentsByOrderInDocument\n  )\n    ? {\n        type: CommentSortType.OrderInDocument,\n        referencedCommentIds: editor?.getComments().map((c) => c.id) ?? [],\n      }\n    : { type: CommentSortType.MostRecent };\n\n  const viewingResolved = params.get(\"resolved\") === \"\";\n  const threads = !document\n    ? []\n    : viewingResolved\n    ? comments.resolvedThreadsInDocument(document.id, sortOption)\n    : comments.unresolvedThreadsInDocument(document.id, sortOption);\n  const hasComments = threads.length > 0;\n\n  const scrollToBottom = () => {\n    if (scrollableRef.current) {\n      scrollableRef.current.scrollTo({\n        top: scrollableRef.current.scrollHeight,\n      });\n    }\n  };\n\n  const handleScroll = () => {\n    const BUFFER_PX = 50;\n\n    if (scrollableRef.current) {\n      const sh = scrollableRef.current.scrollHeight;\n      const st = scrollableRef.current.scrollTop;\n      const ch = scrollableRef.current.clientHeight;\n      isAtBottom.current = Math.abs(sh - (st + ch)) <= BUFFER_PX;\n\n      if (isAtBottom.current) {\n        setShowJumpToRecentBtn(false);\n      }\n    }\n  };\n\n  React.useEffect(() => {\n    // Handles: 1. on refresh 2. when switching sort setting\n    const readyToDisplay = Boolean(document && isEditorInitialized);\n    if (\n      readyToDisplay &&\n      sortOption.type === CommentSortType.MostRecent &&\n      !viewingResolved\n    ) {\n      scrollToBottom();\n    }\n  }, [sortOption.type, document, isEditorInitialized, viewingResolved]);\n\n  React.useEffect(() => {\n    setShowJumpToRecentBtn(false);\n    if (sortOption.type === CommentSortType.MostRecent && !viewingResolved) {\n      const commentsAdded = threads.length > prevThreadCount.current;\n      if (commentsAdded) {\n        if (isAtBottom.current) {\n          scrollToBottom(); // Remain pinned to bottom on new comments\n        } else {\n          setShowJumpToRecentBtn(true);\n        }\n      }\n    }\n    prevThreadCount.current = threads.length;\n  }, [sortOption.type, threads.length, viewingResolved]);\n\n  if (!document || !isEditorInitialized) {\n    return null;\n  }\n\n  return (\n    <Sidebar\n      title={\n        <Flex align=\"center\" justify=\"space-between\" auto>\n          <span>{t(\"Comments\")}</span>\n          <CommentSortMenu />\n        </Flex>\n      }\n      onClose={() => ui.set({ commentsExpanded: false })}\n      scrollable={false}\n    >\n      <Scrollable\n        id=\"comments\"\n        bottomShadow={!focusedComment}\n        hiddenScrollbars\n        topShadow\n        overflow={scrollable ? \"auto\" : \"hidden\"}\n        style={{ overflowX: \"hidden\" }}\n        ref={scrollableRef}\n        onScroll={handleScroll}\n      >\n        <Wrapper $hasComments={hasComments}>\n          {hasComments ? (\n            threads.map((thread) => (\n              <CommentThread\n                key={thread.id}\n                comment={thread}\n                document={document}\n                recessed={!!focusedComment && focusedComment.id !== thread.id}\n                focused={focusedComment?.id === thread.id}\n                enableScroll={enableScroll}\n                disableScroll={disableScroll}\n              />\n            ))\n          ) : (\n            <NoComments align=\"center\" justify=\"center\" auto>\n              <PositionedEmpty>\n                {viewingResolved\n                  ? t(\"No resolved comments\")\n                  : t(\"No comments yet\")}\n              </PositionedEmpty>\n            </NoComments>\n          )}\n          {showJumpToRecentBtn && (\n            <Fade>\n              <JumpToRecent onClick={scrollToBottom}>\n                <Flex align=\"center\">\n                  {t(\"New comments\")}&nbsp;\n                  <ArrowDownIcon size={20} />\n                </Flex>\n              </JumpToRecent>\n            </Fade>\n          )}\n        </Wrapper>\n      </Scrollable>\n      <AnimatePresence initial={false}>\n        {!focusedComment && can.comment && !viewingResolved && (\n          <NewCommentForm\n            draft={draft}\n            onSaveDraft={onSaveDraft}\n            documentId={document.id}\n            placeholder={`${t(\"Add a comment\")}…`}\n            autoFocus={false}\n            dir={document.dir}\n            animatePresence\n            standalone\n          />\n        )}\n      </AnimatePresence>\n    </Sidebar>\n  );\n}\n\nconst PositionedEmpty = styled(Empty)`\n  position: absolute;\n  top: calc(50vh - 30px);\n  transform: translateY(-50%);\n`;\n\nconst NoComments = styled(Flex)`\n  padding-bottom: 65px;\n  height: 100%;\n`;\n\nconst Wrapper = styled.div<{ $hasComments: boolean }>`\n  height: ${(props) => (props.$hasComments ? \"auto\" : \"100%\")};\n`;\n\nconst JumpToRecent = styled(ButtonSmall)`\n  position: sticky;\n  bottom: 12px;\n  left: 50%;\n  transform: translateX(-50%);\n  opacity: 0.8;\n  border-radius: 12px;\n  padding: 0 4px;\n\n  &:hover {\n    opacity: 1;\n  }\n`;\n\nconst ArrowDownIcon = styled(ArrowIcon)`\n  transform: rotate(90deg);\n`;\n\nconst NewCommentForm = styled(CommentForm)<{ dir?: \"ltr\" | \"rtl\" }>`\n  padding: 12px;\n  padding-right: ${(props) => (props.dir !== \"rtl\" ? \"18px\" : \"12px\")};\n  padding-left: ${(props) => (props.dir === \"rtl\" ? \"18px\" : \"12px\")};\n`;\n\nexport default observer(Comments);\n"],"file":"assets/Comments.HH_GK8c1.js"}