import{i as e}from"./init.3mU4lpXP.js";class InternMap extends Map{constructor(e,n=keyof){if(super(),Object.defineProperties(this,{_intern:{value:new Map},_key:{value:n}}),null!=e)for(const[t,r]of e)this.set(t,r)}get(e){return super.get(intern_get(this,e))}has(e){return super.has(intern_get(this,e))}set(e,n){return super.set(function intern_set({_intern:e,_key:n},t){const r=n(t);return e.has(r)?e.get(r):(e.set(r,t),t)}(this,e),n)}delete(e){return super.delete(function intern_delete({_intern:e,_key:n},t){const r=n(t);e.has(r)&&(t=e.get(r),e.delete(r));return t}(this,e))}}function intern_get({_intern:e,_key:n},t){const r=n(t);return e.has(r)?e.get(r):t}function keyof(e){return null!==e&&"object"==typeof e?e.valueOf():e}const n=Symbol("implicit");function ordinal(){var t=new InternMap,r=[],s=[],i=n;function scale(e){let o=t.get(e);if(void 0===o){if(i!==n)return i;t.set(e,o=r.push(e)-1)}return s[o%s.length]}return scale.domain=function(e){if(!arguments.length)return r.slice();r=[],t=new InternMap;for(const n of e)t.has(n)||t.set(n,r.push(n)-1);return scale},scale.range=function(e){return arguments.length?(s=Array.from(e),scale):s.slice()},scale.unknown=function(e){return arguments.length?(i=e,scale):i},scale.copy=function(){return ordinal(r,s).unknown(i)},e.apply(scale,arguments),scale}export{ordinal as o};
