{"version":3,"file":"Groups.NrUrJvo7.js","sources":["../../../app/menus/GroupMemberMenu.tsx","../../../app/scenes/Settings/components/GroupDialogs.tsx","../../../app/menus/GroupMenu.tsx","../../../app/scenes/Settings/components/GroupsTable.tsx","../../../app/scenes/Settings/Groups.tsx"],"sourcesContent":["import { observer } from \"mobx-react\";\nimport * as React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useMenuState } from \"reakit/Menu\";\nimport ContextMenu from \"~/components/ContextMenu\";\nimport OverflowMenuButton from \"~/components/ContextMenu/OverflowMenuButton\";\nimport Template from \"~/components/ContextMenu/Template\";\n\ntype Props = {\n  onRemove: () => void;\n};\n\nfunction GroupMemberMenu({ onRemove }: Props) {\n  const { t } = useTranslation();\n  const menu = useMenuState({\n    modal: true,\n  });\n  return (\n    <>\n      <OverflowMenuButton aria-label={t(\"Show menu\")} {...menu} />\n      <ContextMenu {...menu} aria-label={t(\"Group member options\")}>\n        <Template\n          {...menu}\n          items={[\n            {\n              type: \"button\",\n              dangerous: true,\n              title: t(\"Remove\"),\n              onClick: onRemove,\n            },\n          ]}\n        />\n      </ContextMenu>\n    </>\n  );\n}\n\nexport default observer(GroupMemberMenu);\n","import debounce from \"lodash/debounce\";\nimport { observer } from \"mobx-react\";\nimport { PlusIcon } from \"outline-icons\";\nimport React from \"react\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport { toast } from \"sonner\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport Group from \"~/models/Group\";\nimport User from \"~/models/User\";\nimport Invite from \"~/scenes/Invite\";\nimport { Avatar, AvatarSize } from \"~/components/Avatar\";\nimport Badge from \"~/components/Badge\";\nimport Button from \"~/components/Button\";\nimport ButtonLink from \"~/components/ButtonLink\";\nimport ConfirmationDialog from \"~/components/ConfirmationDialog\";\nimport DelayedMount from \"~/components/DelayedMount\";\nimport Empty from \"~/components/Empty\";\nimport Flex from \"~/components/Flex\";\nimport Input from \"~/components/Input\";\nimport PlaceholderList from \"~/components/List/Placeholder\";\nimport PaginatedList from \"~/components/PaginatedList\";\nimport { ListItem } from \"~/components/Sharing/components/ListItem\";\nimport Subheading from \"~/components/Subheading\";\nimport Text from \"~/components/Text\";\nimport Time from \"~/components/Time\";\nimport useCurrentTeam from \"~/hooks/useCurrentTeam\";\nimport usePolicy from \"~/hooks/usePolicy\";\nimport useRequest from \"~/hooks/useRequest\";\nimport useStores from \"~/hooks/useStores\";\nimport GroupMemberMenu from \"~/menus/GroupMemberMenu\";\n\ntype Props = {\n  group: Group;\n  onSubmit: () => void;\n};\n\nexport function CreateGroupDialog() {\n  const { dialogs, groups } = useStores();\n  const { t } = useTranslation();\n  const [name, setName] = React.useState<string | undefined>();\n  const [isSaving, setIsSaving] = React.useState(false);\n\n  const handleSubmit = React.useCallback(\n    async (ev: React.SyntheticEvent) => {\n      ev.preventDefault();\n      setIsSaving(true);\n\n      const group = new Group(\n        {\n          name,\n        },\n        groups\n      );\n\n      try {\n        await group.save();\n        dialogs.openModal({\n          title: t(\"Group members\"),\n          content: <ViewGroupMembersDialog group={group} />,\n          fullscreen: true,\n        });\n      } catch (err) {\n        toast.error(err.message);\n      } finally {\n        setIsSaving(false);\n      }\n    },\n    [t, dialogs, groups, name]\n  );\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <Text as=\"p\" type=\"secondary\">\n        <Trans>\n          Groups are for organizing your team. They work best when centered\n          around a function or a responsibility — Support or Engineering for\n          example.\n        </Trans>\n      </Text>\n      <Flex>\n        <Input\n          type=\"text\"\n          label=\"Name\"\n          onChange={(e) => setName(e.target.value)}\n          value={name}\n          required\n          autoFocus\n          flex\n        />\n      </Flex>\n      <Text as=\"p\" type=\"secondary\">\n        <Trans>You’ll be able to add people to the group next.</Trans>\n      </Text>\n\n      <Button type=\"submit\" disabled={isSaving || !name}>\n        {isSaving ? `${t(\"Creating\")}…` : t(\"Continue\")}\n      </Button>\n    </form>\n  );\n}\n\nexport function EditGroupDialog({ group, onSubmit }: Props) {\n  const { t } = useTranslation();\n  const [name, setName] = React.useState(group.name);\n  const [isSaving, setIsSaving] = React.useState(false);\n  const handleSubmit = React.useCallback(\n    async (ev: React.SyntheticEvent) => {\n      ev.preventDefault();\n      setIsSaving(true);\n\n      try {\n        await group.save({\n          name,\n        });\n        onSubmit();\n      } catch (err) {\n        toast.error(err.message);\n      } finally {\n        setIsSaving(false);\n      }\n    },\n    [group, onSubmit, name]\n  );\n\n  const handleNameChange = React.useCallback(\n    (ev: React.ChangeEvent<HTMLInputElement>) => {\n      setName(ev.target.value);\n    },\n    []\n  );\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <Text as=\"p\" type=\"secondary\">\n        <Trans>\n          You can edit the name of this group at any time, however doing so too\n          often might confuse your team mates.\n        </Trans>\n      </Text>\n      <Flex>\n        <Input\n          type=\"text\"\n          label={t(\"Name\")}\n          onChange={handleNameChange}\n          value={name}\n          required\n          autoFocus\n          flex\n        />\n      </Flex>\n\n      <Button type=\"submit\" disabled={isSaving || !name}>\n        {isSaving ? `${t(\"Saving\")}…` : t(\"Save\")}\n      </Button>\n    </form>\n  );\n}\n\nexport function DeleteGroupDialog({ group, onSubmit }: Props) {\n  const { t } = useTranslation();\n\n  const handleSubmit = async () => {\n    await group.delete();\n    onSubmit();\n  };\n\n  return (\n    <ConfirmationDialog\n      onSubmit={handleSubmit}\n      submitText={t(\"I’m sure – Delete\")}\n      savingText={`${t(\"Deleting\")}…`}\n      danger\n    >\n      <Trans\n        defaults=\"Are you sure about that? Deleting the <em>{{groupName}}</em> group will cause its members to lose access to collections and documents that it is associated with.\"\n        values={{\n          groupName: group.name,\n        }}\n        components={{\n          em: <strong />,\n        }}\n      />\n    </ConfirmationDialog>\n  );\n}\n\nexport const ViewGroupMembersDialog = observer(function ({\n  group,\n}: Pick<Props, \"group\">) {\n  const { dialogs, users, groupUsers } = useStores();\n  const { t } = useTranslation();\n  const can = usePolicy(group);\n\n  const handleAddPeople = React.useCallback(() => {\n    dialogs.openModal({\n      title: t(`Add people to {{groupName}}`, {\n        groupName: group.name,\n      }),\n      content: <AddPeopleToGroupDialog group={group} />,\n      fullscreen: true,\n    });\n  }, [t, group, dialogs]);\n\n  const handleRemoveUser = React.useCallback(\n    async (user: User) => {\n      try {\n        await groupUsers.delete({\n          groupId: group.id,\n          userId: user.id,\n        });\n        toast.success(\n          t(`{{userName}} was removed from the group`, {\n            userName: user.name,\n          }),\n          {\n            icon: <Avatar model={user} size={AvatarSize.Toast} />,\n          }\n        );\n      } catch (err) {\n        toast.error(t(\"Could not remove user\"));\n      }\n    },\n    [t, groupUsers, group.id]\n  );\n\n  return (\n    <Flex column>\n      {can.update ? (\n        <>\n          <Text as=\"p\" type=\"secondary\">\n            <Trans\n              defaults=\"Add and remove members to the <em>{{groupName}}</em> group. Members of the group will have access to any collections this group has been added to.\"\n              values={{\n                groupName: group.name,\n              }}\n              components={{\n                em: <strong />,\n              }}\n            />\n          </Text>\n          {can.update && (\n            <span>\n              <Button\n                type=\"button\"\n                onClick={handleAddPeople}\n                icon={<PlusIcon />}\n                neutral\n              >\n                {t(\"Add people\")}…\n              </Button>\n            </span>\n          )}\n        </>\n      ) : (\n        <Text as=\"p\" type=\"secondary\">\n          <Trans\n            defaults=\"Listing members of the <em>{{groupName}}</em> group.\"\n            values={{\n              groupName: group.name,\n            }}\n            components={{\n              em: <strong />,\n            }}\n          />\n        </Text>\n      )}\n\n      <Subheading>\n        <Trans>Members</Trans>\n      </Subheading>\n      <PaginatedList\n        items={users.inGroup(group.id)}\n        fetch={groupUsers.fetchPage}\n        options={{\n          id: group.id,\n        }}\n        empty={<Empty>{t(\"This group has no members.\")}</Empty>}\n        renderItem={(user: User) => (\n          <GroupMemberListItem\n            key={user.id}\n            user={user}\n            onRemove={can.update ? () => handleRemoveUser(user) : undefined}\n          />\n        )}\n      />\n    </Flex>\n  );\n});\n\nconst AddPeopleToGroupDialog = observer(function ({\n  group,\n}: Pick<Props, \"group\">) {\n  const { dialogs, users, groupUsers } = useStores();\n  const { t } = useTranslation();\n  const team = useCurrentTeam();\n  const can = usePolicy(team);\n  const [query, setQuery] = React.useState(\"\");\n\n  const debouncedFetch = React.useMemo(\n    () => debounce((q) => users.fetchPage({ query: q }), 250),\n    [users]\n  );\n\n  const handleFilter = React.useCallback(\n    (ev: React.ChangeEvent<HTMLInputElement>) => {\n      const updatedQuery = ev.target.value;\n      setQuery(updatedQuery);\n      void debouncedFetch(updatedQuery);\n    },\n    [debouncedFetch]\n  );\n\n  const handleAddUser = React.useCallback(\n    async (user: User) => {\n      try {\n        await groupUsers.create({\n          groupId: group.id,\n          userId: user.id,\n        });\n\n        toast.success(\n          t(`{{userName}} was added to the group`, {\n            userName: user.name,\n          }),\n          {\n            icon: <Avatar model={user} size={AvatarSize.Toast} />,\n          }\n        );\n      } catch (err) {\n        toast.error(t(\"Could not add user\"));\n      }\n    },\n    [t, groupUsers, group.id]\n  );\n\n  const handleInvitePeople = React.useCallback(() => {\n    const id = uuidv4();\n    dialogs.openModal({\n      id,\n      title: t(\"Invite people\"),\n      content: <Invite onSubmit={() => dialogs.closeModal(id)} />,\n    });\n  }, [t, dialogs]);\n\n  const { loading } = useRequest(\n    React.useCallback(\n      () => groupUsers.fetchAll({ id: group.id }),\n      [groupUsers, group]\n    ),\n    true\n  );\n\n  return (\n    <Flex column>\n      <Text as=\"p\" type=\"secondary\">\n        {t(\n          \"Add members below to give them access to the group. Need to add someone who’s not yet a member?\"\n        )}{\" \"}\n        {can.inviteUser ? (\n          <ButtonLink onClick={handleInvitePeople}>\n            {t(\"Invite them to {{teamName}}\", {\n              teamName: team.name,\n            })}\n          </ButtonLink>\n        ) : (\n          t(\"Ask an admin to invite them first\")\n        )}\n        .\n      </Text>\n      <Input\n        type=\"search\"\n        placeholder={`${t(\"Search by name\")}…`}\n        value={query}\n        onChange={handleFilter}\n        label={t(\"Search people\")}\n        labelHidden\n        autoFocus\n        flex\n      />\n      {loading ? (\n        <DelayedMount>\n          <PlaceholderList count={5} />\n        </DelayedMount>\n      ) : (\n        <PaginatedList\n          empty={\n            query ? (\n              <Empty>{t(\"No people matching your search\")}</Empty>\n            ) : (\n              <Empty>{t(\"No people left to add\")}</Empty>\n            )\n          }\n          items={users.notInGroup(group.id, query)}\n          fetch={query ? undefined : users.fetchPage}\n          renderItem={(item: User) => (\n            <GroupMemberListItem\n              key={item.id}\n              user={item}\n              onAdd={() => handleAddUser(item)}\n            />\n          )}\n        />\n      )}\n    </Flex>\n  );\n});\n\ntype GroupMemberListItemProps = {\n  user: User;\n  onAdd?: () => Promise<void>;\n  onRemove?: () => Promise<void>;\n};\n\nconst GroupMemberListItem = observer(function ({\n  user,\n  onRemove,\n  onAdd,\n}: GroupMemberListItemProps) {\n  const { t } = useTranslation();\n\n  return (\n    <ListItem\n      title={user.name}\n      subtitle={\n        <>\n          {user.lastActiveAt ? (\n            <Trans>\n              Active <Time dateTime={user.lastActiveAt} /> ago\n            </Trans>\n          ) : (\n            t(\"Never signed in\")\n          )}\n          {user.isInvited && <Badge>{t(\"Invited\")}</Badge>}\n          {user.isAdmin && <Badge primary={user.isAdmin}>{t(\"Admin\")}</Badge>}\n        </>\n      }\n      image={<Avatar model={user} size={AvatarSize.Large} />}\n      actions={\n        <Flex align=\"center\">\n          {onRemove && <GroupMemberMenu onRemove={onRemove} />}\n          {onAdd && (\n            <Button onClick={onAdd} neutral>\n              {t(\"Add\")}\n            </Button>\n          )}\n        </Flex>\n      }\n    />\n  );\n});\n","import { observer } from \"mobx-react\";\nimport { EditIcon, GroupIcon, TrashIcon } from \"outline-icons\";\nimport * as React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useMenuState } from \"reakit/Menu\";\nimport Group from \"~/models/Group\";\nimport {\n  DeleteGroupDialog,\n  EditGroupDialog,\n  ViewGroupMembersDialog,\n} from \"~/scenes/Settings/components/GroupDialogs\";\nimport ContextMenu from \"~/components/ContextMenu\";\nimport OverflowMenuButton from \"~/components/ContextMenu/OverflowMenuButton\";\nimport Template from \"~/components/ContextMenu/Template\";\nimport usePolicy from \"~/hooks/usePolicy\";\nimport useStores from \"~/hooks/useStores\";\n\ntype Props = {\n  group: Group;\n};\n\nfunction GroupMenu({ group }: Props) {\n  const { t } = useTranslation();\n  const { dialogs } = useStores();\n  const menu = useMenuState({\n    modal: true,\n  });\n  const can = usePolicy(group);\n\n  const handleViewMembers = React.useCallback(() => {\n    dialogs.openModal({\n      title: t(\"Group members\"),\n      content: <ViewGroupMembersDialog group={group} />,\n      fullscreen: true,\n    });\n  }, [t, group, dialogs]);\n\n  const handleEditGroup = React.useCallback(() => {\n    dialogs.openModal({\n      title: t(\"Edit group\"),\n      content: (\n        <EditGroupDialog group={group} onSubmit={dialogs.closeAllModals} />\n      ),\n    });\n  }, [t, group, dialogs]);\n\n  const handleDeleteGroup = React.useCallback(() => {\n    dialogs.openModal({\n      title: t(\"Delete group\"),\n      content: (\n        <DeleteGroupDialog group={group} onSubmit={dialogs.closeAllModals} />\n      ),\n    });\n  }, [t, group, dialogs]);\n\n  return (\n    <>\n      <OverflowMenuButton aria-label={t(\"Show menu\")} {...menu} />\n      <ContextMenu {...menu} aria-label={t(\"Group options\")}>\n        <Template\n          {...menu}\n          items={[\n            {\n              type: \"button\",\n              title: `${t(\"Members\")}…`,\n              icon: <GroupIcon />,\n              onClick: handleViewMembers,\n              visible: !!(group && can.read),\n            },\n            {\n              type: \"separator\",\n            },\n            {\n              type: \"button\",\n              title: `${t(\"Edit\")}…`,\n              icon: <EditIcon />,\n              onClick: handleEditGroup,\n              visible: !!(group && can.update),\n            },\n            {\n              type: \"button\",\n              title: `${t(\"Delete\")}…`,\n              icon: <TrashIcon />,\n              dangerous: true,\n              onClick: handleDeleteGroup,\n              visible: !!(group && can.delete),\n            },\n            {\n              type: \"separator\",\n            },\n            {\n              type: \"link\",\n              href: \"\",\n              title: group.externalId,\n              disabled: true,\n              visible: !!group.externalId,\n            },\n          ]}\n        />\n      </ContextMenu>\n    </>\n  );\n}\n\nexport default observer(GroupMenu);\n","import compact from \"lodash/compact\";\nimport { GroupIcon } from \"outline-icons\";\nimport React from \"react\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport styled from \"styled-components\";\nimport { MAX_AVATAR_DISPLAY } from \"@shared/constants\";\nimport { s, hover } from \"@shared/styles\";\nimport Group from \"~/models/Group\";\nimport Facepile from \"~/components/Facepile\";\nimport Flex from \"~/components/Flex\";\nimport { HEADER_HEIGHT } from \"~/components/Header\";\nimport {\n  type Props as TableProps,\n  SortableTable,\n} from \"~/components/SortableTable\";\nimport { type Column as TableColumn } from \"~/components/Table\";\nimport Text from \"~/components/Text\";\nimport Time from \"~/components/Time\";\nimport useStores from \"~/hooks/useStores\";\nimport GroupMenu from \"~/menus/GroupMenu\";\nimport { ViewGroupMembersDialog } from \"./GroupDialogs\";\nimport { FILTER_HEIGHT } from \"./StickyFilters\";\n\nconst ROW_HEIGHT = 60;\nconst STICKY_OFFSET = HEADER_HEIGHT + FILTER_HEIGHT;\n\ntype Props = Omit<TableProps<Group>, \"columns\" | \"rowHeight\">;\n\nexport function GroupsTable(props: Props) {\n  const { t } = useTranslation();\n  const { dialogs } = useStores();\n\n  const handleViewMembers = React.useCallback(\n    (group: Group) => {\n      dialogs.openModal({\n        title: t(\"Group members\"),\n        content: <ViewGroupMembersDialog group={group} />,\n        fullscreen: true,\n      });\n    },\n    [t, dialogs]\n  );\n\n  const columns = React.useMemo<TableColumn<Group>[]>(\n    () =>\n      compact<TableColumn<Group>>([\n        {\n          type: \"data\",\n          id: \"name\",\n          header: t(\"Name\"),\n          accessor: (group) => group.name,\n          component: (group) => (\n            <Flex align=\"center\" gap={8}>\n              <Image>\n                <GroupIcon size={24} />\n              </Image>\n              <Flex column>\n                <Title onClick={() => handleViewMembers(group)}>\n                  {group.name}\n                </Title>\n                <Text type=\"tertiary\" size=\"small\">\n                  <Trans\n                    defaults=\"{{ count }} member\"\n                    values={{ count: group.memberCount }}\n                  />\n                </Text>\n              </Flex>\n            </Flex>\n          ),\n          width: \"2fr\",\n        },\n        {\n          type: \"data\",\n          id: \"members\",\n          header: t(\"Members\"),\n          accessor: (group) => `${group.memberCount} members`,\n          component: (group) => {\n            const users = group.users.slice(0, MAX_AVATAR_DISPLAY);\n            const overflow = group.memberCount - users.length;\n\n            return (\n              <Flex>\n                <Facepile users={users} overflow={overflow} />\n              </Flex>\n            );\n          },\n          width: \"1fr\",\n          sortable: false,\n        },\n        {\n          type: \"data\",\n          id: \"createdAt\",\n          header: t(\"Date created\"),\n          accessor: (group) => group.createdAt,\n          component: (group) =>\n            group.createdAt ? (\n              <Time dateTime={group.createdAt} addSuffix />\n            ) : null,\n          width: \"1fr\",\n        },\n        {\n          type: \"action\",\n          id: \"action\",\n          component: (group) => <GroupMenu group={group} />,\n          width: \"50px\",\n        },\n      ]),\n    [t, handleViewMembers]\n  );\n\n  return (\n    <SortableTable\n      columns={columns}\n      rowHeight={ROW_HEIGHT}\n      stickyOffset={STICKY_OFFSET}\n      {...props}\n    />\n  );\n}\n\nconst Image = styled(Flex)`\n  align-items: center;\n  justify-content: center;\n  width: 32px;\n  height: 32px;\n  background: ${s(\"backgroundSecondary\")};\n  border-radius: 32px;\n`;\n\nconst Title = styled.span`\n  &: ${hover} {\n    text-decoration: underline;\n    cursor: var(--pointer);\n  }\n`;\n","import { ColumnSort } from \"@tanstack/react-table\";\nimport deburr from \"lodash/deburr\";\nimport { observer } from \"mobx-react\";\nimport { PlusIcon, GroupIcon } from \"outline-icons\";\nimport * as React from \"react\";\nimport { useTranslation, Trans } from \"react-i18next\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { toast } from \"sonner\";\nimport Group from \"~/models/Group\";\nimport { Action } from \"~/components/Actions\";\nimport Button from \"~/components/Button\";\nimport Empty from \"~/components/Empty\";\nimport { ConditionalFade } from \"~/components/Fade\";\nimport Heading from \"~/components/Heading\";\nimport InputSearch from \"~/components/InputSearch\";\nimport Scene from \"~/components/Scene\";\nimport Text from \"~/components/Text\";\nimport useCurrentTeam from \"~/hooks/useCurrentTeam\";\nimport usePolicy from \"~/hooks/usePolicy\";\nimport useQuery from \"~/hooks/useQuery\";\nimport useStores from \"~/hooks/useStores\";\nimport { useTableRequest } from \"~/hooks/useTableRequest\";\nimport { CreateGroupDialog } from \"./components/GroupDialogs\";\nimport { GroupsTable } from \"./components/GroupsTable\";\nimport { StickyFilters } from \"./components/StickyFilters\";\n\nfunction getFilteredGroups(groups: Group[], query?: string) {\n  if (!query?.length) {\n    return groups;\n  }\n\n  const normalizedQuery = deburr(query.toLocaleLowerCase());\n  return groups.filter((group) =>\n    deburr(group.name).toLocaleLowerCase().includes(normalizedQuery)\n  );\n}\n\nfunction Groups() {\n  const { t } = useTranslation();\n  const { dialogs, groups } = useStores();\n  const team = useCurrentTeam();\n  const can = usePolicy(team);\n  const history = useHistory();\n  const location = useLocation();\n  const params = useQuery();\n  const [query, setQuery] = React.useState(\"\");\n\n  const reqParams = React.useMemo(\n    () => ({\n      query: params.get(\"query\") || undefined,\n      sort: params.get(\"sort\") || \"name\",\n      direction: (params.get(\"direction\") || \"asc\").toUpperCase() as\n        | \"ASC\"\n        | \"DESC\",\n    }),\n    [params]\n  );\n\n  const sort: ColumnSort = React.useMemo(\n    () => ({\n      id: reqParams.sort,\n      desc: reqParams.direction === \"DESC\",\n    }),\n    [reqParams.sort, reqParams.direction]\n  );\n\n  const { data, error, loading, next } = useTableRequest({\n    data: getFilteredGroups(groups.orderedData, reqParams.query),\n    sort,\n    reqFn: groups.fetchPage,\n    reqParams,\n  });\n\n  const isEmpty = !loading && !groups.orderedData.length;\n\n  const updateQuery = React.useCallback(\n    (value: string) => {\n      if (value) {\n        params.set(\"query\", value);\n      } else {\n        params.delete(\"query\");\n      }\n\n      history.replace({\n        pathname: location.pathname,\n        search: params.toString(),\n      });\n    },\n    [params, history, location.pathname]\n  );\n\n  const handleSearch = React.useCallback((event) => {\n    const { value } = event.target;\n    setQuery(value);\n  }, []);\n\n  const handleNewGroup = React.useCallback(() => {\n    dialogs.openModal({\n      title: t(\"Create a group\"),\n      content: <CreateGroupDialog />,\n    });\n  }, [t, dialogs]);\n\n  React.useEffect(() => {\n    if (error) {\n      toast.error(t(\"Could not load groups\"));\n    }\n  }, [t, error]);\n\n  React.useEffect(() => {\n    const timeout = setTimeout(() => updateQuery(query), 250);\n    return () => clearTimeout(timeout);\n  }, [query, updateQuery]);\n\n  return (\n    <Scene\n      title={t(\"Groups\")}\n      icon={<GroupIcon />}\n      actions={\n        <>\n          {can.createGroup && (\n            <Action>\n              <Button\n                type=\"button\"\n                onClick={handleNewGroup}\n                icon={<PlusIcon />}\n              >\n                {`${t(\"New group\")}…`}\n              </Button>\n            </Action>\n          )}\n        </>\n      }\n      wide\n    >\n      <Heading>{t(\"Groups\")}</Heading>\n      <Text as=\"p\" type=\"secondary\">\n        <Trans>\n          Groups can be used to organize and manage the people on your team.\n        </Trans>\n      </Text>\n      {isEmpty ? (\n        <Empty>{t(\"No groups have been created yet\")}</Empty>\n      ) : (\n        <>\n          <StickyFilters>\n            <InputSearch\n              value={query}\n              placeholder={`${t(\"Filter\")}…`}\n              onChange={handleSearch}\n            />\n          </StickyFilters>\n          <ConditionalFade animate={!data}>\n            <GroupsTable\n              data={data ?? []}\n              sort={sort}\n              loading={loading}\n              page={{\n                hasNext: !!next,\n                fetchNext: next,\n              }}\n            />\n          </ConditionalFade>\n        </>\n      )}\n    </Scene>\n  );\n}\n\nexport default observer(Groups);\n"],"names":["observer","GroupMemberMenu","onRemove","t","useTranslation","menu","useMenuState","modal","jsxs","Fragment","children","jsx","OverflowMenuButton","ContextMenu","Template","items","type","dangerous","title","onClick","CreateGroupDialog","dialogs","groups","useStores","name","setName","React","useState","isSaving","setIsSaving","handleSubmit","useCallback","async","ev","preventDefault","group","Group","save","openModal","content","ViewGroupMembersDialog","fullscreen","err","error","message","onSubmit","Text","as","Trans","Flex","Input","label","onChange","e","target","value","required","autoFocus","flex","Button","disabled","EditGroupDialog","handleNameChange","DeleteGroupDialog","ConfirmationDialog","delete","submitText","savingText","danger","defaults","values","groupName","components","em","users","groupUsers","can","usePolicy","handleAddPeople","AddPeopleToGroupDialog","handleRemoveUser","user","groupId","id","userId","success","userName","icon","Avatar","model","size","AvatarSize","Toast","column","update","PlusIcon","neutral","Subheading","PaginatedList","inGroup","fetch","fetchPage","options","empty","Empty","renderItem","GroupMemberListItem","undefined","team","useCurrentTeam","query","setQuery","debouncedFetch","useMemo","debounce","q","handleFilter","updatedQuery","handleAddUser","create","handleInvitePeople","uuidv4","Invite","closeModal","loading","useRequest","fetchAll","inviteUser","ButtonLink","teamName","placeholder","labelHidden","DelayedMount","PlaceholderList","count","notInGroup","item","onAdd","ListItem","subtitle","lastActiveAt","Time","dateTime","isInvited","Badge","isAdmin","primary","image","Large","actions","align","GroupMenu","handleViewMembers","handleEditGroup","closeAllModals","handleDeleteGroup","GroupIcon","visible","read","EditIcon","TrashIcon","href","externalId","STICKY_OFFSET","HEADER_HEIGHT","FILTER_HEIGHT","GroupsTable","props","columns","compact","header","accessor","component","gap","Image","Title","memberCount","width","slice","MAX_AVATAR_DISPLAY","overflow","length","Facepile","sortable","createdAt","addSuffix","SortableTable","rowHeight","stickyOffset","styled","withConfig","componentId","s","span","hover","getFilteredGroups","normalizedQuery","deburr","toLocaleLowerCase","filter","includes","Groups","history","useHistory","location","useLocation","params","useQuery","reqParams","get","sort","direction","toUpperCase","desc","data","next","useTableRequest","orderedData","reqFn","isEmpty","updateQuery","set","replace","pathname","search","toString","handleSearch","event","handleNewGroup","timeout","setTimeout","clearTimeout","Scene","createGroup","Action","wide","Heading","StickyFilters","InputSearch","ConditionalFade","animate","page","hasNext","fetchNext"],"mappings":"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"}