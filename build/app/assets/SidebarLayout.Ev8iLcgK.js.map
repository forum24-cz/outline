{"version":3,"file":"SidebarLayout.Ev8iLcgK.js","sources":["../../../app/scenes/Document/components/SidebarLayout.tsx"],"sourcesContent":["import { observer } from \"mobx-react\";\nimport { BackIcon } from \"outline-icons\";\nimport * as React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport styled from \"styled-components\";\nimport { depths, s, ellipsis } from \"@shared/styles\";\nimport Button from \"~/components/Button\";\nimport Flex from \"~/components/Flex\";\nimport { Portal } from \"~/components/Portal\";\nimport Scrollable from \"~/components/Scrollable\";\nimport Tooltip from \"~/components/Tooltip\";\nimport useMobile from \"~/hooks/useMobile\";\nimport { draggableOnDesktop } from \"~/styles\";\nimport { fadeIn } from \"~/styles/animations\";\n\ntype Props = Omit<React.HTMLAttributes<HTMLDivElement>, \"title\"> & {\n  /* The title of the sidebar */\n  title: React.ReactNode;\n  /* The content of the sidebar */\n  children: React.ReactNode;\n  /* Called when the sidebar is closed */\n  onClose: React.MouseEventHandler;\n  /* Whether the sidebar should be scrollable */\n  scrollable?: boolean;\n};\n\nfunction SidebarLayout({ title, onClose, children, scrollable = true }: Props) {\n  const { t } = useTranslation();\n  const isMobile = useMobile();\n\n  return (\n    <>\n      <Header>\n        <Title>{title}</Title>\n        <Tooltip content={t(\"Close\")} shortcut=\"Esc\">\n          <Button\n            icon={<ForwardIcon />}\n            onClick={onClose}\n            borderOnHover\n            neutral\n          />\n        </Tooltip>\n      </Header>\n      {scrollable ? (\n        <Scrollable hiddenScrollbars topShadow>\n          {children}\n        </Scrollable>\n      ) : (\n        children\n      )}\n\n      {isMobile && (\n        <Portal>\n          <Backdrop onClick={onClose} />\n        </Portal>\n      )}\n    </>\n  );\n}\n\nconst Backdrop = styled.a`\n  animation: ${fadeIn} 250ms ease-in-out;\n  position: fixed;\n  top: 0;\n  left: 0;\n  bottom: 0;\n  right: 0;\n  cursor: default;\n  z-index: ${depths.mobileSidebar - 1};\n  background: ${s(\"backdrop\")};\n`;\n\nconst ForwardIcon = styled(BackIcon)`\n  transform: rotate(180deg);\n  flex-shrink: 0;\n`;\n\nconst Title = styled(Flex)`\n  ${ellipsis()}\n  font-size: 16px;\n  font-weight: 600;\n  text-align: center;\n  align-items: center;\n  justify-content: flex-start;\n  user-select: none;\n  width: 0;\n  flex-grow: 1;\n`;\n\nconst Header = styled(Flex)`\n  ${draggableOnDesktop()}\n  align-items: center;\n  position: relative;\n  padding: 16px 12px 16px 16px;\n  color: ${s(\"text\")};\n  flex-shrink: 0;\n`;\n\nexport default observer(SidebarLayout);\n"],"names":["Backdrop","styled","a","withConfig","componentId","fadeIn","depths","mobileSidebar","s","ForwardIcon","BackIcon","Title","Flex","ellipsis","Header","draggableOnDesktop","observer","SidebarLayout","title","onClose","children","scrollable","t","useTranslation","isMobile","useMobile","jsxs","Fragment","jsx","Tooltip","content","shortcut","Button","icon","onClick","borderOnHover","neutral","Scrollable","hiddenScrollbars","topShadow","Portal"],"mappings":"gNA4DA,MAAMA,EAAWC,EAAOC,EAACC,WAAA,CAAAC,YAAA,eAARH,CAAQ,CAAA,aAAA,0FAAA,eAAA,KACVI,EAOFC,EAAOC,cAAgB,EACpBC,EAAE,aAGZC,EAAcR,EAAOS,YAASP,WAAA,CAAAC,YAAA,eAAhBH,CAGnB,CAAA,4CAEKU,EAAQV,EAAOW,GAAKT,WAAA,CAAAC,YAAA,eAAZH,CACVY,CAAAA,GAAAA,yIAAAA,KAWEC,EAASb,EAAOW,GAAKT,WAAA,CAAAC,YAAA,eAAZH,CACXc,CAAAA,GAAAA,2EAAAA,mBAAAA,IAIOP,EAAE,SAIEQ,EAAAA,GAxEf,SAASC,eAAcC,MAAEA,EAAAA,QAAOC,EAAAA,SAASC,EAAAA,WAAUC,GAAa,IACxD,MAAAC,EAAEA,GAAMC,IACRC,EAAWC,IAIb,OAAAC,EAAAC,EAAA,CAAAP,SAAA,CAAAM,EAACZ,EACC,CAAAM,SAAA,CAACQ,EAAAjB,GAAOO,SAAMA,IACdU,EAACC,GAAQC,QAASR,EAAE,SAAUS,SAAS,MACrCX,SAACQ,EAAAI,EAAA,CACCC,KAAOL,EAAAnB,EAAA,IACPyB,QAASf,EACTgB,eAAa,EACbC,SAAO,SAIZf,EACEO,EAAAS,EAAW,CAAAC,kBAAgB,EAACC,WAAS,EACnCnB,aAGHA,EAGDI,GACEI,EAAAY,EAAA,CACCpB,WAACpB,EAAS,CAAAkC,QAASf,QAK7B"}