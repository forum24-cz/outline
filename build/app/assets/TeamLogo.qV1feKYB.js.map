{"version":3,"file":"TeamLogo.qV1feKYB.js","sources":["../../../app/components/Avatar/Initials.tsx","../../../app/components/Avatar/Avatar.tsx","../../../app/components/Avatar/AvatarWithPresence.tsx","../../../app/components/TeamLogo.ts"],"sourcesContent":["import { getLuminance } from \"polished\";\nimport styled from \"styled-components\";\nimport { s } from \"@shared/styles\";\nimport Flex from \"~/components/Flex\";\n\nconst Initials = styled(Flex)<{\n  /** The color of the background, defaults to textTertiary. */\n  color?: string;\n  /** Content is only used to calculate font size, use children to render. */\n  content?: string;\n  /** The size of the avatar */\n  size: number;\n}>`\n  align-items: center;\n  justify-content: center;\n  border-radius: 50%;\n  width: 100%;\n  height: 100%;\n  color: ${(props) =>\n    getLuminance(props.color ?? props.theme.textTertiary) > 0.5\n      ? s(\"black50\")\n      : s(\"white75\")};\n  background-color: ${(props) => props.color ?? props.theme.textTertiary};\n  width: ${(props) => props.size}px;\n  height: ${(props) => props.size}px;\n  border-radius: 50%;\n  flex-shrink: 0;\n\n  // adjust font size down for each additional character\n  font-size: ${(props) => props.size / 2 - (props.content?.length ?? 0)}px;\n  font-weight: 500;\n`;\n\nexport default Initials;\n","import * as React from \"react\";\nimport styled from \"styled-components\";\nimport useBoolean from \"~/hooks/useBoolean\";\nimport Initials from \"./Initials\";\n\nexport enum AvatarSize {\n  Small = 16,\n  Toast = 18,\n  Medium = 24,\n  Large = 28,\n  XLarge = 32,\n  XXLarge = 48,\n  Upload = 64,\n}\n\nexport interface IAvatar {\n  avatarUrl: string | null;\n  color?: string;\n  initial?: string;\n  id?: string;\n}\n\ntype Props = {\n  /** The size of the avatar */\n  size: AvatarSize;\n  /** The source of the avatar image, if not passing a model. */\n  src?: string;\n  /** The avatar model, if not passing a source. */\n  model?: IAvatar;\n  /** The alt text for the image */\n  alt?: string;\n  /** Optional click handler */\n  onClick?: React.MouseEventHandler<HTMLImageElement>;\n  /** Optional class name */\n  className?: string;\n  /** Optional style */\n  style?: React.CSSProperties;\n};\n\nfunction Avatar(props: Props) {\n  const { model, style, ...rest } = props;\n  const src = props.src || model?.avatarUrl;\n  const [error, handleError] = useBoolean(false);\n\n  return (\n    <Relative style={style}>\n      {src && !error ? (\n        <CircleImg onError={handleError} src={src} {...rest} />\n      ) : model ? (\n        <Initials color={model.color} {...rest}>\n          {model.initial}\n        </Initials>\n      ) : (\n        <Initials {...rest} />\n      )}\n    </Relative>\n  );\n}\n\nAvatar.defaultProps = {\n  size: AvatarSize.Medium,\n};\n\nconst Relative = styled.div`\n  position: relative;\n  user-select: none;\n  flex-shrink: 0;\n`;\n\nconst CircleImg = styled.img<{ size: number }>`\n  display: block;\n  width: ${(props) => props.size}px;\n  height: ${(props) => props.size}px;\n  border-radius: 50%;\n  flex-shrink: 0;\n  overflow: hidden;\n`;\n\nexport default Avatar;\n","import { observer } from \"mobx-react\";\nimport * as React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport styled, { css } from \"styled-components\";\nimport { s } from \"@shared/styles\";\nimport User from \"~/models/User\";\nimport Tooltip from \"~/components/Tooltip\";\nimport Avatar, { AvatarSize } from \"./Avatar\";\n\n/**\n * Props for the AvatarWithPresence component\n */\ntype Props = {\n  /** The user to display the avatar for */\n  user: User;\n  /** Whether the user is currently present in the document */\n  isPresent: boolean;\n  /** Whether the user is currently editing the document */\n  isEditing: boolean;\n  /** Whether the user is currently observing the document */\n  isObserving: boolean;\n  /** Whether this avatar represents the current user */\n  isCurrentUser: boolean;\n  /** Optional click handler for the avatar */\n  onClick?: React.MouseEventHandler<HTMLImageElement>;\n  /** Size of the avatar, defaults to AvatarSize.Large */\n  size?: AvatarSize;\n  /** Optional inline styles to apply to the avatar wrapper */\n  style?: React.CSSProperties;\n};\n\n/**\n * AvatarWithPresence component displays a user's avatar with visual indicators\n * for their current status (present, editing, observing).\n *\n * The component shows different visual states:\n * - Present users have full opacity\n * - Non-present users have reduced opacity\n * - Observing users have a colored border matching their user color\n * - Hovering shows a colored border\n *\n * A tooltip displays the user's name and current status.\n *\n * @param props - Component properties\n * @returns React component\n */\nfunction AvatarWithPresence({\n  onClick,\n  user,\n  isPresent,\n  isEditing,\n  isObserving,\n  isCurrentUser,\n  size = AvatarSize.Large,\n  style,\n}: Props) {\n  const { t } = useTranslation();\n  const status = isPresent\n    ? isEditing\n      ? t(\"currently editing\")\n      : t(\"currently viewing\")\n    : t(\"previously edited\");\n\n  return (\n    <>\n      <Tooltip\n        content={\n          <Centered>\n            <strong>{user.name}</strong> {isCurrentUser && `(${t(\"You\")})`}\n            {status && (\n              <>\n                <br />\n                {status}\n              </>\n            )}\n          </Centered>\n        }\n        placement=\"bottom\"\n      >\n        <AvatarPresence\n          $isPresent={isPresent}\n          $isObserving={isObserving}\n          $color={user.color}\n          style={style}\n        >\n          <Avatar model={user} onClick={onClick} size={size} />\n        </AvatarPresence>\n      </Tooltip>\n    </>\n  );\n}\n\n/**\n * Centered container for tooltip content\n */\nconst Centered = styled.div`\n  text-align: center;\n`;\n\n/**\n * Props for the AvatarPresence styled component\n */\ntype AvatarWrapperProps = {\n  /** Whether the user is currently present */\n  $isPresent: boolean;\n  /** Whether the user is currently observing */\n  $isObserving: boolean;\n  /** The user's color for border highlighting */\n  $color: string;\n};\n\n/**\n * Styled component that wraps the Avatar and provides visual indicators\n * for the user's presence status.\n *\n * - Adjusts opacity based on presence\n * - Adds colored borders for observing users\n * - Handles hover effects\n */\nconst AvatarPresence = styled.div<AvatarWrapperProps>`\n  opacity: ${(props) => (props.$isPresent ? 1 : 0.5)};\n  transition: opacity 250ms ease-in-out;\n  border-radius: 50%;\n  position: relative;\n\n  ${(props) =>\n    props.$isPresent &&\n    css<AvatarWrapperProps>`\n      &:after {\n        content: \"\";\n        position: absolute;\n        top: 0;\n        left: 0;\n        right: 0;\n        bottom: 0;\n        border-radius: 50%;\n        transition: border-color 100ms ease-in-out;\n        border: 2px solid transparent;\n        pointer-events: none;\n\n        ${(props) =>\n          props.$isObserving &&\n          css`\n            border: 2px solid ${props.$color};\n            box-shadow: inset 0 0 0 2px ${props.theme.background};\n\n            &:hover {\n              top: -1px;\n              left: -1px;\n              right: -1px;\n              bottom: -1px;\n            }\n          `}\n      }\n\n      &:hover:after {\n        border: 2px solid ${(props) => props.$color};\n        box-shadow: inset 0 0 0 2px ${s(\"background\")};\n      }\n    `}\n`;\n\nexport default observer(AvatarWithPresence);\n","import styled from \"styled-components\";\nimport { s } from \"@shared/styles\";\nimport { Avatar } from \"./Avatar\";\n\nconst TeamLogo = styled(Avatar)`\n  border-radius: 4px;\n  box-shadow: inset 0 0 0 1px ${s(\"divider\")};\n  border: 0;\n`;\n\nexport default TeamLogo;\n"],"names":["Initials","styled","Flex","withConfig","componentId","getLuminance","props","color","theme","textTertiary","s","size","content","length","AvatarSize","Small","Toast","Medium","Large","XLarge","XXLarge","Upload","Avatar","model","style","rest","src","avatarUrl","error","handleError","useBoolean","Relative","jsx","CircleImg","onError","initial","defaultProps","div","img","Centered","AvatarPresence","$isPresent","css","$isObserving","$color","background","observer","AvatarWithPresence","onClick","user","isPresent","isEditing","isObserving","isCurrentUser","t","useTranslation","status","Fragment","children","Tooltip","name","jsxs","placement","TeamLogo$1"],"mappings":"wJAKA,MAAMA,EAAWC,EAAOC,GAAKC,WAAA,CAAAC,YAAA,gBAAZH,CAAY,CAAA,4FAAA,qBAAA,UAAA,aAAA,gDAAA,2BAczBI,EAAaC,EAAMC,OAASD,EAAME,MAAMC,cAAgB,GACpDC,EAAE,WACFA,EAAE,gBACuBJ,EAAMC,OAASD,EAAME,MAAMC,kBACtCH,EAAMK,UACLL,EAAMK,UAKHL,EAAMK,KAAO,GAAKL,EAAMM,SAASC,QAAU,KCxBzDC,IAAAA,GAAAA,IACVC,EAAAA,QAAQ,IAARA,QACAC,EAAAA,QAAQ,IAARA,QACAC,EAAAA,SAAS,IAATA,SACAC,EAAAA,QAAQ,IAARA,QACAC,EAAAA,SAAS,IAATA,SACAC,EAAAA,UAAU,IAAVA,UACAC,EAAAA,SAAS,IAATA,SAPUP,IAAAA,GAAAA,CAAAA,GAkCZ,SAASQ,OAAOhB,GACR,MAAAiB,MAAEA,EAAAA,MAAOC,KAAUC,GAASnB,EAC5BoB,EAAMpB,EAAMoB,KAAOH,GAAOI,WACzBC,EAAOC,GAAeC,GAAW,GAExC,SACGC,EAAA,CAASP,QACPE,SAAAA,IAAQE,EACNI,EAAAC,EAAA,CAAUC,QAASL,EAAaH,SAAcD,IAE9CO,EAAAhC,EADCuB,EACQ,CAAAhB,MAAOgB,EAAMhB,SAAWkB,EAC/BF,SAAMY,EAAAA,SAGC,IAAIV,KAItB,CAEAH,OAAOc,aAAe,CACpBzB,KAAMG,IAGR,MAAMiB,EAAW9B,EAAOoC,IAAGlC,WAAA,CAAAC,YAAA,eAAVH,CAIhB,CAAA,sDAEKgC,EAAYhC,EAAOqC,IAAGnC,WAAA,CAAAC,YAAA,eAAVH,CAENK,CAAAA,uBAAAA,aAAAA,wDAAAA,GAAUA,EAAMK,OACLL,GAAAA,EAAMK,OCuB7B,MAAM4B,EAAWtC,EAAOoC,IAAGlC,WAAA,CAAAC,YAAA,gBAAVH,CAEhB,CAAA,uBAsBKuC,EAAiBvC,EAAOoC,IAAGlC,WAAA,CAAAC,YAAA,gBAAVH,CACTK,CAAAA,WAAAA,6EAAAA,KAAAA,GAAWA,EAAMmC,WAAa,EAAI,KAM5CnC,GAAAA,EAAMmC,YACNC,+PAaOpC,GACDA,EAAMqC,cACND,EACsBpC,CAAAA,oBAAAA,+BAAAA,wDAAAA,EAAMsC,OACItC,EAAME,MAAMqC,cAYzBvC,GAAUA,EAAMsC,QACPlC,EAAE,iBAKzBoC,EAAAA,GApHf,SAASC,oBAAmBC,QAC1BA,EAAAA,KACAC,EAAAA,UACAC,EAAAA,UACAC,EAAAA,YACAC,EAAAA,cACAC,EAAAA,KACA1C,EAAOG,EAAWI,MAAAA,MAClBM,IAEM,MAAA8B,EAAEA,GAAMC,IACRC,EAEAF,EAFSJ,EACXC,EACI,oBACA,oBACF,qBAIF,OAAAnB,EAAAyB,EAAA,CAAAC,SAAA1B,EAAC2B,EACC,CAAA/C,UACG2B,EACC,CAAAmB,SAAA,GAAC,SAAA,CAAQT,WAAKW,OAAc,IAAEP,GAAiB,IAAIC,EAAE,UACpDE,GAEGK,EAAAJ,EAAA,CAAAC,SAAA,CAAA1B,EAAC,KAAE,IACFwB,QAKTM,UAAU,SAEVJ,SAAC1B,EAAAQ,GACCC,WAAYS,EACZP,aAAcS,EACdR,OAAQK,EAAK1C,MACbiB,QAEAkC,WAACpC,OAAO,CAAAC,MAAO0B,EAAMD,UAAkBrC,cAKjD,IChFAoD,EANiB9D,EAAOqB,QAAOnB,WAAA,CAAAC,YAAA,eAAdH,CAAc,CAAA,gDAAA,cAECS,EAAE"}