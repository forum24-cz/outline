{"version":3,"file":"index.4lU6ZntV.js","sources":["../../../node_modules/reakit/es/Tab/TabList.js","../../../app/components/IconPicker/components/ColorPicker.tsx","../../../app/components/IconPicker/components/IconPanel.tsx","../../../app/components/IconPicker/index.tsx"],"sourcesContent":["import { a as _objectSpread2 } from '../_rollupPluginBabelHelpers-1f0bf8c2.js';\nimport { createComponent } from 'reakit-system/createComponent';\nimport { createHook } from 'reakit-system/createHook';\nimport 'reakit-utils/shallowEqual';\nimport 'react';\nimport 'reakit-utils/useForkRef';\nimport 'reakit-utils/isButton';\nimport { useWarning } from 'reakit-warning';\nimport 'reakit-utils/useLiveRef';\nimport 'reakit-utils/isSelfTarget';\nimport 'reakit-utils/useIsomorphicEffect';\nimport 'reakit-utils/hasFocusWithin';\nimport 'reakit-utils/isPortalEvent';\nimport 'reakit-utils/dom';\nimport 'reakit-utils/tabbable';\nimport '../Role/Role.js';\nimport '../Tabbable/Tabbable.js';\nimport { useCreateElement } from 'reakit-system/useCreateElement';\nimport 'reakit-utils/getDocument';\nimport 'reakit-utils/fireBlurEvent';\nimport 'reakit-utils/fireKeyboardEvent';\nimport 'reakit-utils/canUseDOM';\nimport 'reakit-utils/getNextActiveElementOnBlur';\nimport '../reverse-30eaa122.js';\nimport '../getCurrentId-5aa9849e.js';\nimport '../findEnabledItemById-8ddca752.js';\nimport '../__keys-6742f591.js';\nimport '../userFocus-e16425e3.js';\nimport { useComposite } from '../Composite/Composite.js';\nimport { a as TAB_LIST_KEYS } from '../__keys-3c0b2243.js';\n\nvar useTabList = createHook({\n  name: \"TabList\",\n  compose: useComposite,\n  keys: TAB_LIST_KEYS,\n  useProps: function useProps(options, htmlProps) {\n    return _objectSpread2({\n      role: \"tablist\",\n      \"aria-orientation\": options.orientation\n    }, htmlProps);\n  }\n});\nvar TabList = createComponent({\n  as: \"div\",\n  useHook: useTabList,\n  useCreateElement: function useCreateElement$1(type, props, children) {\n    process.env.NODE_ENV !== \"production\" ? useWarning(!props[\"aria-label\"] && !props[\"aria-labelledby\"], \"You should provide either `aria-label` or `aria-labelledby` props.\", \"See https://reakit.io/docs/tab\") : void 0;\n    return useCreateElement(type, props, children);\n  }\n});\n\nexport { TabList, useTabList };\n","import { BackIcon } from \"outline-icons\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { breakpoints, s, hover } from \"@shared/styles\";\nimport { colorPalette } from \"@shared/utils/collections\";\nimport { validateColorHex } from \"@shared/utils/color\";\nimport Flex from \"~/components/Flex\";\nimport NudeButton from \"~/components/NudeButton\";\nimport Text from \"~/components/Text\";\n\nenum Panel {\n  Builtin,\n  Hex,\n}\n\ntype Props = {\n  width: number;\n  activeColor: string;\n  onSelect: (color: string) => void;\n};\n\nconst ColorPicker = ({ width, activeColor, onSelect }: Props) => {\n  const [localValue, setLocalValue] = React.useState(activeColor);\n\n  const [panel, setPanel] = React.useState(\n    colorPalette.includes(activeColor) ? Panel.Builtin : Panel.Hex\n  );\n\n  const handleSwitcherClick = React.useCallback(() => {\n    setPanel(panel === Panel.Builtin ? Panel.Hex : Panel.Builtin);\n  }, [panel, setPanel]);\n\n  const isLargeMobile = width > breakpoints.mobileLarge + 12; // 12px for the Container padding\n\n  React.useEffect(() => {\n    setLocalValue(activeColor);\n    setPanel(colorPalette.includes(activeColor) ? Panel.Builtin : Panel.Hex);\n  }, [activeColor]);\n\n  return isLargeMobile ? (\n    <Container justify=\"space-between\">\n      <LargeMobileBuiltinColors activeColor={activeColor} onClick={onSelect} />\n      <LargeMobileCustomColor\n        value={localValue}\n        setLocalValue={setLocalValue}\n        onValidHex={onSelect}\n      />\n    </Container>\n  ) : (\n    <Container gap={12}>\n      <PanelSwitcher align=\"center\">\n        <SwitcherButton panel={panel} onClick={handleSwitcherClick}>\n          {panel === Panel.Builtin ? \"#\" : <BackIcon />}\n        </SwitcherButton>\n      </PanelSwitcher>\n      {panel === Panel.Builtin ? (\n        <BuiltinColors activeColor={activeColor} onClick={onSelect} />\n      ) : (\n        <CustomColor\n          value={localValue}\n          setLocalValue={setLocalValue}\n          onValidHex={onSelect}\n        />\n      )}\n    </Container>\n  );\n};\n\nconst BuiltinColors = ({\n  activeColor,\n  onClick,\n  className,\n}: {\n  activeColor: string;\n  onClick: (color: string) => void;\n  className?: string;\n}) => (\n  <Flex className={className} justify=\"space-between\" align=\"center\" auto>\n    {colorPalette.map((color) => (\n      <ColorButton\n        key={color}\n        $color={color}\n        $active={color === activeColor}\n        onClick={() => onClick(color)}\n      >\n        <Selected />\n      </ColorButton>\n    ))}\n  </Flex>\n);\n\nconst CustomColor = ({\n  value,\n  setLocalValue,\n  onValidHex,\n  className,\n}: {\n  value: string;\n  setLocalValue: (value: string) => void;\n  onValidHex: (color: string) => void;\n  className?: string;\n}) => {\n  const hasHexChars = React.useCallback(\n    (color: string) => /(^#[0-9A-F]{1,6}$)/i.test(color),\n    []\n  );\n\n  const handleInputChange = React.useCallback(\n    (ev: React.ChangeEvent<HTMLInputElement>) => {\n      const val = ev.target.value;\n\n      if (val === \"\" || val === \"#\") {\n        setLocalValue(\"#\");\n        return;\n      }\n\n      const uppercasedVal = val.toUpperCase();\n\n      if (hasHexChars(uppercasedVal)) {\n        setLocalValue(uppercasedVal);\n      }\n\n      if (validateColorHex(uppercasedVal)) {\n        onValidHex(uppercasedVal);\n      }\n    },\n    [setLocalValue, hasHexChars, onValidHex]\n  );\n\n  return (\n    <Flex className={className} align=\"center\" gap={8}>\n      <Text type=\"tertiary\" size=\"small\">\n        HEX\n      </Text>\n      <CustomColorInput\n        maxLength={7}\n        value={value}\n        onChange={handleInputChange}\n      />\n    </Flex>\n  );\n};\n\nconst Container = styled(Flex)`\n  height: 48px;\n  padding: 8px 12px;\n  border-bottom: 1px solid ${s(\"inputBorder\")};\n`;\n\nconst Selected = styled.span`\n  width: 10px;\n  height: 5px;\n  border-left: 2px solid white;\n  border-bottom: 2px solid white;\n  transform: translateY(-25%) rotate(-45deg);\n`;\n\nconst ColorButton = styled(NudeButton)<{ $color: string; $active: boolean }>`\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  width: 24px;\n  height: 24px;\n  border-radius: 50%;\n  background-color: ${({ $color }) => $color};\n\n  &: ${hover} {\n    outline: 2px solid ${s(\"menuBackground\")} !important;\n    box-shadow: ${({ $color }) => `0px 0px 3px 3px ${$color}`};\n  }\n\n  & ${Selected} {\n    display: ${({ $active }) => ($active ? \"block\" : \"none\")};\n  }\n`;\n\nconst PanelSwitcher = styled(Flex)`\n  width: 40px;\n  border-right: 1px solid ${s(\"inputBorder\")};\n`;\n\nconst SwitcherButton = styled(NudeButton)<{ panel: Panel }>`\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 14px;\n  border: 1px solid ${s(\"inputBorder\")};\n  transition: all 100ms ease-in-out;\n\n  &: ${hover} {\n    border-color: ${s(\"inputBorderFocused\")};\n  }\n`;\n\nconst LargeMobileBuiltinColors = styled(BuiltinColors)`\n  max-width: 380px;\n  padding-right: 8px;\n`;\n\nconst LargeMobileCustomColor = styled(CustomColor)`\n  padding-left: 8px;\n  border-left: 1px solid ${s(\"inputBorder\")};\n  width: 120px;\n`;\n\nconst CustomColorInput = styled.input.attrs(() => ({\n  type: \"text\",\n  autocomplete: \"off\",\n}))`\n  font-size: 14px;\n  color: ${s(\"textSecondary\")};\n  background: transparent;\n  border: 0;\n  outline: 0;\n`;\n\nexport default ColorPicker;\n","import React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport styled from \"styled-components\";\nimport { IconType } from \"@shared/types\";\nimport { IconLibrary } from \"@shared/utils/IconLibrary\";\nimport Flex from \"~/components/Flex\";\nimport InputSearch from \"~/components/InputSearch\";\nimport usePersistedState from \"~/hooks/usePersistedState\";\nimport {\n  FREQUENTLY_USED_COUNT,\n  DisplayCategory,\n  iconsFreqKey,\n  lastIconKey,\n  sortFrequencies,\n} from \"../utils\";\nimport ColorPicker from \"./ColorPicker\";\nimport GridTemplate, { DataNode } from \"./GridTemplate\";\n\nconst IconNames = Object.keys(IconLibrary.mapping);\nconst TotalIcons = IconNames.length;\n\n/**\n * This is needed as a constant for react-window.\n * Calculated from the heights of TabPanel, ColorPicker and InputSearch.\n */\nconst GRID_HEIGHT = 314;\n\nconst useIconState = () => {\n  const [iconsFreq, setIconsFreq] = usePersistedState<Record<string, number>>(\n    iconsFreqKey,\n    {}\n  );\n  const [lastIcon, setLastIcon] = usePersistedState<string | undefined>(\n    lastIconKey,\n    undefined\n  );\n\n  const incrementIconCount = React.useCallback(\n    (icon: string) => {\n      iconsFreq[icon] = (iconsFreq[icon] ?? 0) + 1;\n      setIconsFreq({ ...iconsFreq });\n      setLastIcon(icon);\n    },\n    [iconsFreq, setIconsFreq, setLastIcon]\n  );\n\n  const getFreqIcons = React.useCallback(() => {\n    const freqs = Object.entries(iconsFreq);\n\n    if (freqs.length > FREQUENTLY_USED_COUNT.Track) {\n      sortFrequencies(freqs).splice(FREQUENTLY_USED_COUNT.Track);\n      setIconsFreq(Object.fromEntries(freqs));\n    }\n\n    const icons = sortFrequencies(freqs)\n      .slice(0, FREQUENTLY_USED_COUNT.Get)\n      .map(([icon, _]) => icon);\n\n    const isLastPresent = icons.includes(lastIcon ?? \"\");\n    if (lastIcon && !isLastPresent) {\n      icons.pop();\n      icons.push(lastIcon);\n    }\n\n    return icons;\n  }, [iconsFreq, setIconsFreq, lastIcon]);\n\n  return {\n    incrementIconCount,\n    getFreqIcons,\n  };\n};\n\ntype Props = {\n  panelWidth: number;\n  initial: string;\n  color: string;\n  query: string;\n  panelActive: boolean;\n  onIconChange: (icon: string) => void;\n  onColorChange: (icon: string) => void;\n  onQueryChange: (query: string) => void;\n};\n\nconst IconPanel = ({\n  panelWidth,\n  initial,\n  color,\n  query,\n  panelActive,\n  onIconChange,\n  onColorChange,\n  onQueryChange,\n}: Props) => {\n  const { t } = useTranslation();\n\n  const searchRef = React.useRef<HTMLInputElement | null>(null);\n  const scrollableRef = React.useRef<HTMLDivElement | null>(null);\n\n  const { incrementIconCount, getFreqIcons } = useIconState();\n\n  const freqIcons = React.useMemo(() => getFreqIcons(), [getFreqIcons]);\n  const totalFreqIcons = freqIcons.length;\n\n  const filteredIcons = React.useMemo(\n    () => IconLibrary.findIcons(query),\n    [query]\n  );\n\n  const isSearch = query !== \"\";\n  const category = isSearch ? DisplayCategory.Search : DisplayCategory.All;\n  const delayPerIcon = 250 / (TotalIcons + totalFreqIcons);\n\n  const handleFilter = React.useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      onQueryChange(event.target.value);\n    },\n    [onQueryChange]\n  );\n\n  const handleIconSelection = React.useCallback(\n    ({ id, value }: { id: string; value: string }) => {\n      onIconChange(value);\n      incrementIconCount(id);\n    },\n    [onIconChange, incrementIconCount]\n  );\n\n  const baseIcons: DataNode = {\n    category,\n    icons: filteredIcons.map((name, index) => ({\n      type: IconType.SVG,\n      name,\n      color,\n      initial,\n      delay: Math.round((index + totalFreqIcons) * delayPerIcon),\n      onClick: handleIconSelection,\n    })),\n  };\n\n  const templateData: DataNode[] = isSearch\n    ? [baseIcons]\n    : [\n        {\n          category: DisplayCategory.Frequent,\n          icons: freqIcons.map((name, index) => ({\n            type: IconType.SVG,\n            name,\n            color,\n            initial,\n            delay: Math.round((index + totalFreqIcons) * delayPerIcon),\n            onClick: handleIconSelection,\n          })),\n        },\n        baseIcons,\n      ];\n\n  React.useEffect(() => {\n    if (scrollableRef.current) {\n      scrollableRef.current.scrollTop = 0;\n    }\n    searchRef.current?.focus();\n  }, [panelActive]);\n\n  return (\n    <Flex column>\n      <InputSearchContainer align=\"center\">\n        <StyledInputSearch\n          ref={searchRef}\n          value={query}\n          placeholder={`${t(\"Search icons\")}…`}\n          onChange={handleFilter}\n        />\n      </InputSearchContainer>\n      <ColorPicker\n        width={panelWidth}\n        activeColor={color}\n        onSelect={onColorChange}\n      />\n      <GridTemplate\n        ref={scrollableRef}\n        width={panelWidth}\n        height={GRID_HEIGHT}\n        data={templateData}\n        onIconSelect={handleIconSelection}\n      />\n    </Flex>\n  );\n};\n\nconst InputSearchContainer = styled(Flex)`\n  height: 48px;\n  padding: 6px 12px 0px;\n`;\n\nconst StyledInputSearch = styled(InputSearch)`\n  flex-grow: 1;\n`;\n\nexport default IconPanel;\n","import { SmileyIcon } from \"outline-icons\";\nimport * as React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  PopoverDisclosure,\n  Tab,\n  TabList,\n  TabPanel,\n  usePopoverState,\n  useTabState,\n} from \"reakit\";\nimport styled, { css } from \"styled-components\";\nimport Icon from \"@shared/components/Icon\";\nimport { s, hover } from \"@shared/styles\";\nimport theme from \"@shared/styles/theme\";\nimport { IconType } from \"@shared/types\";\nimport { determineIconType } from \"@shared/utils/icon\";\nimport Flex from \"~/components/Flex\";\nimport NudeButton from \"~/components/NudeButton\";\nimport Popover from \"~/components/Popover\";\nimport useMobile from \"~/hooks/useMobile\";\nimport useOnClickOutside from \"~/hooks/useOnClickOutside\";\nimport usePrevious from \"~/hooks/usePrevious\";\nimport useWindowSize from \"~/hooks/useWindowSize\";\nimport EmojiPanel from \"./components/EmojiPanel\";\nimport IconPanel from \"./components/IconPanel\";\nimport { PopoverButton } from \"./components/PopoverButton\";\n\nconst TAB_NAMES = {\n  Icon: \"icon\",\n  Emoji: \"emoji\",\n} as const;\n\nconst POPOVER_WIDTH = 408;\n\ntype Props = {\n  icon: string | null;\n  color: string;\n  size?: number;\n  initial?: string;\n  className?: string;\n  popoverPosition: \"bottom-start\" | \"right\";\n  allowDelete?: boolean;\n  borderOnHover?: boolean;\n  onChange: (icon: string | null, color: string | null) => void;\n  onOpen?: () => void;\n  onClose?: () => void;\n};\n\nconst IconPicker = ({\n  icon,\n  color,\n  size = 24,\n  initial,\n  className,\n  popoverPosition,\n  allowDelete,\n  onChange,\n  onOpen,\n  onClose,\n  borderOnHover,\n}: Props) => {\n  const { t } = useTranslation();\n\n  const { width: windowWidth } = useWindowSize();\n  const isMobile = useMobile();\n\n  const [query, setQuery] = React.useState(\"\");\n  const [chosenColor, setChosenColor] = React.useState(color);\n  const contentRef = React.useRef<HTMLDivElement | null>(null);\n\n  const iconType = determineIconType(icon);\n  const defaultTab = React.useMemo(\n    () =>\n      iconType === IconType.Emoji ? TAB_NAMES[\"Emoji\"] : TAB_NAMES[\"Icon\"],\n    [iconType]\n  );\n\n  const popover = usePopoverState({\n    placement: popoverPosition,\n    modal: true,\n    unstable_offset: [0, 0],\n  });\n  const { hide, show, visible } = popover;\n  const tab = useTabState({ selectedId: defaultTab });\n  const previouslyVisible = usePrevious(popover.visible);\n\n  const popoverWidth = isMobile ? windowWidth : POPOVER_WIDTH;\n  // In mobile, popover is absolutely positioned to leave 8px on both sides.\n  const panelWidth = isMobile ? windowWidth - 16 : popoverWidth;\n\n  const resetDefaultTab = React.useCallback(() => {\n    tab.select(defaultTab);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [defaultTab]);\n\n  const handleIconChange = React.useCallback(\n    (ic: string) => {\n      hide();\n      const icType = determineIconType(ic);\n      const finalColor = icType === IconType.SVG ? chosenColor : null;\n      onChange(ic, finalColor);\n    },\n    [hide, onChange, chosenColor]\n  );\n\n  const handleIconColorChange = React.useCallback(\n    (c: string) => {\n      setChosenColor(c);\n\n      const icType = determineIconType(icon);\n      // Outline icon set; propagate color change\n      if (icType === IconType.SVG) {\n        onChange(icon, c);\n      }\n    },\n    [icon, onChange]\n  );\n\n  const handleIconRemove = React.useCallback(() => {\n    hide();\n    onChange(null, null);\n  }, [hide, onChange]);\n\n  const handlePopoverButtonClick = React.useCallback(\n    (ev: React.MouseEvent) => {\n      ev.stopPropagation();\n      if (visible) {\n        hide();\n      } else {\n        show();\n      }\n    },\n    [hide, show, visible]\n  );\n\n  // Popover open effect\n  React.useEffect(() => {\n    if (visible && !previouslyVisible) {\n      onOpen?.();\n    } else if (!visible && previouslyVisible) {\n      onClose?.();\n      setQuery(\"\");\n      resetDefaultTab();\n    }\n  }, [visible, previouslyVisible, onOpen, onClose, resetDefaultTab]);\n\n  // Custom click outside handling rather than using `hideOnClickOutside` from reakit so that we can\n  // prevent event bubbling.\n  useOnClickOutside(\n    contentRef,\n    (event) => {\n      if (\n        popover.visible &&\n        !popover.unstable_disclosureRef.current?.contains(event.target as Node)\n      ) {\n        event.stopPropagation();\n        event.preventDefault();\n        popover.hide();\n      }\n    },\n    { capture: true }\n  );\n\n  return (\n    <>\n      <PopoverDisclosure {...popover}>\n        {(props) => (\n          <PopoverButton\n            {...props}\n            aria-label={t(\"Show menu\")}\n            className={className}\n            size={size}\n            onClick={handlePopoverButtonClick}\n            $borderOnHover={borderOnHover}\n          >\n            {iconType && icon ? (\n              <Icon value={icon} color={color} size={size} initial={initial} />\n            ) : (\n              <StyledSmileyIcon color={theme.placeholder} size={size} />\n            )}\n          </PopoverButton>\n        )}\n      </PopoverDisclosure>\n      <Popover\n        {...popover}\n        ref={contentRef}\n        width={popoverWidth}\n        shrink\n        aria-label={t(\"Icon Picker\")}\n        onClick={(e) => e.stopPropagation()}\n        hideOnClickOutside={false}\n      >\n        <>\n          <TabActionsWrapper justify=\"space-between\" align=\"center\">\n            <TabList {...tab}>\n              <StyledTab\n                {...tab}\n                id={TAB_NAMES[\"Icon\"]}\n                aria-label={t(\"Icons\")}\n                $active={tab.selectedId === TAB_NAMES[\"Icon\"]}\n              >\n                {t(\"Icons\")}\n              </StyledTab>\n              <StyledTab\n                {...tab}\n                id={TAB_NAMES[\"Emoji\"]}\n                aria-label={t(\"Emojis\")}\n                $active={tab.selectedId === TAB_NAMES[\"Emoji\"]}\n              >\n                {t(\"Emojis\")}\n              </StyledTab>\n            </TabList>\n            {allowDelete && icon && (\n              <RemoveButton onClick={handleIconRemove}>\n                {t(\"Remove\")}\n              </RemoveButton>\n            )}\n          </TabActionsWrapper>\n          <StyledTabPanel {...tab}>\n            <IconPanel\n              panelWidth={panelWidth}\n              initial={initial ?? \"?\"}\n              color={chosenColor}\n              query={query}\n              panelActive={\n                popover.visible && tab.selectedId === TAB_NAMES[\"Icon\"]\n              }\n              onIconChange={handleIconChange}\n              onColorChange={handleIconColorChange}\n              onQueryChange={setQuery}\n            />\n          </StyledTabPanel>\n          <StyledTabPanel {...tab}>\n            <EmojiPanel\n              panelWidth={panelWidth}\n              query={query}\n              panelActive={\n                popover.visible && tab.selectedId === TAB_NAMES[\"Emoji\"]\n              }\n              onEmojiChange={handleIconChange}\n              onQueryChange={setQuery}\n            />\n          </StyledTabPanel>\n        </>\n      </Popover>\n    </>\n  );\n};\n\nconst StyledSmileyIcon = styled(SmileyIcon)`\n  flex-shrink: 0;\n\n  @media print {\n    display: none;\n  }\n`;\n\nconst RemoveButton = styled(NudeButton)`\n  width: auto;\n  font-weight: 500;\n  font-size: 14px;\n  color: ${s(\"textTertiary\")};\n  padding: 8px 12px;\n  transition: color 100ms ease-in-out;\n  &: ${hover} {\n    color: ${s(\"textSecondary\")};\n  }\n`;\n\nconst TabActionsWrapper = styled(Flex)`\n  padding-left: 12px;\n  border-bottom: 1px solid ${s(\"inputBorder\")};\n`;\n\nconst StyledTab = styled(Tab)<{ $active: boolean }>`\n  position: relative;\n  font-weight: 500;\n  font-size: 14px;\n  cursor: var(--pointer);\n  background: none;\n  border: 0;\n  padding: 8px 12px;\n  user-select: none;\n  color: ${({ $active }) => ($active ? s(\"textSecondary\") : s(\"textTertiary\"))};\n  transition: color 100ms ease-in-out;\n\n  &: ${hover} {\n    color: ${s(\"textSecondary\")};\n  }\n\n  ${({ $active }) =>\n    $active &&\n    css`\n      &:after {\n        content: \"\";\n        position: absolute;\n        bottom: 0;\n        left: 0;\n        right: 0;\n        height: 1px;\n        background: ${s(\"textSecondary\")};\n      }\n    `}\n`;\n\nconst StyledTabPanel = styled(TabPanel)`\n  height: 410px;\n  overflow-y: auto;\n`;\n\nexport default React.memo(IconPicker);\n"],"names":["TabList","createComponent","as","useHook","createHook","name","compose","useComposite","keys","TAB_LIST_KEYS","useProps","options","htmlProps","_objectSpread2","role","orientation","useCreateElement","useCreateElement$1","type","props","children","ColorPicker","width","activeColor","onSelect","localValue","setLocalValue","React","useState","panel","setPanel","colorPalette","includes","Panel","handleSwitcherClick","useCallback","isLargeMobile","breakpoints","mobileLarge","useEffect","jsxs","Container","justify","LargeMobileBuiltinColors","onClick","LargeMobileCustomColor","value","onValidHex","gap","jsx","PanelSwitcher","align","SwitcherButton","BackIcon","BuiltinColors","CustomColor","className","Flex","auto","map","color","ColorButton","$color","$active","Selected","hasHexChars","test","handleInputChange","ev","val","target","uppercasedVal","toUpperCase","validateColorHex","Text","size","CustomColorInput","maxLength","onChange","styled","withConfig","componentId","s","span","NudeButton","hover","input","attrs","autocomplete","TotalIcons","Object","IconLibrary","mapping","length","IconPanel","panelWidth","initial","query","panelActive","onIconChange","onColorChange","onQueryChange","t","useTranslation","searchRef","useRef","scrollableRef","incrementIconCount","getFreqIcons","useIconState","iconsFreq","setIconsFreq","usePersistedState","iconsFreqKey","lastIcon","setLastIcon","lastIconKey","undefined","icon","freqs","entries","FREQUENTLY_USED_COUNT","Track","sortFrequencies","splice","fromEntries","icons","slice","Get","_","isLastPresent","pop","push","freqIcons","useMemo","totalFreqIcons","filteredIcons","findIcons","isSearch","category","DisplayCategory","Search","All","delayPerIcon","handleFilter","event","handleIconSelection","id","baseIcons","index","IconType","SVG","delay","Math","round","templateData","Frequent","current","scrollTop","focus","column","InputSearchContainer","StyledInputSearch","ref","placeholder","GridTemplate","height","data","onIconSelect","InputSearch","TAB_NAMES","StyledSmileyIcon","SmileyIcon","RemoveButton","TabActionsWrapper","StyledTab","Tab","css","StyledTabPanel","TabPanel","IconPicker","popoverPosition","allowDelete","onOpen","onClose","borderOnHover","windowWidth","useWindowSize","isMobile","useMobile","setQuery","chosenColor","setChosenColor","contentRef","iconType","determineIconType","defaultTab","Emoji","popover","usePopoverState","placement","modal","unstable_offset","hide","show","visible","tab","useTabState","selectedId","previouslyVisible","usePrevious","popoverWidth","resetDefaultTab","select","handleIconChange","ic","icType","finalColor","handleIconColorChange","c","handleIconRemove","handlePopoverButtonClick","stopPropagation","unstable_disclosureRef","contains","preventDefault","capture","Fragment","PopoverDisclosure","PopoverButton","$borderOnHover","Icon","theme","Popover","shrink","e","hideOnClickOutside","EmojiPanel","onEmojiChange"],"mappings":"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","x_google_ignoreList":[0]}