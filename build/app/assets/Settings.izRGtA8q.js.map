{"version":3,"file":"Settings.izRGtA8q.js","sources":["../../../plugins/matomo/client/Settings.tsx"],"sourcesContent":["import find from \"lodash/find\";\nimport { observer } from \"mobx-react\";\nimport * as React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useTranslation, Trans } from \"react-i18next\";\nimport { toast } from \"sonner\";\nimport { IntegrationType, IntegrationService } from \"@shared/types\";\nimport Integration from \"~/models/Integration\";\nimport SettingRow from \"~/scenes/Settings/components/SettingRow\";\nimport Button from \"~/components/Button\";\nimport Heading from \"~/components/Heading\";\nimport Input from \"~/components/Input\";\nimport Scene from \"~/components/Scene\";\nimport Text from \"~/components/Text\";\nimport useStores from \"~/hooks/useStores\";\nimport Icon from \"./Icon\";\n\ntype FormData = {\n  instanceUrl: string;\n  measurementId: string;\n};\n\nfunction Matomo() {\n  const { integrations } = useStores();\n  const { t } = useTranslation();\n\n  const integration = find(integrations.orderedData, {\n    type: IntegrationType.Analytics,\n    service: IntegrationService.Matomo,\n  }) as Integration<IntegrationType.Analytics> | undefined;\n\n  const {\n    register,\n    reset,\n    handleSubmit: formHandleSubmit,\n    formState,\n  } = useForm<FormData>({\n    mode: \"all\",\n    defaultValues: {\n      instanceUrl: integration?.settings.instanceUrl,\n      measurementId: integration?.settings.measurementId,\n    },\n  });\n\n  React.useEffect(() => {\n    void integrations.fetchPage({\n      type: IntegrationType.Analytics,\n    });\n  }, [integrations]);\n\n  React.useEffect(() => {\n    reset({\n      measurementId: integration?.settings.measurementId,\n      instanceUrl: integration?.settings.instanceUrl,\n    });\n  }, [integration, reset]);\n\n  const handleSubmit = React.useCallback(\n    async (data: FormData) => {\n      try {\n        if (data.instanceUrl && data.measurementId) {\n          await integrations.save({\n            id: integration?.id,\n            type: IntegrationType.Analytics,\n            service: IntegrationService.Matomo,\n            settings: {\n              measurementId: data.measurementId,\n              // Ensure the URL ends with a trailing slash\n              instanceUrl: data.instanceUrl.replace(/\\/?$/, \"/\"),\n            } as Integration<IntegrationType.Analytics>[\"settings\"],\n          });\n        } else {\n          await integration?.delete();\n        }\n\n        toast.success(t(\"Settings saved\"));\n      } catch (err) {\n        toast.error(err.message);\n      }\n    },\n    [integrations, integration, t]\n  );\n\n  return (\n    <Scene title=\"Matomo\" icon={<Icon />}>\n      <Heading>Matomo</Heading>\n\n      <Text as=\"p\" type=\"secondary\">\n        <Trans>\n          Configure a Matomo installation to send views and analytics from the\n          workspace to your own Matomo instance.\n        </Trans>\n      </Text>\n      <form onSubmit={formHandleSubmit(handleSubmit)}>\n        <SettingRow\n          label={t(\"Instance URL\")}\n          name=\"instanceUrl\"\n          description={t(\n            \"The URL of your Matomo instance. If you are using Matomo Cloud it will end in matomo.cloud/\"\n          )}\n          border={false}\n        >\n          <Input\n            required\n            placeholder=\"https://instance.matomo.cloud/\"\n            {...register(\"instanceUrl\")}\n          />\n        </SettingRow>\n        <SettingRow\n          label={t(\"Site ID\")}\n          name=\"measurementId\"\n          description={t(\n            \"An ID that uniquely identifies the website in your Matomo instance.\"\n          )}\n          border={false}\n        >\n          <Input required placeholder=\"1\" {...register(\"measurementId\")} />\n        </SettingRow>\n\n        <Button type=\"submit\" disabled={formState.isSubmitting}>\n          {formState.isSubmitting ? `${t(\"Saving\")}â€¦` : t(\"Save\")}\n        </Button>\n      </form>\n    </Scene>\n  );\n}\n\nexport default observer(Matomo);\n"],"names":["observer","Matomo","integrations","useStores","t","useTranslation","integration","find","orderedData","type","IntegrationType","Analytics","service","IntegrationService","register","reset","handleSubmit","formHandleSubmit","formState","useForm","mode","defaultValues","instanceUrl","settings","measurementId","React","fetchPage","async","data","save","id","replace","delete","success","err","error","message","Scene","title","icon","jsx","Icon","children","Heading","Text","as","Trans","onSubmit","SettingRow","label","name","description","border","Input","required","placeholder","Button","disabled","isSubmitting"],"mappings":"wSA+HA,MAAeA,EAAAA,GAzGf,SAASC,SACD,MAAAC,aAAEA,GAAiBC,KACnBC,EAAEA,GAAMC,IAERC,EAAcC,EAAKL,EAAaM,YAAa,CACjDC,KAAMC,EAAgBC,UACtBC,QAASC,EAAmBZ,UAGxBa,SACJA,EAAAA,MACAC,EACAC,aAAcC,EAAAA,UACdC,GACEC,EAAkB,CACpBC,KAAM,MACNC,cAAe,CACbC,YAAahB,GAAaiB,SAASD,YACnCE,cAAelB,GAAaiB,SAASC,iBAIzCC,EAAAA,WAAgB,KACTvB,EAAawB,UAAU,CAC1BjB,KAAMC,EAAgBC,WACvB,GACA,CAACT,IAEJuB,EAAAA,WAAgB,KACRV,EAAA,CACJS,cAAelB,GAAaiB,SAASC,cACrCF,YAAahB,GAAaiB,SAASD,aACpC,GACA,CAAChB,EAAaS,IAEjB,MAAMC,EAAeS,eACnBE,MAAOC,IACD,IACEA,EAAKN,aAAeM,EAAKJ,oBACrBtB,EAAa2B,KAAK,CACtBC,GAAIxB,GAAawB,GACjBrB,KAAMC,EAAgBC,UACtBC,QAASC,EAAmBZ,OAC5BsB,SAAU,CACRC,cAAeI,EAAKJ,cAEpBF,YAAaM,EAAKN,YAAYS,QAAQ,OAAQ,cAI5CzB,GAAa0B,UAGfC,EAAAA,QAAQ7B,EAAE,yBACT8B,GACDC,EAAAA,MAAMD,EAAIE,QAClB,IAEF,CAAClC,EAAcI,EAAaF,aAI3BiC,EAAM,CAAAC,MAAM,SAASC,KAAMC,EAACC,MAC3BC,SAAA,CAACF,EAAAG,GAAQD,SAAM,WAEdF,EAAAI,GAAKC,GAAG,IAAIpC,KAAK,YAChBiC,SAAAF,EAACM,EAAK,CAAAJ,SAAA,oHAKP,OAAA,CAAKK,SAAU9B,EAAiBD,GAC/B0B,SAAA,CAACF,EAAAQ,EAAA,CACCC,MAAO7C,EAAE,gBACT8C,KAAK,cACLC,YAAa/C,EACX,+FAEFgD,QAAQ,EAERV,SAACF,EAAAa,EACC,CAAAC,UAAQ,EACRC,YAAY,oCACRzC,EAAS,mBAGhB0B,EAAAQ,EACC,CAAAC,MAAO7C,EAAE,WACT8C,KAAK,gBACLC,YAAa/C,EACX,uEAEFgD,QAAQ,EAERV,SAACF,EAAAa,EAAM,CAAAC,UAAQ,EAACC,YAAY,OAAQzC,EAAS,uBAG9C0C,EAAO,CAAA/C,KAAK,SAASgD,SAAUvC,EAAUwC,aACvCxC,SAAAA,EAAUwC,aAAe,GAAGtD,EAAE,aAAeA,EAAE,eAK1D"}