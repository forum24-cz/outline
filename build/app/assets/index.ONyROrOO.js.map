{"version":3,"mappings":"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","names":["CollectionBreadcrumb","collection","t","useTranslation","items","React","collectionNode","type","title","name","icon","jsx","CollectionIcon","expanded","to","collectionPath","path","category","isArchived","ArchiveIcon","archivePath","undefined","output","push","Breadcrumb","highlightFirstItem","extensions","withUIExtensions","richExtensions","Placeholder","styled","Text","withConfig","componentId","s","observer","CollectionDescription","collections","useStores","user","useCurrentUser","rejectOnEmpty","can","usePolicy","handleSave","useMemo","debounce","async","getValue","save","data","err","error","childRef","childOffsetHeight","current","offsetHeight","editorStyle","padding","margin","paddingBottom","isSaving","LoadingIndicator","hasDescription","update","jsxs","React.Suspense","fallback","children","Editor","defaultValue","onChange","placeholder","maxLength","CollectionValidation","maxDescriptionLength","canUpdate","readOnly","userId","id","embedsDisabled","ref","Actions","createDocument","Fragment","Action","Tooltip","content","shortcut","placement","Button","as","Link","newDocumentPath","disabled","PlusIcon","Separator","CollectionMenu","label","props","MoreIcon","borderOnHover","neutral","DropMessage","DropzoneContainer","div","isDragActive","theme","css","background","divider","DropToImport","accept","collectionId","handleFiles","isImporting","useImportDocument","handleRejection","Dropzone","onDropAccepted","onDropRejected","noClick","multiple","getRootProps","getInputProps","tabIndex","Centered","Flex","EmptyCollection","collectionName","Fade","column","Trans","defaults","values","components","em","MembershipPreview","limit","isLoading","setIsLoading","usersCount","setUsersCount","groupsCount","setGroupsCount","memberships","groupMemberships","users","collectionUsers","inCollection","context","useActionContext","isMobile","useMobile","permission","options","groups","Promise","all","fetchPage","PAGINATION_SYMBOL","total","fetchData","overflow","length","NudeButton","tooltip","count","delay","width","height","Facepile","size","AvatarSize","Large","sortBy","Notices","ErrorBoundary","isDeleted","Notice","userName","archivedBy","Time","dateTime","archivedAt","addSuffix","ShareButton","shares","team","useCurrentTeam","share","getByCollectionId","isPubliclyShared","sharing","published","popover","usePopoverState","gutter","unstable_fixed","GlobeIcon","PadlockIcon","PopoverDisclosure","Popover","scrollable","SharePopover","onRequestClose","hide","visible","IconPicker","lazy","__vitePreload","import","__VITE_PRELOAD__","CollectionScene","_CollectionScene","params","useParams","history","useHistory","match","useRouteMatch","location","useLocation","documents","ui","isFetching","setFetching","setError","useState","currentPath","pathname","setLastVisitedPath","useLastVisitedPath","sidebarContext","useLocationSidebarContext","urlId","split","pop","getByUrl","get","pins","usePinnedDocuments","collectionTab","setCollectionTab","usePersistedState","CollectionPath","listen","handleIconChange","color","canonicalUrl","updateCollectionPath","url","replace","state","setActiveCollection","fetch","useCommandBarActions","editCollection","activeCollectionId","Error404","hasOverview","fallbackIcon","Icon","value","tabProps","exact","onClick","Scene","centered","textTitle","left","isEmpty","InputSearchPage","source","actions","importFileTypes","join","CenteredContent","withStickyHeader","CollectionHeading","IconTitleWrapper","colorPalette","initial","popoverPosition","PinnedDocuments","placeholderCount","Documents","Tabs","Tab","Switch","Route","Redirect","Empty","PaginatedDocumentList","archivedInCollection","parentDocumentId","sort","field","direction","statusFilter","StatusFilter","Archived","showParentDocuments","alphabeticalInCollection","fetchAlphabetical","leastRecentlyUpdatedInCollection","fetchLeastRecentlyUpdated","recentlyPublishedInCollection","fetchRecentlyPublished","showPublished","recentlyUpdatedInCollection","fetchRecentlyUpdated","rootInCollection","Heading","PlaceholderText","PlaceholderList","KeyedCollection","breakpoint"],"ignoreList":[],"sources":["../../../app/components/CollectionBreadcrumb.tsx","../../../app/components/CollectionDescription.tsx","../../../app/scenes/Collection/components/Actions.tsx","../../../app/scenes/Collection/components/DropToImport.tsx","../../../app/scenes/Collection/components/Empty.tsx","../../../app/scenes/Collection/components/MembershipPreview.tsx","../../../app/scenes/Collection/components/Notices.tsx","../../../app/scenes/Collection/components/ShareButton.tsx","../../../app/scenes/Collection/index.tsx"],"sourcesContent":["import { ArchiveIcon } from \"outline-icons\";\nimport * as React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport Collection from \"~/models/Collection\";\nimport CollectionIcon from \"~/components/Icons/CollectionIcon\";\nimport { MenuInternalLink } from \"~/types\";\nimport { archivePath, collectionPath } from \"~/utils/routeHelpers\";\nimport Breadcrumb from \"./Breadcrumb\";\n\ntype Props = {\n  collection: Collection;\n};\n\nexport const CollectionBreadcrumb: React.FC<Props> = ({ collection }) => {\n  const { t } = useTranslation();\n\n  const items = React.useMemo(() => {\n    const collectionNode: MenuInternalLink = {\n      type: \"route\",\n      title: collection.name,\n      icon: <CollectionIcon collection={collection} expanded />,\n      to: collectionPath(collection.path),\n    };\n\n    const category: MenuInternalLink | undefined = collection.isArchived\n      ? {\n          type: \"route\",\n          icon: <ArchiveIcon />,\n          title: t(\"Archive\"),\n          to: archivePath(),\n        }\n      : undefined;\n\n    const output = [];\n    if (category) {\n      output.push(category);\n    }\n\n    output.push(collectionNode);\n\n    return output;\n  }, [collection, t]);\n\n  return <Breadcrumb items={items} highlightFirstItem />;\n};\n","import debounce from \"lodash/debounce\";\nimport { observer } from \"mobx-react\";\nimport * as React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { toast } from \"sonner\";\nimport styled from \"styled-components\";\nimport { richExtensions } from \"@shared/editor/nodes\";\nimport { s } from \"@shared/styles\";\nimport { CollectionValidation } from \"@shared/validations\";\nimport Collection from \"~/models/Collection\";\nimport Editor from \"~/components/Editor\";\nimport LoadingIndicator from \"~/components/LoadingIndicator\";\nimport { withUIExtensions } from \"~/editor/extensions\";\nimport useCurrentUser from \"~/hooks/useCurrentUser\";\nimport usePolicy from \"~/hooks/usePolicy\";\nimport useStores from \"~/hooks/useStores\";\nimport Text from \"./Text\";\n\nconst extensions = withUIExtensions(richExtensions);\n\ntype Props = {\n  collection: Collection;\n};\n\nfunction CollectionDescription({ collection }: Props) {\n  const { collections } = useStores();\n  const { t } = useTranslation();\n  const user = useCurrentUser({ rejectOnEmpty: true });\n  const can = usePolicy(collection);\n\n  const handleSave = React.useMemo(\n    () =>\n      debounce(async (getValue) => {\n        try {\n          await collection.save({\n            data: getValue(false),\n          });\n        } catch (err) {\n          toast.error(t(\"Sorry, an error occurred saving the collection\"));\n          throw err;\n        }\n      }, 1000),\n    [collection, t]\n  );\n\n  const childRef = React.useRef<HTMLDivElement>(null);\n  const childOffsetHeight = childRef.current?.offsetHeight || 0;\n  const editorStyle = React.useMemo(\n    () => ({\n      padding: \"0 32px\",\n      margin: \"0 -32px\",\n      paddingBottom: `calc(50vh - ${childOffsetHeight}px)`,\n    }),\n    [childOffsetHeight]\n  );\n\n  return (\n    <>\n      {collections.isSaving && <LoadingIndicator />}\n      {(collection.hasDescription || can.update) && (\n        <React.Suspense fallback={<Placeholder>Loading…</Placeholder>}>\n          <Editor\n            defaultValue={collection.data}\n            onChange={handleSave}\n            placeholder={`${t(\"Add a description\")}…`}\n            extensions={extensions}\n            maxLength={CollectionValidation.maxDescriptionLength}\n            canUpdate={can.update}\n            readOnly={!can.update}\n            userId={user.id}\n            editorStyle={editorStyle}\n            embedsDisabled\n          />\n          <div ref={childRef} />\n        </React.Suspense>\n      )}\n    </>\n  );\n}\n\nconst Placeholder = styled(Text)`\n  color: ${s(\"placeholder\")};\n  cursor: text;\n  min-height: 27px;\n`;\n\nexport default observer(CollectionDescription);\n","import { observer } from \"mobx-react\";\nimport { MoreIcon, PlusIcon } from \"outline-icons\";\nimport * as React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport Collection from \"~/models/Collection\";\nimport { Action, Separator } from \"~/components/Actions\";\nimport Button from \"~/components/Button\";\nimport Tooltip from \"~/components/Tooltip\";\nimport usePolicy from \"~/hooks/usePolicy\";\nimport CollectionMenu from \"~/menus/CollectionMenu\";\nimport { newDocumentPath } from \"~/utils/routeHelpers\";\n\ntype Props = {\n  collection: Collection;\n};\n\nfunction Actions({ collection }: Props) {\n  const { t } = useTranslation();\n  const can = usePolicy(collection);\n\n  return (\n    <>\n      {can.createDocument && (\n        <>\n          <Action>\n            <Tooltip\n              content={t(\"New document\")}\n              shortcut=\"n\"\n              placement=\"bottom\"\n            >\n              <Button\n                as={Link}\n                to={collection ? newDocumentPath(collection.id) : \"\"}\n                disabled={!collection}\n                icon={<PlusIcon />}\n              >\n                {t(\"New doc\")}\n              </Button>\n            </Tooltip>\n          </Action>\n          <Separator />\n        </>\n      )}\n      <Action>\n        <CollectionMenu\n          collection={collection}\n          placement=\"bottom-end\"\n          label={(props) => (\n            <Button\n              aria-label={t(\"Collection menu\")}\n              icon={<MoreIcon />}\n              {...props}\n              borderOnHover\n              neutral\n            />\n          )}\n        />\n      </Action>\n    </>\n  );\n}\n\nexport default observer(Actions);\n","import { observer } from \"mobx-react\";\nimport * as React from \"react\";\nimport Dropzone from \"react-dropzone\";\nimport { useTranslation } from \"react-i18next\";\nimport { toast } from \"sonner\";\nimport styled, { css } from \"styled-components\";\nimport LoadingIndicator from \"~/components/LoadingIndicator\";\nimport Text from \"~/components/Text\";\nimport useImportDocument from \"~/hooks/useImportDocument\";\n\ntype Props = {\n  disabled: boolean;\n  accept: string;\n  collectionId: string;\n  children?: React.ReactNode;\n};\n\nconst DropToImport: React.FC<Props> = ({\n  children,\n  disabled,\n  accept,\n  collectionId,\n}: Props) => {\n  const { handleFiles, isImporting } = useImportDocument(collectionId);\n  const { t } = useTranslation();\n\n  const handleRejection = React.useCallback(() => {\n    toast.error(\n      t(\"Document not supported – try Markdown, Plain text, HTML, or Word\")\n    );\n  }, [t]);\n\n  return (\n    <Dropzone\n      accept={accept}\n      onDropAccepted={handleFiles}\n      onDropRejected={handleRejection}\n      disabled={disabled}\n      noClick\n      multiple\n    >\n      {({ getRootProps, getInputProps, isDragActive }) => (\n        <DropzoneContainer\n          {...getRootProps()}\n          isDragActive={isDragActive}\n          tabIndex={-1}\n        >\n          <input {...getInputProps()} />\n          {isImporting && <LoadingIndicator />}\n\n          {children}\n          <DropMessage>{t(\"Drop documents to import\")}</DropMessage>\n        </DropzoneContainer>\n      )}\n    </Dropzone>\n  );\n};\n\nconst DropMessage = styled(Text)`\n  opacity: 0;\n  pointer-events: none;\n`;\n\nconst DropzoneContainer = styled.div<{ isDragActive?: boolean }>`\n  outline-color: transparent !important;\n  height: calc(100% - 56px);\n  position: relative;\n\n  ${({ isDragActive, theme }) =>\n    isDragActive &&\n    css`\n      &:after {\n        display: block;\n        content: \"\";\n        position: absolute;\n        top: 24px;\n        right: 24px;\n        left: 24px;\n        height: 85vh;\n        background: ${theme.background};\n        border-radius: 8px;\n        border: 1px dashed ${theme.divider};\n        box-shadow: 0 0 0 100px ${theme.background};\n        z-index: 1;\n      }\n\n      ${DropMessage} {\n        opacity: 1;\n        z-index: 2;\n        position: absolute;\n        text-align: center;\n        top: 50vh;\n        left: 50%;\n        transform: translateX(-50%);\n      }\n    `}\n`;\n\nexport default observer(DropToImport);\n","import { observer } from \"mobx-react\";\nimport * as React from \"react\";\nimport { Trans } from \"react-i18next\";\nimport styled from \"styled-components\";\nimport Collection from \"~/models/Collection\";\nimport Fade from \"~/components/Fade\";\nimport Flex from \"~/components/Flex\";\nimport Text from \"~/components/Text\";\n\ntype Props = {\n  /** The collection to display the empty state for. */\n  collection: Collection;\n};\n\nfunction EmptyCollection({ collection }: Props) {\n  const collectionName = collection ? collection.name : \"\";\n\n  return (\n    <Fade>\n      <Centered column>\n        <Text as=\"p\" type=\"secondary\">\n          <Trans\n            defaults=\"<em>{{ collectionName }}</em> doesn’t contain any\n                    documents yet.\"\n            values={{\n              collectionName,\n            }}\n            components={{\n              em: <strong />,\n            }}\n          />\n        </Text>\n      </Centered>\n    </Fade>\n  );\n}\n\nconst Centered = styled(Flex)`\n  text-align: center;\n  align-items: center;\n  justify-content: center;\n  margin: 0 auto;\n  max-width: 380px;\n  height: 50vh;\n`;\n\nexport default observer(EmptyCollection);\n","import sortBy from \"lodash/sortBy\";\nimport { observer } from \"mobx-react\";\nimport * as React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { PAGINATION_SYMBOL } from \"~/stores/base/Store\";\nimport Collection from \"~/models/Collection\";\nimport { AvatarSize } from \"~/components/Avatar\";\nimport Facepile from \"~/components/Facepile\";\nimport Fade from \"~/components/Fade\";\nimport NudeButton from \"~/components/NudeButton\";\nimport useActionContext from \"~/hooks/useActionContext\";\nimport useMobile from \"~/hooks/useMobile\";\nimport useStores from \"~/hooks/useStores\";\n\ntype Props = {\n  collection: Collection;\n  limit?: number;\n};\n\nconst MembershipPreview = ({ collection, limit = 8 }: Props) => {\n  const [isLoading, setIsLoading] = React.useState(false);\n  const [usersCount, setUsersCount] = React.useState(0);\n  const [groupsCount, setGroupsCount] = React.useState(0);\n  const { t } = useTranslation();\n  const { memberships, groupMemberships, users } = useStores();\n  const collectionUsers = users.inCollection(collection.id);\n  const context = useActionContext();\n  const isMobile = useMobile();\n\n  React.useEffect(() => {\n    const fetchData = async () => {\n      if (collection.permission || isMobile) {\n        return;\n      }\n      setIsLoading(true);\n\n      try {\n        const options = {\n          id: collection.id,\n          limit,\n        };\n        const [users, groups] = await Promise.all([\n          memberships.fetchPage(options),\n          groupMemberships.fetchPage(options),\n        ]);\n        if (users[PAGINATION_SYMBOL]) {\n          setUsersCount(users[PAGINATION_SYMBOL].total ?? 0);\n        }\n        if (groups[PAGINATION_SYMBOL]) {\n          setGroupsCount(groups[PAGINATION_SYMBOL].total ?? 0);\n        }\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    void fetchData();\n  }, [\n    isMobile,\n    collection.permission,\n    collection.id,\n    groupMemberships,\n    memberships,\n    limit,\n  ]);\n\n  if (isLoading || collection.permission || isMobile) {\n    return null;\n  }\n\n  const overflow = usersCount + groupsCount - collectionUsers.length;\n\n  return (\n    <NudeButton\n      context={context}\n      tooltip={{\n        content:\n          usersCount > 0\n            ? groupsCount > 0\n              ? groupsCount > 1\n                ? t(\n                    `{{ usersCount }} users and {{ groupsCount }} groups with access`,\n                    { usersCount, groupsCount, count: usersCount }\n                  )\n                : t(`{{ usersCount }} users and a group have access`, {\n                    usersCount,\n                    count: usersCount,\n                  })\n              : t(`{{ usersCount }} users with access`, {\n                  usersCount,\n                  count: usersCount,\n                })\n            : t(`{{ groupsCount }} groups with access`, {\n                groupsCount,\n                count: groupsCount,\n              }),\n        delay: 250,\n      }}\n      width=\"auto\"\n      height=\"auto\"\n    >\n      <Fade>\n        <Facepile\n          size={AvatarSize.Large}\n          users={sortBy(collectionUsers, \"lastActiveAt\")}\n          overflow={overflow}\n          limit={limit}\n        />\n      </Fade>\n    </NudeButton>\n  );\n};\n\nexport default observer(MembershipPreview);\n","import { ArchiveIcon } from \"outline-icons\";\nimport * as React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport Collection from \"~/models/Collection\";\nimport ErrorBoundary from \"~/components/ErrorBoundary\";\nimport Notice from \"~/components/Notice\";\nimport Time from \"~/components/Time\";\n\ntype Props = {\n  collection: Collection;\n};\n\nexport default function Notices({ collection }: Props) {\n  const { t } = useTranslation();\n\n  return (\n    <ErrorBoundary>\n      {collection.isArchived && !collection.isDeleted && (\n        <Notice icon={<ArchiveIcon />}>\n          {t(\"Archived by {{userName}}\", {\n            userName: collection.archivedBy?.name ?? t(\"Unknown\"),\n          })}\n          &nbsp;\n          <Time dateTime={collection.archivedAt} addSuffix />\n        </Notice>\n      )}\n    </ErrorBoundary>\n  );\n}\n","import { observer } from \"mobx-react\";\nimport { GlobeIcon, PadlockIcon } from \"outline-icons\";\nimport * as React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { usePopoverState, PopoverDisclosure } from \"reakit/Popover\";\nimport Collection from \"~/models/Collection\";\nimport Button from \"~/components/Button\";\nimport Popover from \"~/components/Popover\";\nimport SharePopover from \"~/components/Sharing/Collection/SharePopover\";\nimport useCurrentTeam from \"~/hooks/useCurrentTeam\";\nimport useMobile from \"~/hooks/useMobile\";\nimport useStores from \"~/hooks/useStores\";\n\ntype Props = {\n  /** Collection being shared */\n  collection: Collection;\n};\n\nfunction ShareButton({ collection }: Props) {\n  const { t } = useTranslation();\n  const { shares } = useStores();\n  const team = useCurrentTeam();\n  const share = shares.getByCollectionId(collection.id);\n  const isPubliclyShared =\n    team.sharing !== false && collection?.sharing !== false && share?.published;\n\n  const popover = usePopoverState({\n    gutter: 0,\n    placement: \"bottom-end\",\n    unstable_fixed: true,\n  });\n  const isMobile = useMobile();\n  if (isMobile) {\n    return null;\n  }\n\n  const icon = isPubliclyShared ? (\n    <GlobeIcon />\n  ) : collection.permission ? undefined : (\n    <PadlockIcon />\n  );\n\n  return (\n    <>\n      <PopoverDisclosure {...popover}>\n        {(props) => (\n          <Button icon={icon} neutral {...props}>\n            {t(\"Share\")}\n          </Button>\n        )}\n      </PopoverDisclosure>\n\n      <Popover\n        {...popover}\n        aria-label={t(\"Share\")}\n        width={400}\n        scrollable={false}\n      >\n        <SharePopover\n          collection={collection}\n          onRequestClose={popover.hide}\n          visible={popover.visible}\n        />\n      </Popover>\n    </>\n  );\n}\n\nexport default observer(ShareButton);\n","import { observer } from \"mobx-react\";\nimport * as React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  useParams,\n  Switch,\n  Route,\n  useHistory,\n  useRouteMatch,\n  useLocation,\n  Redirect,\n} from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport breakpoint from \"styled-components-breakpoint\";\nimport Icon, { IconTitleWrapper } from \"@shared/components/Icon\";\nimport { s } from \"@shared/styles\";\nimport { StatusFilter } from \"@shared/types\";\nimport { colorPalette } from \"@shared/utils/collections\";\nimport Collection from \"~/models/Collection\";\nimport { Action } from \"~/components/Actions\";\nimport CenteredContent from \"~/components/CenteredContent\";\nimport { CollectionBreadcrumb } from \"~/components/CollectionBreadcrumb\";\nimport CollectionDescription from \"~/components/CollectionDescription\";\nimport Heading from \"~/components/Heading\";\nimport CollectionIcon from \"~/components/Icons/CollectionIcon\";\nimport InputSearchPage from \"~/components/InputSearchPage\";\nimport PlaceholderList from \"~/components/List/Placeholder\";\nimport PaginatedDocumentList from \"~/components/PaginatedDocumentList\";\nimport PinnedDocuments from \"~/components/PinnedDocuments\";\nimport PlaceholderText from \"~/components/PlaceholderText\";\nimport Scene from \"~/components/Scene\";\nimport Tab from \"~/components/Tab\";\nimport Tabs from \"~/components/Tabs\";\nimport { editCollection } from \"~/actions/definitions/collections\";\nimport useCommandBarActions from \"~/hooks/useCommandBarActions\";\nimport { useLastVisitedPath } from \"~/hooks/useLastVisitedPath\";\nimport { useLocationSidebarContext } from \"~/hooks/useLocationSidebarContext\";\nimport usePersistedState from \"~/hooks/usePersistedState\";\nimport { usePinnedDocuments } from \"~/hooks/usePinnedDocuments\";\nimport usePolicy from \"~/hooks/usePolicy\";\nimport useStores from \"~/hooks/useStores\";\nimport { collectionPath, updateCollectionPath } from \"~/utils/routeHelpers\";\nimport Error404 from \"../Errors/Error404\";\nimport Actions from \"./components/Actions\";\nimport DropToImport from \"./components/DropToImport\";\nimport Empty from \"./components/Empty\";\nimport MembershipPreview from \"./components/MembershipPreview\";\nimport Notices from \"./components/Notices\";\nimport ShareButton from \"./components/ShareButton\";\n\nconst IconPicker = React.lazy(() => import(\"~/components/IconPicker\"));\n\nenum CollectionPath {\n  Overview = \"overview\",\n  Recent = \"recent\",\n  Updated = \"updated\",\n  Published = \"published\",\n  Old = \"old\",\n  Alphabetical = \"alphabetical\",\n}\n\nconst CollectionScene = observer(function _CollectionScene() {\n  const params = useParams<{ id?: string }>();\n  const history = useHistory();\n  const match = useRouteMatch();\n  const location = useLocation();\n  const { t } = useTranslation();\n  const { documents, collections, ui } = useStores();\n  const [isFetching, setFetching] = React.useState(false);\n  const [error, setError] = React.useState<Error | undefined>();\n  const currentPath = location.pathname;\n  const [, setLastVisitedPath] = useLastVisitedPath();\n  const sidebarContext = useLocationSidebarContext();\n\n  const id = params.id || \"\";\n  const urlId = id.split(\"-\").pop() ?? \"\";\n\n  const collection: Collection | null | undefined =\n    collections.getByUrl(id) || collections.get(id);\n  const can = usePolicy(collection);\n\n  const { pins, count } = usePinnedDocuments(urlId, collection?.id);\n  const [collectionTab, setCollectionTab] = usePersistedState<CollectionPath>(\n    `collection-tab:${collection?.id}`,\n    collection?.hasDescription\n      ? CollectionPath.Overview\n      : CollectionPath.Recent,\n    {\n      listen: false,\n    }\n  );\n\n  const handleIconChange = React.useCallback(\n    (icon: string | null, color: string | null) =>\n      collection?.save({ icon, color }),\n    [collection]\n  );\n\n  React.useEffect(() => {\n    setLastVisitedPath(currentPath);\n  }, [currentPath, setLastVisitedPath]);\n\n  React.useEffect(() => {\n    if (collection?.name) {\n      const canonicalUrl = updateCollectionPath(match.url, collection);\n\n      if (match.url !== canonicalUrl) {\n        history.replace(canonicalUrl, history.location.state);\n      }\n    }\n  }, [collection, collection?.name, history, id, match.url]);\n\n  React.useEffect(() => {\n    if (collection) {\n      ui.setActiveCollection(collection.id);\n    }\n\n    return () => ui.setActiveCollection(undefined);\n  }, [ui, collection]);\n\n  React.useEffect(() => {\n    async function fetchData() {\n      if ((!can || !collection) && !error && !isFetching) {\n        try {\n          setError(undefined);\n          setFetching(true);\n          await collections.fetch(id);\n        } catch (err) {\n          setError(err);\n        } finally {\n          setFetching(false);\n        }\n      }\n    }\n\n    void fetchData();\n  }, [collections, isFetching, collection, error, id, can]);\n\n  useCommandBarActions([editCollection], [ui.activeCollectionId ?? \"none\"]);\n\n  if (!collection && error) {\n    return <Error404 />;\n  }\n\n  const hasOverview = can.update || collection?.hasDescription;\n\n  const fallbackIcon = collection ? (\n    <Icon\n      value={collection.icon ?? \"collection\"}\n      color={collection.color || undefined}\n      size={40}\n    />\n  ) : null;\n\n  const tabProps = (path: CollectionPath) => ({\n    exact: true,\n    onClick: () => setCollectionTab(path),\n    to: {\n      pathname: collectionPath(collection!.path, path),\n      state: { sidebarContext },\n    },\n  });\n\n  return collection ? (\n    <Scene\n      centered={false}\n      textTitle={collection.name}\n      left={\n        collection.isArchived ? (\n          <CollectionBreadcrumb collection={collection} />\n        ) : collection.isEmpty ? undefined : (\n          <InputSearchPage\n            source=\"collection\"\n            placeholder={`${t(\"Search in collection\")}…`}\n            label={t(\"Search in collection\")}\n            collectionId={collection.id}\n          />\n        )\n      }\n      title={\n        <>\n          <CollectionIcon collection={collection} expanded />\n          &nbsp;{collection.name}\n        </>\n      }\n      actions={\n        <>\n          <MembershipPreview collection={collection} />\n          <Action>\n            {can.update && <ShareButton collection={collection} />}\n          </Action>\n          <Actions collection={collection} />\n        </>\n      }\n    >\n      <DropToImport\n        accept={documents.importFileTypes.join(\", \")}\n        disabled={!can.createDocument}\n        collectionId={collection.id}\n      >\n        <CenteredContent withStickyHeader>\n          <Notices collection={collection} />\n          <CollectionHeading>\n            <IconTitleWrapper>\n              {can.update ? (\n                <React.Suspense fallback={fallbackIcon}>\n                  <IconPicker\n                    icon={collection.icon ?? \"collection\"}\n                    color={collection.color ?? colorPalette[0]}\n                    initial={collection.name[0]}\n                    size={40}\n                    popoverPosition=\"bottom-start\"\n                    onChange={handleIconChange}\n                    borderOnHover\n                  />\n                </React.Suspense>\n              ) : (\n                fallbackIcon\n              )}\n            </IconTitleWrapper>\n            {collection.name}\n          </CollectionHeading>\n\n          <PinnedDocuments\n            pins={pins}\n            canUpdate={can.update}\n            placeholderCount={count}\n          />\n\n          <Documents>\n            <Tabs>\n              {hasOverview && (\n                <Tab {...tabProps(CollectionPath.Overview)}>\n                  {t(\"Overview\")}\n                </Tab>\n              )}\n              <Tab {...tabProps(CollectionPath.Recent)}>{t(\"Documents\")}</Tab>\n              {!collection.isArchived && (\n                <>\n                  <Tab {...tabProps(CollectionPath.Updated)}>\n                    {t(\"Recently updated\")}\n                  </Tab>\n                  <Tab {...tabProps(CollectionPath.Published)}>\n                    {t(\"Recently published\")}\n                  </Tab>\n                  <Tab {...tabProps(CollectionPath.Old)}>\n                    {t(\"Least recently updated\")}\n                  </Tab>\n                  <Tab {...tabProps(CollectionPath.Alphabetical)}>\n                    {t(\"A–Z\")}\n                  </Tab>\n                </>\n              )}\n            </Tabs>\n            <Switch>\n              <Route path={collectionPath(collection.path)} exact>\n                <Redirect\n                  to={{\n                    pathname: collectionPath(collection!.path, collectionTab),\n                    state: { sidebarContext },\n                  }}\n                />\n              </Route>\n              <Route\n                path={collectionPath(collection.path, CollectionPath.Overview)}\n              >\n                {hasOverview ? (\n                  <CollectionDescription collection={collection} />\n                ) : (\n                  <Redirect\n                    to={{\n                      pathname: collectionPath(\n                        collection.path,\n                        CollectionPath.Recent\n                      ),\n                      state: { sidebarContext },\n                    }}\n                  />\n                )}\n              </Route>\n              {collection.isEmpty ? (\n                <Empty collection={collection} />\n              ) : !collection.isArchived ? (\n                <>\n                  <Route\n                    path={collectionPath(\n                      collection.path,\n                      CollectionPath.Alphabetical\n                    )}\n                  >\n                    <PaginatedDocumentList\n                      key=\"alphabetical\"\n                      documents={documents.alphabeticalInCollection(\n                        collection.id\n                      )}\n                      fetch={documents.fetchAlphabetical}\n                      options={{\n                        collectionId: collection.id,\n                      }}\n                    />\n                  </Route>\n                  <Route\n                    path={collectionPath(collection.path, CollectionPath.Old)}\n                  >\n                    <PaginatedDocumentList\n                      key=\"old\"\n                      documents={documents.leastRecentlyUpdatedInCollection(\n                        collection.id\n                      )}\n                      fetch={documents.fetchLeastRecentlyUpdated}\n                      options={{\n                        collectionId: collection.id,\n                      }}\n                    />\n                  </Route>\n                  <Route\n                    path={collectionPath(\n                      collection.path,\n                      CollectionPath.Published\n                    )}\n                  >\n                    <PaginatedDocumentList\n                      key=\"published\"\n                      documents={documents.recentlyPublishedInCollection(\n                        collection.id\n                      )}\n                      fetch={documents.fetchRecentlyPublished}\n                      options={{\n                        collectionId: collection.id,\n                      }}\n                      showPublished\n                    />\n                  </Route>\n                  <Route\n                    path={collectionPath(\n                      collection.path,\n                      CollectionPath.Updated\n                    )}\n                  >\n                    <PaginatedDocumentList\n                      key=\"updated\"\n                      documents={documents.recentlyUpdatedInCollection(\n                        collection.id\n                      )}\n                      fetch={documents.fetchRecentlyUpdated}\n                      options={{\n                        collectionId: collection.id,\n                      }}\n                    />\n                  </Route>\n                  <Route\n                    path={collectionPath(\n                      collection.path,\n                      CollectionPath.Recent\n                    )}\n                    exact\n                  >\n                    <PaginatedDocumentList\n                      documents={documents.rootInCollection(collection.id)}\n                      fetch={documents.fetchPage}\n                      options={{\n                        collectionId: collection.id,\n                        parentDocumentId: null,\n                        sort: collection.sort.field,\n                        direction: collection.sort.direction,\n                      }}\n                      showParentDocuments\n                    />\n                  </Route>\n                </>\n              ) : (\n                <Route\n                  path={collectionPath(collection.path, CollectionPath.Recent)}\n                  exact\n                >\n                  <PaginatedDocumentList\n                    documents={documents.archivedInCollection(collection.id)}\n                    fetch={documents.fetchPage}\n                    options={{\n                      collectionId: collection.id,\n                      parentDocumentId: null,\n                      sort: collection.sort.field,\n                      direction: collection.sort.direction,\n                      statusFilter: [StatusFilter.Archived],\n                    }}\n                    showParentDocuments\n                  />\n                </Route>\n              )}\n            </Switch>\n          </Documents>\n        </CenteredContent>\n      </DropToImport>\n    </Scene>\n  ) : (\n    <CenteredContent>\n      <Heading>\n        <PlaceholderText height={35} />\n      </Heading>\n      <PlaceholderList count={5} />\n    </CenteredContent>\n  );\n});\n\nconst KeyedCollection = () => {\n  const params = useParams<{ id?: string }>();\n\n  // Forced mount prevents animation of pinned documents when navigating\n  // _between_ collections, speeds up perceived performance.\n  return <CollectionScene key={params.id} />;\n};\n\nconst Documents = styled.div`\n  position: relative;\n  background: ${s(\"background\")};\n`;\n\nconst CollectionHeading = styled(Heading)`\n  display: flex;\n  align-items: center;\n  position: relative;\n  margin-left: 40px;\n\n  ${breakpoint(\"tablet\")`\n    margin-left: 0;\n  `}\n`;\n\nexport default KeyedCollection;\n"],"file":"assets/index.ONyROrOO.js"}